<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FILE</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-07T08:43:17.403Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Les</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Document_Embedding</title>
    <link href="http://yoursite.com/2020/08/07/document_embedding/"/>
    <id>http://yoursite.com/2020/08/07/document_embedding/</id>
    <published>2020-08-07T08:57:15.000Z</published>
    <updated>2020-08-07T08:43:17.403Z</updated>
    
    <content type="html"><![CDATA[<p>[原文连接]<a href="https://towardsdatascience.com/document-embedding-techniques-fed3e7a6a25d" target="_blank" rel="noopener">https://towardsdatascience.com/document-embedding-techniques-fed3e7a6a25d</a></p><p>近年来，单词嵌入（将单词映射到数值向量空间中）已被证明是自然语言处理（NLP）任务的一种非常重要的方法，它使各种依赖于向量表示作为输入的机器学习模型都可以享受更丰富的文本表示输入。这些表示形式保留了更多关于单词的语义和句法信息，从而导致几乎所有可以想象的NLP任务的性能得到改善。</p><p>新颖的想法本身及其巨大的影响，都促使研究人员考虑如何将这种丰富的矢量表示形式提供给更大的文本单位（从句子到书籍）的问题。这项工作导致产生了许多新方法来生成这些映射，并为该问题提供了各种创新解决方案以及一些显着的突破。</p><blockquote><p><strong>注意</strong>”：这里使用“ <strong>文档</strong>”一词来指代<strong>任何单词序列</strong>，从句子和段落到社交媒体帖子，一直到文章，书籍和结构更复杂的文本文档。</p></blockquote><p>在本文中，我不仅会介绍单词嵌入技术的直接扩展方法（例如<em>doc2vec</em> 扩展<em>word2vec</em> 的方法），还将介绍其他值得注意的技术，这些技术有时会在其他输出中生成ℝⁿ中的文档到向量的映射。 。</p><h2 id="文件嵌入的应用"><a href="#文件嵌入的应用" class="headerlink" title="文件嵌入的应用"></a>文件嵌入的应用</h2><p>将文档映射到信息矢量表示的能力具有广泛的应用。以下只是部分列表。</p><p>[<a href="https://cs.stanford.edu/~quocle/paragraph_vector.pdf" target="_blank" rel="noopener">Le &amp; Mikolov, 2014</a>]展示了他们的<em>段落向量</em>法在几种文本分类和情感分析任务上的功能，而[<a href="https://arxiv.org/pdf/1507.07998.pdf" target="_blank" rel="noopener">Dai et al, 2015</a>] 在文档相似性任务的背景下对其进行了检验， [<a href="https://arxiv.org/pdf/1607.05368.pdf" target="_blank" rel="noopener">Lau &amp; Baldwin, 2016</a>]进行了基准测试它针对论坛问题重复任务和 <a href="http://ixa2.si.ehu.es/stswiki/index.php/Main_Page" target="_blank" rel="noopener">the Semantic Textual Similarity (STS) SemEval shared task</a>.</p><p>[<a href="https://arxiv.org/abs/1506.06726" target="_blank" rel="noopener">Kiros et al, 2015</a>] 已经证明了他们的<em>Skip-thought</em>向量在语义相关性，释义检测，图像句子排名，问题类型分类以及四个情感和主观性数据集上的使用。[Broere，2017]使用它们来预测POS标签和依赖关系。</p><p>[<a href="https://arxiv.org/pdf/1810.09302.pdf" target="_blank" rel="noopener">Chen et al, 2018</a>] 显示了<em>BioSentVec</em> ，他们在生物医学文本上训练过的句子嵌入集，在句子对相似性任务(<a href="https://github.com/ncbi-nlp/BioSentVec" target="_blank" rel="noopener">official Python implementation</a>).上表现良好。</p><p>最后，<a href="https://www.microsoft.com/en-us/research/project/dssm/" target="_blank" rel="noopener">Deep Semantic Similarity Model was used by various authors</a> 进行信息检索和Web搜索排名，广告选择/相关性，上下文实体搜索和兴趣度任务，问题解答，知识推断，图像字幕和机器翻译任务。</p><p>但是请注意，尽管文档嵌入的问题已经很久了，但许多当前有影响力的解决方案还是很年轻的，并且在紧随当代基于编码器-解码器的单词成功之后，这一领域在最近（大约在2014年）开始兴起嵌入技术，所以现在还很早。话虽如此，我希望这部分内容可以将以下各节放在更广阔的背景下，并以有意义的方式进行组织。</p><h2 id="突出的方法和趋势"><a href="#突出的方法和趋势" class="headerlink" title="突出的方法和趋势"></a>突出的方法和趋势</h2><hr><h3 id="文本嵌入的方法"><a href="#文本嵌入的方法" class="headerlink" title="文本嵌入的方法"></a>文本嵌入的方法</h3><p>映射领域的一种可能方法是采用以下四种主要方法：</p><ol><li><strong>总结词向量</strong><br>这是<em>对</em>经典的方法。<em>Bag-of-words</em> 正是针对一个热门单词向量而做到的，而您可以应用到它的各种加权方案都是以这种方式总结单词向量的方式。但是，这种方法在与最先进的词表示形式一起使用时（通常通过求平均值而不是求和）也有效，尤其是在考虑到这种用法优化词嵌入时，并且可以与任何这里介绍的更性感的方法。</li><li><strong>主题建模</strong><br>虽然这通常不是主题建模技术（如LDA和PLSI）的主要应用，但它们<em>固有地生成了一个文档嵌入空间</em>，用于对语料库中的单词分布进行建模和解释，而维可以看作是隐藏在<em>文档</em>中的潜在语义结构。数据，因此在我们的上下文中很有用。我没有在本文中真正介绍这种方法（LDA的简要介绍除外），因为我认为LDA很好地代表了这种方法，并且众所周知。</li><li><strong>编码器-解码器模型</strong><br>这是场景中最新的无监督功能，具有<em>doc2vec</em> 和 <em>skip-thought</em> 之类的功能。尽管这种方法自2000年代初就出现了（以 <em>神经概率语言模型</em> 的名义），但随着其成功地应用于词嵌入生成，它最近获得了新生，目前的研究集中在如何将其用途扩展到文档嵌入。这种方法从大型未标记语料库的可用性不断提高中获得了比其他方法更多的收益。</li><li><strong>有监督的表示学习</strong><br>这种方法的应用源于神经网络模型的兴起（或兴起），以及它们使用各种非线性多层算子学习输入数据的丰富表示的能力，<a href="https://en.wikipedia.org/wiki/Universal_approximation_theorem" target="_blank" rel="noopener">该函数可以近似各种映射</a>.。通过简单地将单词袋输入到神经网络中以解决与文本相关的监督问题，您将得到一个模型，其中隐藏层包含输入文本的丰富表示形式，这正是我们所追求的。</li></ol><p>有几种不受监督的方法不适用于上述任何一种方法（特别是<em>想到的是快速思考</em>和<em>Word Mover的距离</em>），但是我认为大多数技术确实属于这四大类之一。</p><blockquote><p><strong>注意：</strong>虽然很容易指出经典的单词袋技术遭受独特的顺序信息缺失的困扰，但这实际上是规则，而不是例外。通过本文回顾的大多数新方法获得的主要信息是将分布假设扩展到更大的文本单元。基于神经网络的序列模型是例外。</p></blockquote><h3 id="挑战和趋势"><a href="#挑战和趋势" class="headerlink" title="挑战和趋势"></a>挑战和趋势</h3><p>整体上研究文档嵌入技术的研究和应用时，会出现几种广泛的趋势，并且可能会发现一些挑战。</p><ol><li><strong>编码器-解码器优化：研究</strong>的重要部分集中在优化无监督的精确体系结构（例如ANN / CNN / RNN）和某些组件/超参数（例如n-gram，投影函数，权重等）上编码器-解码器方法，用于学习文档嵌入。尽管此微调的目标之一是提高各种任务的成功指标，但目标还是能够在较大的语料库上或更短的时间内训练模型。</li><li><strong>学习目标设计：</strong>无监督（或自我监督）表示学习的关键在于设计一个学习目标，该目标利用数据中自由可用的标签，从而生成对下游任务有用的表示。对我来说，这是最令人兴奋的趋势，并且我认为对NLP任务影响最大的趋势可能等同于一个词嵌入技术。目前，我仅将<em>快速思考</em>和<em>Word Mover的距离</em>视为编码器/解码器方法的替代方法。这种趋势的另一个吸引人的方面是，此处的创新也可能适用于词嵌入问题。</li><li><strong>基准测试：</strong>一般来说，机器学习研究是整个领域趋势的一部分，文档嵌入（可能由于它是一个年轻的子领域）很好地证明了研究在越来越广泛的领域对技术基准进行研究的重点（请参阅<a href="https://gluebenchmark.com/leaderboard" target="_blank" rel="noopener">GLUE排行榜</a>)。但是，几乎所有关于该主题的论文都宣称与当前SOTA技术具有可比或更好的结果，但这尚未导致明显的领先者出现。</li><li><strong>开放源代码：</strong>再次，这是更广泛趋势的一部分，大量使用易于使用的代码实现技术（通常还包括实验）来实现可重现性，并推动了与学术界之外的更广泛的数据科学界的互动，并推动了对真实单词问题的使用。</li><li><strong>跨任务的适用性：</strong>在有监督的嵌入式学习中，情况可能更多，尽管并非所有无监督的技术都具有相同的综合水平。无论如何，依靠文本数据中不同类型的信息，各种各样非常多样化的NLP任务使这一问题成为突出问题。从多个任务中共同学习嵌入是一种受监督的方法可以解决这一挑战的有趣方式。</li><li><strong>标记语料库：</strong>大型标记语料库的有限可用性也是今后有监督方法的问题。这可能代表了未来几年无监督方法在有监督的表示学习中的真正优势。</li></ol><p><strong>注意：</strong>如果您发现这部分内容与上下文不符，建议您在仔细阅读本文中介绍的大部分技巧后再进行访问。</p><p>本节简要介绍了两种适用于文档嵌入的成熟技术：<em>词袋</em>  和*潜在Dirichlet 分配。</p><h2 id="传统经典方法"><a href="#传统经典方法" class="headerlink" title="传统经典方法"></a>传统经典方法</h2><h3 id="Bag-of-words"><a href="#Bag-of-words" class="headerlink" title="Bag-of-words"></a>Bag-of-words</h3><p> <strong>Bag-of-words</strong><br>在[Harris，1954]中提出的这种方法将文本表示为单词的包（<a href="https://en.wikipedia.org/wiki/Multiset" target="_blank" rel="noopener">Multiset</a>) （丢失语法和排序信息）。这是通过确定一组<em>n个</em>单词组成的，这些单词将构成映射支持的词汇表，并为词汇表中的每个单词分配唯一索引。然后，每个文档都由长度为<em>n</em> 的向量表示，其中第<em>i</em> 个条目包含单词<em>i</em> 在文档中出现的次数。</p><p><img src="1.png" alt="png"></p><p>图1：例句中的单词袋表示</p><p>例如，句子“<strong>dog eat dog world, baby</strong>!” （在清理标点之后）可能由550个长度的向量<em>v表示</em>（假设选择了550个单词的词汇），除以下条目外，其他地方均为零：</p><p>•$ V_{76}= 1$，因为词汇的第76个词是<em>world</em> 。       </p><p>• $ V_{200}= 2$，因为词汇的第200个单词是<em>dog</em> 。       </p><p>• $ V_{322}= 1$，因为第332个单词是 <em>eat</em>。       </p><p>• 单词中没有选择“ <em>baby</em> ”一词，因此在不输入向量的情况下其值为1。       </p><p>尽管它非常简单，除了单词出现频率之外，所有信息都丢失了，并且表示大小迅速增长以支持丰富的词汇的趋势，这种技术几乎在几十年中几乎全部用于NLP任务，并获得了巨大成功。即使近年来在文本的矢量表示方面取得了显着进展，但仍在使用此方法的常见细微变化（如下所述），如今，这种变化并不总是唯一的，因为它只是很快被超越的第一个基线。</p><p><strong>Bag-of-n-grams</strong><br>为了获得某些单词袋方法丢失的某些单词顺序信息，可以使用短单词序列（长度为2、3等）的频率（附加或替代）构造单词向量。自然地，对于<em>n = 1</em> ，词袋是此方法的一个私有案例。</p><p>对于“<strong>dog eat dog world, baby</strong>!” 一词对是”<strong>dog eat</strong>“，”<strong>eat dog </strong>“，”<strong>dog world </strong>“和”<strong>world baby</strong>“，词汇表由输入语料库中的所有连续单词对组成。</p><p> <img src="2.png" alt="2"></p><p>图2：“电影很棒”这句话的2-gram表示法</p><p>这种方法的一个主要缺点是词汇量大小对唯一单词数量的非线性依赖性，这对于大型语料库可能非常大。过滤技术通常用于减小词汇量。</p><p><strong>TF-IDF weighting</strong><br>在词袋环境中值得一提的最后一项相关技术是<a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf" target="_blank" rel="noopener"><em>术语频率-逆文档频率</em></a>, 通常称为<strong>tf-idf</strong> 。此方法使用每个单词的<em>文档反向频率</em>（<strong>IDF</strong>）对上述单词（或<strong>n-gram</strong>）频率向量进行加权。单词的IDF就是语料库中文档数量除以该单词出现在其中的文档数量的对数。</p><script type="math/tex; mode=display">DIF_i = log( \frac{ \# of documents  in corpus}{\# of documents in which word i appears in})</script><p>简而言之，TF术语随着单词出现的增加而增长，而IDF术语则随着单词的稀有性而增加。这是为了针对某些单词通常更多（或更少）频繁出现这一事实来调整频率得分。参见[<a href="http://pmcnamee.net/744/papers/SaltonBuckley.pdf" target="_blank" rel="noopener">Salton &amp; Buckley, 1988</a>]，可以全面了解术语加权方法。</p><h3 id="Latent-Dirichlet-allocation-LDA"><a href="#Latent-Dirichlet-allocation-LDA" class="headerlink" title="Latent Dirichlet allocation (LDA)"></a>Latent Dirichlet allocation (LDA)</h3><p>LDA是一种生成统计模型，它允许由未观察组解释一组观察结果，这些观察组解释了为什么某些数据部分相似。例如，如果观察是收集到文档中的单词，则假定每个文档都是少量主题的混合，并且每个单词的出现都可归因于文档的一个主题。</p><p>要将其与单词袋联系起来，可以将前一种方法视为文档在单词上的分布的简单化概率模型。然后，词袋向量代表我们对每个文档中非规范化词分布的最佳近似值；但是这里的文档是概率的基本单位，每个都是其唯一分布的单个样本。</p><p>因此，问题的关键在于通过添加潜在的（隐藏的）<em>K</em> 主题中间层，从这种简单的概率性文档模型（按单词分布）转移到更复杂的模型。</p><p> <img src="3.png" alt="3"></p><p>图3：概率模型从单词袋转移到LDA</p><p>现在，主题的特征是单词的分布，而文档则是主题的分布。文档的这种概率模型对应于文档的生成模型。假设预定数量的<em>K个</em>主题，要生成一<em>组长</em>度为<em>{Nᵢ}</em> 的<em>M个</em>文档，其中<em>Dir（）</em>表示<a href="https://en.wikipedia.org/wiki/Dirichlet_distribution" target="_blank" rel="noopener">Dirichlet分布</a>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 对于每个主题 v ，采样一个单词分布φᵥ〜Dir  （β） 。</span><br><span class="line">2. 对于每个文档 i ，采样一个主题分布（或混合）θᵢ〜Dir  （ α  ） 。</span><br><span class="line">3. 为每个单词 j  生成长度为 Nᵢ的 文档 i ：</span><br><span class="line">   1. 为单词 j 进行服从于 Multinomial(θᵢ)分布的主题采样  .   </span><br><span class="line">   2. 对单词 j 服从于Multinomial(zᵢⱼ)分布 进行采样 。</span><br></pre></td></tr></table></figure></p><p>给定此模型和大量文档，问题就成为了推论之一，并且在推论过程中发现了上述各种分布的近似值。其中有θᵢ，每个文档<em>i</em> 的主题分布，维数<em>K的</em>向量。</p><p>因此，在推断模型的过程中，推断出维度为<em>K</em> 的向量空间，该向量空间以某种方式捕获了我们语料库中的主题或主题以及它们在文档中的共享方式。当然，可以将其视为这些文档的嵌入空间，并且-取决于<em>K</em> 的选择-其维数可以比基于词汇的维数小得多。</p><p>确实，虽然LDA的主要用例是无监督的主题/社区发现，但其他情况包括将所得的潜在主题空间用作文档语料库的嵌入空间。另外，请注意，其他主题建模技术（例如<a href="https://en.wikipedia.org/wiki/Non-negative_matrix_factorization" target="_blank" rel="noopener">非负矩阵分解（NMF）</a> 和<a href="https://en.wikipedia.org/wiki/Probabilistic_latent_semantic_analysis" target="_blank" rel="noopener">概率潜在语义索引（PLSI））</a> 也可以类似的方式用于学习文档嵌入空间。</p><blockquote><p><strong>注意：</strong>从业者对概率主题模型的主要问题是稳定性。由于训练主题模型需要对概率分布进行采样，因此随着随机数生成器种子的变化，同一语料库的模型可能会有所不同。主题模型对相对较小的语料库更改的敏感性使此问题更加复杂。</p></blockquote><h2 id="无监督的文本嵌入"><a href="#无监督的文本嵌入" class="headerlink" title="无监督的文本嵌入"></a>无监督的文本嵌入</h2><p>本节中介绍的许多方法均受著名的词嵌入技术的启发，其中主要的方法是<em>word2vec</em> ，它们有时甚至是这些方法的直接概括。这些词嵌入技术有时也称为<em>神经概率语言模型</em>; 这些不是完全相同的术语，因为概率语言模型是<em>单词序列上的概率分布</em>，但是由于此方法是在[ <a href="http://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf" target="_blank" rel="noopener">Bengio，2003</a>],中作为学习语言模型的一种方法而引入的，因此它们紧密相关。</p><p>即使假设您熟悉<em>word2vec</em> ，我仍然希望注意到此模型所做的重要假设，并且可能由这里审查的每个模型<em>（分布假设）推崇</em>。这是<a href="https://en.wikipedia.org/wiki/Distributional_semantics#Distributional_hypothesis" target="_blank" rel="noopener">维基百科</a>的简短描述：</p><blockquote><p>语言学中的<strong>分布假设</strong>源于语言使用的<a href="https://en.wikipedia.org/w/index.php?title=Semantic_theory&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">语义理论</a>，即在相同上下文中使用和出现的单词往往具有相似的含义。<a href="https://en.wikipedia.org/wiki/J._R._Firth" target="_blank" rel="noopener">Firth</a>推广了“单词由其所拥有的公司来表征”的基本思想。分布假设是<a href="https://en.wikipedia.org/wiki/Statistical_semantics" target="_blank" rel="noopener">统计语义</a>.的基础。</p></blockquote><p>确实，很容易看到<em>word2vec</em> 和其他用于学习单词表示的自我监督方法都严重依赖此假设。毕竟，模型的症结在于，在学习从单词本身来预测单词上下文时（反之亦然）学习到的单词表示形式代表了捕获深层语义和句法概念和现象的向量空间。意思是，从单词的上下文中学习可以教会我们有关单词的含义和句法作用的知识。</p><p>在本节中，将介绍自我监督的文档表示学习，您将看到所有这些方法都维护单词的这一假设，并以某种方式将其扩展到较大的文本单元。</p><h3 id="n-gram-embeddings"><a href="#n-gram-embeddings" class="headerlink" title="n-gram embeddings"></a>n-gram embeddings</h3><p>[ <a href="https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf" target="_blank" rel="noopener">Mikolov et al，2013b</a> ]扩展了<em>word2vec</em> 的skip-gram模型，通过使用数据驱动方法识别大量短短语（作者专注于两个单词和三个单词的短语）来处理短短语。在<em>word2vec</em> 模型训练期间，将这些短语作为单独的标记。自然地，这不适合学习更长的短语-因为随着短语长度的增加，词汇量会激增-并且<em>势必不会泛化到看不见的短语</em> 及其遵循的方法。</p><p>莫西·哈祖姆（Moshe Hazoom）<a href="https://towardsdatascience.com/word2vec-for-phrases-learning-embeddings-for-more-than-one-word-727b6cf723cf" target="_blank" rel="noopener">对这种方法进行了精彩的实践回顾，</a>他的将其用于专注于金融领域的搜索引擎。</p><h3 id="Averaging-word-embeddings"><a href="#Averaging-word-embeddings" class="headerlink" title="Averaging word embeddings"></a>Averaging word embeddings</h3><p>有一种非常直观的方法可以从有意义的单词嵌入中构造文档嵌入：给定文档，对与文档单词对应的所有矢量执行一些矢量算术，以将它们汇总到同一嵌入空间中的单个矢量中；两种常见的汇总运算符是平均值和和。</p><p>在此基础上，您可能已经可以想象到，扩展<em>word2vec</em> 及其亲属的编码器-解码器体系结构以学习<em>如何</em>将单词向量组合到文档嵌入中可能会很有趣。遵循这一方法的方法属于这一类。</p><p>第二种可能性是使用固定的（不可学习的）运算符进行矢量汇总（例如求平均），并使用旨在产生丰富文档嵌入的学习目标来学习上一层中的单词嵌入；一个常见的示例是使用句子来预测上下文句子。因此，这里的主要优点是优化了词嵌入，以平均化成文档表示形式。</p><p> <img src="4.png" alt="4"></p><p>图4：来自[ <a href="https://arxiv.org/pdf/1606.04640.pdf" target="_blank" rel="noopener">Kenter等，2016</a> ]的暹罗CBOW网络架构</p><p>[ <a href="https://arxiv.org/pdf/1606.04640.pdf" target="_blank" rel="noopener">Kenter等人，2016</a> ]做到了这一点，即使用平均单词向量的简单神经网络，通过给定句子表示形式预测周围的句子，从而学习单词嵌入。他们将结果与平均的<em>word2vec</em> 向量和<em>跳思想</em>向量进行了比较（请参见下面的相应小节）。[ <a href="https://www.aclweb.org/anthology/N16-1162" target="_blank" rel="noopener">Hill等，2016</a> ]比较了许多方法，包括训练CBOW和skip-gram词嵌入，同时优化句子表示（此处使用词向量的逐元素加法）。[ <a href="http://wwwusers.di.uniroma1.it/~navigli/pubs/KBS_Sinoaraetal_2019.pdf" target="_blank" rel="noopener">Sinoara等人，2019</a> ]还提出了将单词嵌入向量和其他知识源（例如单词感知向量）直接嵌入其质心以表示文档的方法。</p><p>最后，[ <a href="https://pdfs.semanticscholar.org/3fc9/7768dc0b36449ec377d6a4cad8827908d5b4.pdf" target="_blank" rel="noopener">Arora等人，2016年</a> ]进一步表明，当通过两个小变化进行增强时，此方法是一种简单但难以击败的基线：（1）使用平滑的逆频率加权方案，以及（2）消除常见的词向量的语篇成分；该组件是使用PCA找到的，它被用作最常用语的更正词，大概与语法有关。作者提供了一个<a href="https://github.com/peter3125/sentence2vec" target="_blank" rel="noopener">Python实现</a>。</p><blockquote><p><strong>注意：</strong>当查看基于注意力的机器翻译模型时，也许可以找到正确平均的单词“嵌入”功能的另一种证明。单向解码器RNN获得先前翻译的单词作为输入，不仅是要翻译的当前单词的“嵌入”（即，来自编码器RNN的双向激活），还包括周围单词的翻译。这些以加权的方式平均为上下文向量。据教导，这种加权平均能够从编码器网络的激活中维护复杂的成分和与顺序相关的信息（回想一下，这些不是像我们的情况那样不是孤立的嵌入;每个嵌入都包含前一个/后续单词的上下文）。</p></blockquote><h3 id="Sent2Vec"><a href="#Sent2Vec" class="headerlink" title="Sent2Vec"></a>Sent2Vec</h3><p>在[ <a href="https://aclweb.org/anthology/N18-1049" target="_blank" rel="noopener">Pagliardini et al，2017</a> ]和[ <a href="https://www.aclweb.org/anthology/N19-1098" target="_blank" rel="noopener">Gupta et al，2019</a> ]中提出（包括<a href="https://github.com/epfml/sent2vec" target="_blank" rel="noopener">基于C ++的官方Python实现</a>），该技术很大程度上是上述两种方法的组合：<em>word2vec</em> 的经典CBOW模型都得到了扩展包括单词n-gram <em>并</em>适用于优化单词（和n-grams）嵌入，以便对其求平均以产生文档向量。</p><p> <img src="5.png" alt="5"></p><p>图5：sent2vec可以看作是fastText的无监督版本</p><p>另外，删除了输入子采样的过程，而是将整个句子视为上下文。这意味着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（a）放弃使用频繁的单词二次采样（以防止生成n元语法特征）</span><br><span class="line">（b）放弃word2vec 使用的动态上下文窗口：考虑整个句子作为上下文窗口，而不是在1和当前句子的长度之间均匀采样每个子采样单词的上下文窗口大小。</span><br></pre></td></tr></table></figure><p>想到另一种方式<em>sent2vec</em> 是作为一种无监督的版本<em>fastText</em> ，其中整个句子是上下文和可能的类标签都是词汇。巧合的是，[ <a href="https://link.springer.com/article/10.1186/s12859-018-2496-4" target="_blank" rel="noopener">Agibetov等人，2018</a> ]感知使用比较多层的性能<em>sent2vec</em> 向量作为特征到的<em>fastText</em> ，针对生物医学句子分类的任务。</p><h3 id="Paragraph-vectors-doc2vec"><a href="#Paragraph-vectors-doc2vec" class="headerlink" title="Paragraph vectors (doc2vec)"></a>Paragraph vectors (doc2vec)</h3><p>有时称为<em>doc2vec</em> ，此方法在[ <a href="https://cs.stanford.edu/~quocle/paragraph_vector.pdf" target="_blank" rel="noopener">Le＆Mikolov，2014</a> ]中提出，可能是首次尝试推广<em>word2vec</em> 以使其与单词序列配合使用。作者介绍了<em>段落向量</em>模型的两个变体：<em>分布式内存</em>和<em>分布式词袋。</em></p><h3 id="Paragraph-Vectors-Distributed-Memory-PV-DM"><a href="#Paragraph-Vectors-Distributed-Memory-PV-DM" class="headerlink" title="Paragraph Vectors: Distributed Memory (PV-DM)"></a>Paragraph Vectors: Distributed Memory (PV-DM)</h3><p>PV-DM模型通过添加旨在捕捉段落主题或输入内容的内存向量来增强标准的编码器-解码器模型。这里的训练任务与<em>连续单词</em>的训练非常类似; 一个单词要根据其上下文进行预测。在这种情况下，上下文单词是前面的单词，而不是段落周围的单词。</p><p> <img src="6.png" alt="6"></p><p>图6：段落向量的分布式内存模型（PV-DM）</p><p>为了实现这一点，每个段落都映射到一个唯一的向量，该向量由词汇表中矩阵中的一列表示（用<em>D</em> 表示）。上下文是固定长度的，并从段落上的滑动窗口中采样。段落向量在同一段落生成的所有上下文之间共享，但不跨段落共享。自然，词嵌入是全局的，并且可以使用经过预训练的词嵌入（请参见下面的<em>实现和增强</em>）。</p><p>与<em>word2vec中一样</em>，向量必须以某种方式汇总为单个向量。但是与<em>word2vec</em> 不同，作者在实验中使用串联。请注意，这将保留订单信息。与<em>word2vec</em> 相似，在此汇总的矢量表示上使用了一个简单的softmax分类器（在这种情况下，实际上是分层的softmax）来预测任务输出。使用随机梯度下降法并通过反向传播获得梯度，以标准方式进行训练。</p><p>请注意，只有训练语料库中的段落才具有来自<em>D</em> 的列向量。在预测时，需要执行一个推理步骤来计算新段落的段落向量：文档向量是随机初始化的。然后，重复地从新文档中选择一个随机词，并使用梯度下降来调整输入到隐藏层的权重，以使所选词的softmax概率最大化，而隐藏到softmax的输出权重为固定。这导致将新文档表示为训练语料库文档向量（即<em>D的</em>列）的混合物，自然而然地位于文档嵌入空间中。</p><p><strong>段落向量：分布式词袋（PV-DBOW）</strong><br>的第二种变体，尽管其名称如此，也许与<em>word2vec</em> 的<em>skip-gram</em> 体系结构相似。分类任务是仅使用段落向量来预测单个上下文词。在随机梯度下降的每次迭代中，对文本窗口进行采样，然后从该窗口中采样单个随机词，从而形成以下分类任务。</p><p> <img src="7.png" alt="7"></p><p>图7：段落向量的分布式词袋模型（PV-DBOW）</p><p>除不与段落向量一起共同学习单词向量的事实外，训练在其他方面相似。这使得PV-DBOW变体的内存和运行时性能都更好。</p><blockquote><p><strong>注意：</strong>在<a href="https://radimrehurek.com/gensim/models/doc2vec.html" target="_blank" rel="noopener">其Gensim实现中</a>，PV-DBOW默认情况下使用随机初始化的词嵌入；如果dbow_words设置为1，则在运行dbow之前运行一次skip-gram步骤以更新单词嵌入。[ <a href="https://arxiv.org/pdf/1607.05368.pdf" target="_blank" rel="noopener">Lau＆Baldwin，2016</a> ]认为，尽管dbow在理论上可以与随机词嵌入一起使用，但这在他们检查的任务中会严重降低性能。</p></blockquote><p>直观的解释可以追溯到模型的目标函数，该函数的目的是使文档嵌入与其组成的单词嵌入之间的点积最大化：如果单词嵌入是随机分布的，则优化文档嵌入使其更接近于变得更加困难。其更关键的内容词。</p><p><strong>应用</strong><br>[Le＆Mikolov，2014]演示了<em>段落向量</em>在多个文本分类和情感分析任务上的使用，而[Dai等，2015]在文档相似性任务和[Lau＆Baldwin， [2016年]以论坛问题重复任务和<a href="http://ixa2.si.ehu.es/stswiki/index.php/Main_Page" target="_blank" rel="noopener"><em>语义文本相似性（STS）SemEval</em></a>共享任务为<a href="http://ixa2.si.ehu.es/stswiki/index.php/Main_Page" target="_blank" rel="noopener"><em>基准</em></a>。后面的两篇论文都对该方法进行了扩展评估（前者侧重于PV-DBOW变体），将其与其他几种方法进行了比较，并提供了实用建议（后者<a href="https://github.com/jhlau/doc2vec" target="_blank" rel="noopener">包括代码</a>）。</p><p>该方法具有<a href="https://radimrehurek.com/gensim/models/doc2vec.html" target="_blank" rel="noopener">gensim包的一部分的Python实现</a>和<a href="https://github.com/inejc/paragraph-vectors" target="_blank" rel="noopener">PyTorch实现</a>。再次，[ <a href="https://arxiv.org/pdf/1607.05368.pdf" target="_blank" rel="noopener">Lau＆Baldwin，2016年</a> ]还<a href="https://github.com/jhlau/doc2vec" target="_blank" rel="noopener">提供了用于检查的代码</a>。</p><p>最后，提出了对该方法的各种增强。例如，[ <a href="https://arxiv.org/abs/1512.08183" target="_blank" rel="noopener">Li等人，2016年</a> ]将该方法扩展为还包含n元语法特征，而[Thongtan＆Phienthrakul，2019年]建议在计算嵌入投影时也使用余弦相似度代替点积（也提供<a href="https://github.com/tanthongtan/dv-cosine" target="_blank" rel="noopener">Java实现</a>）。</p><h3 id="Doc2VecC"><a href="#Doc2VecC" class="headerlink" title="Doc2VecC"></a>Doc2VecC</h3><p>[ <a href="https://arxiv.org/pdf/1707.02377.pdf" target="_blank" rel="noopener">Chen，2017</a> ]提出了一种有趣的方法，该方法受段向量方法（PV-DM）的分布式存储模型以及平均词嵌入来表示文档的方法的启发。</p><p> <img src="8.png" alt="8"></p><p>图8：Doc2VecC模型的架构</p><p>类似于<em>段落向量</em>，<em>Doc2VecC</em> （通过损坏的文档向量的缩写）由输入层，投影层和输出层组成，以预测目标单词（在上例中为<strong>“ceremony”</strong>）。相邻单词的嵌入(e.g. <strong>“opening”, “for”, “the”</strong>)提供局部上下文，而整个文档的矢量表示（以灰色显示）用作全局上下文。与直接针对每个文档学习唯一矢量的<em>段落矢量</em>相反，<em>Doc2VecC</em> 将每个文档表示为从文档中随机采样的单词嵌入的平均值（例如，位置<em>p</em> 处的<strong>“performance”</strong>，位置<em>q</em> 处的<strong>“praised”</strong> 和<strong>“brazil”</strong>在位置<em>r</em> ）。</p><p>另外，作者选择通过随机删除大部分单词来破坏原始文档，从而仅对其余单词的嵌入进行平均，从而代表文档。这种破坏机制可以在训练期间加快速度，因为它大大减少了反向传播中要更新的参数数量。作者还展示了它是如何引入一种特殊形式的正则化的，他们认为这种形式可导致观察到的性能提高，以情感分析任务，文档分类任务和语义相关性任务为基准，而不是大量的最新技术。文档嵌入技术。</p><p>可以在<a href="https://github.com/mchen24/iclr2017" target="_blank" rel="noopener">公共Github存储库中</a>找到基于C语言的开源实现，用于重现本文中的实验。</p><p>[ <a href="https://www.aclweb.org/anthology/N16-1162" target="_blank" rel="noopener">Hill等人，2016</a> ]还对<em>Skip-thought</em>模型（请参见以下小节）应用了破坏或增加噪声的一般思想，以增加文档的嵌入学习过程以产生更强大的嵌入空间。创建其顺序降噪自动编码器（SDAE）模型。</p><h3 id="Skip-thought-vectors"><a href="#Skip-thought-vectors" class="headerlink" title="Skip-thought vectors"></a>Skip-thought vectors</h3><p>这是在[ <a href="https://arxiv.org/abs/1506.06726" target="_blank" rel="noopener">Kiros等，2015</a> ]中提出的，这是对<em>word2vec</em> 进行泛化的另一种早期尝试，并且已与<a href="https://github.com/ryankiros/skip-thoughts" target="_blank" rel="noopener">官方的纯Python实现一起发布</a>（并且最近还夸耀了<a href="https://github.com/sanyam5/skip-thoughts" target="_blank" rel="noopener">PyTorch</a>和<a href="https://github.com/tensorflow/models/tree/master/research/skip_thoughts" target="_blank" rel="noopener">TensorFlow的实现</a>）。</p><p>但是，这以另一种直观的方式扩展了<em>word2vec</em> （尤其是<em>skip-gram</em> 体系结构）：基本单元现在是句子，并且已编码的句子用于预测其周围的句子。使用在上述任务上训练的编码器-解码器模型学习矢量表示。作者使用具有GRU激活功能的RNN编码器和具有条件GRU的RNN解码器。训练了两个不同的解码器以用于上一个和下一个句子。</p><p> <img src="9.png" alt="9"></p><p>图9：跳过思路模型。给定一个连续句子元组，对句子$s<em>i$进行编码，并尝试重建上一个句子$s</em>{i- 1}$和下一个句子$s_{i + 1}$</p><p>的<strong>词汇扩展跳</strong>字<em>思维</em>编码器使用单词嵌入层，将输入句子中的每个单词转换为对应的单词嵌入，从而有效地将输入句子转换为单词嵌入序列。该嵌入层也与两个解码器共享。</p><p> <img src="10.png" alt="10"></p><p>图10：在Skip-thought vectors中，句子sᵢ由编码器编码；两个解码器以编码器输出hᵢ的隐藏表示为条件，以预测$s<em>{i - 1}$和$s</em>{i + 1}$[摘自<a href="https://sourcediving.com/building-recipe-skill-representations-using-skip-thought-vectors-8a6e4c38ae6c" target="_blank" rel="noopener">Ammar Zaher的帖子</a> ]</p><p>但是，作者仅使用了20,000个单词的小词汇量，因此在执行各种任务期间可能会遇到许多看不见的单词。为了克服这个问题，通过解决矩阵<em>W</em> 参数化的非正规<em>L2</em> 线性回归损失，可以从在更大的词汇量上训练的词嵌入空间（例如<em>word2vec</em> ）到<em>Skip-thought</em>模型的词嵌入空间中学习映射。此映射。</p><p><strong>应用程序</strong><br>作者演示了使用<em>Skip-thought的</em>向量进行语义相关性，释义检测，图像句子排名，问题类型分类以及四个情感和主观性数据集。[ <a href="http://arno.uvt.nl/show.cgi%3Ffid%3D146003" target="_blank" rel="noopener">Broere，2017</a> ]进一步研究了<em>跳思维</em>句子表示的句法属性，方法是对它们进行逻辑回归训练以预测POS标签和依赖关系。</p><p>[ <a href="https://arxiv.org/abs/1706.03146" target="_blank" rel="noopener">Tang等，2017a</a> ]提出了一种邻域方法，用于<em>Skip-thought</em>，丢弃排序信息并使用单个解码器预测前一句话和下一句话。[ <a href="https://www.groundai.com/project/trimming-and-improving-skip-thought-vectors/1" target="_blank" rel="noopener">Tang et al，2017b</a> ]扩展了这项检查，以提出对模型的三个增强，他们声称使用更快更轻的模型可以提供可比的性能：</p><p>（1）仅学习解码下一个句子</p><p>（2）添加<em>avg  编码器和解码器之间的</em>最大*连接层（作为一种允许进行非线性非参数特征工程的方法）</p><p>（3）执行良好的词嵌入初始化。最后，[ <a href="https://arxiv.org/pdf/1611.07897.pdf" target="_blank" rel="noopener">Gan等，2016</a> ]在广泛的应用中，使用基于分层CNN-LSTM的编码器而非仅基于RNN的编码器<a href="https://arxiv.org/pdf/1611.07897.pdf" target="_blank" rel="noopener">，</a>采用了相同的方法。</p><p>在[ <a href="https://openreview.net/pdf%3Fid%3DH1a37GWCZ" target="_blank" rel="noopener">Lee＆Park，2018</a> ]中提出的另一种变体是通过基于文档结构为每个目标句子选择整个文档中有影响力的句子来学习句子嵌入的，从而使用元数据或文本样式识别句子的依存关系。此外，[ <a href="https://www.aclweb.org/anthology/N16-1162" target="_blank" rel="noopener">Hill等人，2016年</a> ]提出了<em>顺序降噪自动编码器（SDAE）</em>模型，这是一种<em>跳</em>变<em>思想</em>的变体，其中输入数据根据某些噪声函数而被破坏，并且训练该模型以从破坏的数据中恢复原始数据。 。</p><p>有关进一步的非学术阅读<em>跳跃思维</em> 模式，<a href="http://sanyam5.github.io/my-thoughts-on-skip-thoughts/" target="_blank" rel="noopener">Sanyam Agarwa给出了他的博客的方法有很大的详细介绍</a></p><h3 id="FastSent"><a href="#FastSent" class="headerlink" title="FastSent"></a>FastSent</h3><p>[ <a href="https://www.aclweb.org/anthology/N16-1162" target="_blank" rel="noopener">Hill等人，2016年</a> ]提出了一种关于<em>跳跃思维</em>模型的明显简化的变体。<em>FastSent</em> 是一个简单的加法（对数双线性）语句模型，旨在利用相同的信号，但计算成本却低得多。给定某些上下文句子的BOW表示，该模型仅预测相邻句子（也表示为BOW）。更正式地说，<em>FastSent</em> 为模型词汇表中的每个单词<em>w</em> 学习源uᵂ和目标vᵂ嵌入。对于训练例如$S<em>{i- 1}$，$S</em>{i}$，连续句子$S<em>{i+1}$，$S</em>{i- 1}$被表示为它的源的嵌入的总和$s_i = \sum u^w $超过$w∈S_i$ 。$φ（s_i，v^w）$超过</p><p>$w∈ S<em>{i- 1}∪S</em>{i + 1}$，其中φ是SOFTMAX功能。本文附带了<a href="https://github.com/fh295/SentenceRepresentation" target="_blank" rel="noopener">一个官方的Python实现</a>。</p><h3 id="Quick-thought-vectors"><a href="#Quick-thought-vectors" class="headerlink" title="Quick-thought vectors"></a>Quick-thought vectors</h3><p>[ <a href="https://arxiv.org/pdf/1803.02893.pdf" target="_blank" rel="noopener">Logeswaran＆Lee，2018</a> ]将文件嵌入任务（即预测句子出现上下文的问题）重新设计为监督分类问题（参见图12b），而不是先前方法的预测任务（参见图12a）。</p><p> <img src="11.png" alt="11"></p><p>图11：快速思考问题的表述（b）与跳过思考方法（a）的对比</p><p>要点是使用当前句子的含义来预测相邻句子的含义，其中含义由从编码函数计算出的句子的嵌入表示；注意，这里学习了两个编码器：<em>f</em> 代表输入语句，<em>g</em> 代表候选项。给定一个输入语句，它由编码器（在这种情况下为RNN）进行编码，但是模型没有生成目标语句，而是从一组候选语句中选择了正确的目标语句。候选集是根据有效的上下文句子（基本事实）和许多其他非上下文句子构建的。最后，构造的训练目标最大程度地为训练数据中的每个句子标识了正确的上下文句子。将以前的句子预测公式看作是从所有可能的句子中选择一个句子，这种新方法可以看作是对预测问题的判别近似。</p><p>作者评估了他们在各种文本分类，释义识别和语义相关性任务上的方法，并提供<a href="https://github.com/lajanugen/S2V" target="_blank" rel="noopener">了官方的Python实现</a>。</p><h3 id="Word-Mover’s-Embedding-WME"><a href="#Word-Mover’s-Embedding-WME" class="headerlink" title="Word Mover’s Embedding (WME)"></a>Word Mover’s Embedding (WME)</h3><p>来自IBM研究的一种非常新的方法是在[ <a href="https://arxiv.org/pdf/1811.01713v1.pdf" target="_blank" rel="noopener">Wu et al，2018b</a> ]中提出的<em>Word Mover的嵌入</em>（WME）。<a href="https://github.com/IBM/WordMoversEmbeddings" target="_blank" rel="noopener">提供了一个基于C的官方官方Python封装实现</a>。</p><p>[ <a href="http://proceedings.mlr.press/v37/kusnerb15.pdf" target="_blank" rel="noopener">Kushner et al，2015</a> ]提出了世界<em>移动距离</em>（WMD）；这测量了两个文本文档之间的差异，这是一个文档的嵌入单词<strong>在嵌入空间中</strong>需要“移动” 才能到达另一文档的嵌入单词的最小距离（参见图13a）。另外，[ <a href="https://arxiv.org/pdf/1802.04956.pdf" target="_blank" rel="noopener">Wu等，2018a</a> ]提出了D2KE（到核和嵌入的距离），这是一种从给定距离函数推导正定核的通用方法。</p><p> <img src="12.png" alt="12"></p><p>图12：WMD与WME的对比。（a）WMD测量两个文档<em>x</em> 和y 之间的距离，而（b）WME近似于从WMD导出的带有一组随机文档kernel的核。</p><p>WME基于三个组件来学习长度可变的文本的连续矢量表示形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 以无人监督的方式学习高质量词嵌入的能力（例如，使用*word2vec* ）。</span><br><span class="line">2. 使用WMD基于所述嵌入为文档构造距离度量的能力。</span><br><span class="line">3. 使用D2KE从给定的距离函数导出正定核的能力。</span><br></pre></td></tr></table></figure><p>使用这三个组件，将应用以下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 使用D2KE，通过给定分布中*单词移动器的距离*（WMD）到随机文档given的无限维特征图，构造正定*单词移动器的内核（WMK）。由于使用了WMD，因此特征图考虑了预训练单词嵌入所给出的语义空间中文档之间各个单词的对齐方式（请参见图12b）。</span><br><span class="line">2. 基于该内核，通过该内核的随机特征近似推导嵌入的文档，其内积近似于精确的内核计算。</span><br></pre></td></tr></table></figure><p>该框架是可扩展的，因为它的两个构件<em>word2vec</em> 和WMD可以用其他技术代替，例如<em>GloVe</em> （用于词嵌入）或S-WMD（用于将词嵌入空间转换为文档距离度量）。</p><p>作者在9个真实世界中的文本分类任务和22个文本相似性任务上对WME进行了评估，并证明了WME与其他最新技术始终如一地匹配，甚至优于其他最新技术。</p><h3 id="Sentence-BERT-SBERT"><a href="#Sentence-BERT-SBERT" class="headerlink" title="Sentence-BERT (SBERT)"></a>Sentence-BERT (SBERT)</h3><p>NLP的2018年以Transformer的兴起为标志，最新的神经语言模型受到[ <a href="https://arxiv.org/pdf/1706.03762.pdf" target="_blank" rel="noopener">Vaswani et al 2017</a> ]中提出的Transformer模型的启发-序列模型同时消除了卷积和重复发生，而是将注意力转移到序列表示中。这个蓬勃发展的系列包括BERT（及其扩展名），GPT（1和2）以及XL风味的Transformer。</p><p>这些模型生成输入令牌（通常为子单词单元）的上下文嵌入，每个令牌都注入了其邻域的信息，但并非旨在为输入序列生成丰富的嵌入空间。BERT甚至有一个特殊的[CLS]令牌，其输出嵌入用于分类任务，但对于其他任务而言，输入序列的嵌入仍然很差。[ <a href="https://arxiv.org/pdf/1908.10084.pdf" target="_blank" rel="noopener">Reimers＆Gurevych，2019年</a> ]</p><p><em>Sentence-BERT</em> ，在[ <a href="https://arxiv.org/pdf/1908.10084.pdf" target="_blank" rel="noopener">Reimers＆Gurevych，2019</a> ]中提出，并附带<a href="https://github.com/UKPLab/sentence-transformers" target="_blank" rel="noopener">一个Python实现</a>，旨在通过使用暹罗和三元组网络结构来派生可以使用余弦相似度进行比较的语义有意义的句子嵌入，以适应BERT体系结构（请参见Fifure 14）。</p><p><img src="13.png" alt="13"></p><p>图14：针对分类目标（左）和推理（右）的训练中的SBERT架构</p><h2 id="有监督的向量嵌入"><a href="#有监督的向量嵌入" class="headerlink" title="有监督的向量嵌入"></a>有监督的向量嵌入</h2><p><code>上一节中介绍的无监督方法使我们可以从大型未标记的语料库中学习有用的表示形式。这种方法并非自然语言处理所独有，而是通过设计学习目标来学习学习表示形式，这些学习目标利用了数据中可自由使用的标签。因此，这些方法的强度和鲁棒性不仅在很大程度上取决于学习框架，而且还取决于人工设计的学习目标要求或带来对有意义的特征或知识的学习的良好程度，这些特征或知识在各种下游任务中将是有用的。例如，我们希望通过单词和文档嵌入空间可以很好地捕获语义和句法信息。</code></p><p><code>学习数据有意义的表示法（在我们的情况下是单词序列）的对比方法是利用显式标签（几乎总是由人类注释者以某种方式生成）。在这里，与各种任务的相关性取决于显式任务和用于最终应用程序的标签的接近程度，并且再次取决于此任务带来了对通用特性和知识的学习程度。</code></p><p><code>我们将看到有监督的方法，从直接利用特定标记任务来学习表示形式的方法，到重组任务或从中提取新标记任务以引发更好表示的方法。</code></p><p><strong>通过标签数据学习文本嵌入</strong></p><p>已经进行了各种尝试来使用标记的或结构化的数据来学习句子表示。具体来说，[ <a href="https://www.aclweb.org/anthology/D14-1179" target="_blank" rel="noopener">Cho等，2014a</a> ]和[ <a href="https://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf" target="_blank" rel="noopener">Sutskever等，2014</a> ]可能是首次尝试使用编码器/解码器方法来显式学习带有标记数据的句子/短语嵌入；第一个使用<em>Europarl</em> （统计机器翻译的平行短语语料库），第二个使用WMT-14数据集中的英语到法语的翻译任务。[ <a href="https://arxiv.org/pdf/1511.08198.pdf" target="_blank" rel="noopener">Wieting et al，2015</a> ]和[Wieting＆Gimpel，2017] 提出了另一种此类显着尝试，其中共同学习了单词嵌入及其在文档嵌入中的映射，以最大程度地减少了复述对之间的余弦相似度（来自<a href="http://paraphrase.org/%23/#/" target="_blank" rel="noopener">PPDB数据集</a>） 。[ <a href="https://arxiv.org/pdf/1504.00548.pdf" target="_blank" rel="noopener">Hill等，2015</a> ]训练了神经语言模型，以将字典定义映射到由这些定义定义的单词的预训练单词嵌入。最后，[ <a href="https://www.aclweb.org/anthology/D17-1070.pdf" target="_blank" rel="noopener">Conneau等，2017</a> ]在斯坦福大学自然语言推理任务上训练了各种体系结构的NN编码器（请参见图16）。</p><p> <img src="14.png" alt="14"></p><p>图15：通用的NLI训练方案</p><h3 id="文档相似性的上下文嵌入"><a href="#文档相似性的上下文嵌入" class="headerlink" title="文档相似性的上下文嵌入"></a>文档相似性的上下文嵌入</h3><p>上述方法的一种特定情况是由文档相似性驱动的。[ <a href="https://www.aclweb.org/anthology/P16-1036" target="_blank" rel="noopener">Das等，2016</a> ]展示了文档嵌入，这些嵌入是通过针对社区Q / A的暹罗网络使两个文档之间的相似度最大化的。（见图17）</p><p> <img src="15.png" alt="png"></p><p>图16：SCQA网络由重复的卷积，最大池和ReLU层以及一个完全连接的层组成。权重W1到W5在子网之间共享。</p><p>同样，[ <a href="https://www.aclweb.org/anthology/K17-1027" target="_blank" rel="noopener">Nicosia＆Moschitti，2017</a> ]使用暹罗网络在学习二进制文本相似性的同时产生单词表示，同时考虑相同类别中的示例相似。（参见图18）</p><p> <img src="16.png" alt="16"></p><p>图17：[ <a href="https://www.aclweb.org/anthology/K17-1027" target="_blank" rel="noopener">Nicosia＆Moschitti，2017</a> ] 中的暹罗网络架构。每个句子的单词嵌入由3个双向GRU的堆栈使用。两个网络分支共享参数权重。</p><p>跨语言降<strong>秩岭回归（Cr5）</strong>[Josifoski et al，2019]引入了一种方法，用于将以任何语言编写的文档嵌入到一个独立于语言的向量空间中。这是通过训练基于岭回归的分类器来完成的，该分类器使用特定于语言的词袋功能来预测给定文档所涉及的概念。当将学习的权重矩阵约束为低等级时，作者表明可以将其作为因素来获得从特定于语言的词袋到独立于语言的嵌入的期望映射。<a href="https://github.com/epfl-dlab/Cr5" target="_blank" rel="noopener">提供了一个官方的Python实现</a>。</p><h3 id="特定于任务的监督文档嵌入"><a href="#特定于任务的监督文档嵌入" class="headerlink" title="特定于任务的监督文档嵌入"></a>特定于任务的监督文档嵌入</h3><p>一种用于生成文档嵌入的常见监督方法是使用各种神经网络体系结构，学习将单词向量映射到文档向量的合成运算符；它们被传递给受监督的任务，并依赖于类标签，以便在合成权重之间反向传播（请参见图19）。</p><p>因此，网络的几乎所有隐藏层都可以被视为产生输入文档的向量嵌入，其中直到该层的网络前缀都是从单词向量到嵌入空间的学习映射。在[ <a href="https://arxiv.org/pdf/1511.08198.pdf" target="_blank" rel="noopener">Wieting等人，2015</a> ]中可以找到对基于单词向量和监督学习任务的学习句子向量的不同方法的严格检查。</p><p> <img src="17.png" alt="17"></p><p>图18：神经网络隐式学习将单词嵌入序列映射到文档嵌入</p><p>请注意，虽然所使用的单词嵌入可以预先生成并且与任务无关（至少在一定程度上），但从它们中学到的文档嵌入映射是特定于任务的。尽管这些方法对相关任务很有用，但至少在理论上，与无监督方法相比，此方法势必不那么健壮和通用。[ <a href="https://arxiv.org/pdf/1506.06726.pdf" target="_blank" rel="noopener">Kiros等，2015</a> ]</p><p>值得注意的用途包括使用RNN进行情感分类[Socher等，2013]，使用CNN进行各种文本分类[Kalchbrenner等，2014] [Kim，2014]以及使用递归卷积神经网络进行机器翻译和文本分类[Cho等]等，2014a，2014b] [Zhao等，2015]。</p><ul><li><p><strong>GPT</strong><br>[ <a href="https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf" target="_blank" rel="noopener">Radford等人，2018</a> ] <a href="https://openai.com/blog/language-unsupervised/" target="_blank" rel="noopener">提出了一种</a><a href="https://openai.com/blog/language-unsupervised/" target="_blank" rel="noopener"><em>生成式预训练</em></a><a href="https://openai.com/blog/language-unsupervised/" target="_blank" rel="noopener">（GPT）方法</a>（<a href="https://github.com/openai/finetune-transformer-lm" target="_blank" rel="noopener">伴随Python实现</a>），使用[ <a href="https://arxiv.org/pdf/1706.03762.pdf" target="_blank" rel="noopener">Vaswani等人2017</a> ]中介绍的转换模型，将无监督和有监督的表示学习结合起来，学习无监督语言对未标记的语料库进行建模，然后使用监督数据分别微调其在每个任务中的使用。<a href="https://openai.com/blog/better-language-models/" target="_blank" rel="noopener">他们随后</a>在[ <a href="https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf" target="_blank" rel="noopener">Radford et al，2019</a> ]中<a href="https://openai.com/blog/better-language-models/" target="_blank" rel="noopener">介绍了GPT-2</a>，重点是加强他们工作中的无监督学习部分，并再次<a href="https://github.com/openai/gpt-2" target="_blank" rel="noopener">发布了正式的Python实现</a>。</p></li><li><p><strong>深度语义相似性模型（DSSM）</strong><br><a href="https://www.microsoft.com/en-us/research/project/dssm/" target="_blank" rel="noopener">作为Microsoft研究项目</a>，DSSM是一种深度神经网络建模技术，用于表示连续语义空间中的文本字符串并为两个文本字符串之间的语义相似性建模（请参见图20）。</p><p><img src="19.png" alt="19"></p></li></ul><p>图19：DSSM神经网络的架构</p><p>除其他应用程序外，DSSM还用于开发潜在语义模型，该模型将不同类型的实体（例如查询和文档）投影到公共的低维语义空间中，以用于各种机器学习任务，例如排名和分类。例如，[ <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/cikm2013_DSSM_fullversion.pdf" target="_blank" rel="noopener">Huang et al，2013</a> ]使用它将查询和文档投影到一个公共的低维空间，在该空间中，给定查询的文档的相关性被计算为它们之间的距离。</p><p>实现包括<a href="https://kishorepv.github.io/DSSM/" target="_blank" rel="noopener">TensorFlow</a>，<a href="https://github.com/airalcorn2/Deep-Semantic-Similarity-Model" target="_blank" rel="noopener">Keras</a>和<a href="https://github.com/nishnik/Deep-Semantic-Similarity-Model-PyTorch" target="_blank" rel="noopener">2个PyTorch </a><a href="https://github.com/moinnadeem/CDSSM" target="_blank" rel="noopener">变化</a>。</p><h3 id="联合学习句子表示"><a href="#联合学习句子表示" class="headerlink" title="联合学习句子表示"></a>联合学习句子表示</h3><p>[ <a href="https://arxiv.org/pdf/1810.00681v1.pdf" target="_blank" rel="noopener">Ahmad et al，2018</a> ]建议从多个文本分类任务中共同学习句子表示，并将它们与预训练的单词级和句子级编码器结合使用，可以得到健壮的句子表示，可用于迁移学习</p><p> <img src="18.png" alt="18"></p><p>图20：使用辅助任务共同学习句子嵌入</p><p>[ <a href="https://www.semanticscholar.org/paper/Learning-Sentence-Embeddings-with-Auxiliary-Tasks-Yu-Jiang/2d38f7aab07d4435b2110602db4138ef20da4cc0" target="_blank" rel="noopener">Yu＆Jiang，2016</a> ]类似地表明，使用两个辅助任务来帮助诱导句子嵌入在情感分类中跨域的工作很有效，与情感分类器本身一起共同学习该句子的嵌入（图21）。</p><p>在[ <a href="https://arxiv.org/pdf/1803.11175.pdf" target="_blank" rel="noopener">Cer等人，2018a</a> ]和[ <a href="https://www.aclweb.org/anthology/D18-2029/" target="_blank" rel="noopener">Cer等人，2018b</a> ]中提出的</p><p><strong>通用句子编码器</strong>，并伴随<a href="https://tfhub.dev/google/universal-sentence-encoder/2" target="_blank" rel="noopener">着TensorFlow实现</a>，该方法实际上包括两种可能的句子表示学习模型：<em>Transformer</em> 模型和<em>Deep Averaging Network（DAN） ）</em>模型（请参见图22）。两者都旨在允许多任务学习，并且支持的任务包括（1）作为无监督学习的<em>基调思维</em>任务；（2）对话输入响应任务，用于包含已解析的对话数据；（3）用于监督数据训练的分类任务（请参阅前面的小节）。作者专注于具有转移学习任务的实验，并对照简单的CNN和DAN基准对他们的模型进行了基准测试。该方法后来<a href="https://ai.googleblog.com/2019/07/multilingual-universal-sentence-encoder.html" target="_blank" rel="noopener">扩展为解决多语言设置</a>。</p><p>的<em>变压器</em>模型直接基于在[提出的变压器模型<a href="https://arxiv.org/pdf/1706.03762.pdf" target="_blank" rel="noopener">瓦斯瓦尼等人2017</a> ]，所述第一序列转导模型完全基于注意，取代在编码器-解码器的体系结构最常用的多双头自关注的复发性层（参见图22a）。</p><p>该模型使用转换器体系结构的编码子图构造句子嵌入。编码器使用注意力来计算句子中单词的上下文感知表示，同时考虑其他单词的顺序和身份。将上下文感知的单词表示形式平均在一起，以获得句子级的嵌入。</p><p>  <img src="20.png" alt="png"></p><p>图22：通用句子编码器的两种模型：（a）变压器和（b）DAN</p><p>相反，在[ <a href="https://people.cs.umass.edu/~miyyer/pubs/2015_acl_dan.pdf" target="_blank" rel="noopener">Iyyer et al，2015</a> ]中提出的DAN模型中，单词和<a href="https://people.cs.umass.edu/~miyyer/pubs/2015_acl_dan.pdf" target="_blank" rel="noopener">二元语法的</a>输入嵌入首先被平均在一起，然后通过前馈深度神经网络（DNN）生成句子嵌入（见图22b）。 。</p><p><strong>GenSen</strong><br>与通用句子编码器非常相似，[ <a href="https://arxiv.org/pdf/1804.00079.pdf" target="_blank" rel="noopener">Subramanian et al，2018</a> ]中介绍的GenSen方法与<a href="https://github.com/Maluuba/gensen" target="_blank" rel="noopener">官方Python实现一起</a>，结合了多个有监督和无监督的学习任务，以训练基于RNN w / GRU的编码器-解码器模型，嵌入被提取。支持的四个任务是：（1）<em>跳跳</em>向量，（2）神经机器翻译，（3）选区解析和（4）自然语言推论（三向分类问题；给定前提和假设句子，目的是将他们的关系归类为牵连，矛盾或中立。<a href="https://github.com/Maluuba/gensen" target="_blank" rel="noopener">正式的Python实现已发布</a>。</p><h2 id="如何选择各种嵌入方法"><a href="#如何选择各种嵌入方法" class="headerlink" title="如何选择各种嵌入方法"></a>如何选择各种嵌入方法</h2><p>我在这里没有简单的答案，但是这里有一些可能的要点：</p><ol><li><strong>平均单词向量是一个很强的基准</strong>，因此一个好主意是通过着重于生成非常好的单词向量并首先简单地对其求<strong>平均</strong>来开始寻求好的文档嵌入。毫无疑问，文档嵌入的强大功能大部分来自构建它们的词向量，我可以肯定地说，在前进之前，有大量信息要优化。您可以尝试不同的预训练词嵌入，探索哪些源域和哪些方法（例如word2vec，GloVe，BERT，ELMo）可以更好地捕获所需的信息类型。然后，通过尝试使用不同的汇总运算符或其他技巧（如[ <a href="https://pdfs.semanticscholar.org/3fc9/7768dc0b36449ec377d6a4cad8827908d5b4.pdf" target="_blank" rel="noopener">Arora等，2016</a> ]中的那些技巧）稍微扩展一下可能已足够。</li><li><strong>性能可能是一个关键考虑因素</strong>，尤其是在方法之间没有明确领导者的情况下。在这种情况下，<a href="https://translate.googleusercontent.com/translate_f#ecd3" target="_blank" rel="noopener">平均单词向量</a>和一些精益方法（如<a href="https://translate.googleusercontent.com/translate_f#e3d4" target="_blank" rel="noopener"><em>send2vec</em></a>和<a href="https://translate.googleusercontent.com/translate_f#e6e8" target="_blank" rel="noopener"><em>FastSent</em></a>）都是不错的选择。相反，在使用<em>doc2vec</em> 时，给定每个句子所需的实时向量表示推断，可能会因应用程序限制而证明代价高昂。<a href="https://github.com/facebookresearch/SentEval" target="_blank" rel="noopener">SentEval</a>是[ <a href="https://arxiv.org/pdf/1803.05449.pdf" target="_blank" rel="noopener">Conneau＆Kiela，2018</a> ]中提出的<a href="https://github.com/facebookresearch/SentEval" target="_blank" rel="noopener">用于句子表示的评估工具包，</a>在这种情况下值得一提。</li><li><strong>考虑学习目标对您任务的有效性</strong>。上面介绍的不同的自我监督技术以不同的方式扩展<em>了分布假设</em>，而<em>Skip-thought</em>和<em>快速思想则</em>基于句子/段落在文档中的距离对它们之间的紧密关系进行建模。这可能对书籍，文章和社交媒体帖子而言微不足道，但可能不适用于其他文本序列，尤其是结构化文本序列，因此可能会将您的文档投影到不适用于它们的嵌入空间中。同样，WME依赖的单词对齐方法可能并不适用于所有情况。</li><li><strong>开源实现非常丰富</strong>，因此针对您的任务对不同方法进行基准测试可能是可行的。</li><li><strong>没有明确的特定任务负责人。</strong>论文经常针对分类，释义和语义相关性任务对不同的方法进行基准测试。然而，上述结论是在考虑有关该主题的全部文献时，特别是在考虑了2018年的两个最新基准的结果时得出的，[ <a href="https://arxiv.org/pdf/1803.02893.pdf" target="_blank" rel="noopener">Logeswaran＆Lee，2018</a> ]首先提出了他们的<em>快速思考方法。</em>第二种方法是[ <a href="https://arxiv.org/pdf/1811.01713v1.pdf" target="_blank" rel="noopener">Wu et al，2018b</a> ]，这是他们关于<em>Word Mover嵌入</em>的论文的一部分。</li></ol><p>最后，我发现它值得一提的是<em>关键词中包含的代码</em>有<a href="https://paperswithcode.com/task/document-embedding" target="_blank" rel="noopener">一个专门的文件嵌入任务</a>，而且Facebook的研究具有开源<a href="https://github.com/facebookresearch/SentEval" target="_blank" rel="noopener">SentEval，评估工具包句子表示</a>在[呈现<a href="https://arxiv.org/pdf/1803.05449.pdf" target="_blank" rel="noopener">Conneau＆Kiela，2018</a> ]。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[原文连接]&lt;a href=&quot;https://towardsdatascience.com/document-embedding-techniques-fed3e7a6a25d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://towardsd
      
    
    </summary>
    
    
      <category term="nlp" scheme="http://yoursite.com/categories/nlp/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://yoursite.com/2020/08/01/docker/"/>
    <id>http://yoursite.com/2020/08/01/docker/</id>
    <published>2020-08-01T01:57:15.000Z</published>
    <updated>2020-08-06T06:42:17.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Docker-介绍"><a href="#一、Docker-介绍" class="headerlink" title="一、Docker 介绍"></a>一、Docker 介绍</h2><h3 id="1-安装需要的包"><a href="#1-安装需要的包" class="headerlink" title="1. 安装需要的包"></a>1. 安装需要的包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>想安装Docker，需要先将依赖的环境全部下载下来</span><br><span class="line">sudo apt install apt-transport-https ca-certificates software-properties-common curl</span><br></pre></td></tr></table></figure><h3 id="2-指定-Docker-镜像源"><a href="#2-指定-Docker-镜像源" class="headerlink" title="2. 指定 Docker 镜像源"></a>2. 指定 Docker 镜像源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>.更换国内软件源，推荐中国科技大学的源，稳定速度快（可选）</span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="3-添加-GPG-密钥"><a href="#3-添加-GPG-密钥" class="headerlink" title="3.添加 GPG 密钥"></a>3.添加 GPG 密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>添加 Docker-ce 软件源，这里还是以中国科技大学的 Docker-ce 源为例</span><br><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="line"><span class="meta">$</span>(lsb_release -cs) stable"</span><br></pre></td></tr></table></figure><h3 id="3-安装-Docker"><a href="#3-安装-Docker" class="headerlink" title="3. 安装 Docker"></a>3. 安装 Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><h3 id="4-启动-Docker-并测试"><a href="#4-启动-Docker-并测试" class="headerlink" title="4. 启动 Docker 并测试"></a>4. 启动 Docker 并测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装成功后，需要手动启动，设置为开机启动，并测试一下 Docker</span><br><span class="line"><span class="meta">#</span>启动docker服务</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta">#</span>设置开机自动启动</span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta">#</span>测试</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="二、Docker-的中央仓库"><a href="#二、Docker-的中央仓库" class="headerlink" title="二、Docker 的中央仓库"></a>二、Docker 的中央仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢。</span><br><span class="line">https://hub.docker.com/</span><br><span class="line">2.国内的镜像网站：网易蜂巢，daoCloud等，下载速度快，但是镜像相对不全。</span><br><span class="line">https://c.163yun.com/hub#/home </span><br><span class="line">http://hub.daocloud.io/ （推荐使用）</span><br><span class="line">3.在公司内部会采用私服的方式拉取镜像（添加配置）</span><br><span class="line"><span class="meta">#</span>需要创建 /etc/docker/daemon.json，并添加如下内容</span><br><span class="line">&#123;</span><br><span class="line">"registry-mirrors":["https://registry.docker-cn.com"],</span><br><span class="line">"insecure-registries":["ip:port"]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span>重启两个服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="三、镜像的操作"><a href="#三、镜像的操作" class="headerlink" title="三、镜像的操作"></a>三、镜像的操作</h2><h3 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1. 拉取镜像"></a>1. 拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从中央仓库拉取镜像到本地</span><br><span class="line">docker pull 镜像名称[:tag]</span><br><span class="line"><span class="meta">#</span>举个栗子:docker pull daocloud.io/library/tomcat:8.5.15-jre8</span><br></pre></td></tr></table></figure><h3 id="2-查看本地全部镜像"><a href="#2-查看本地全部镜像" class="headerlink" title="2. 查看本地全部镜像"></a>2. 查看本地全部镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="3-删除本地镜像"><a href="#3-删除本地镜像" class="headerlink" title="3. 删除本地镜像"></a>3. 删除本地镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>镜像会占用磁盘空间，可以直接手动删除，标识通过查看获取</span><br><span class="line">docker rmi 镜像的标识</span><br></pre></td></tr></table></figure><h3 id="4-镜像的导入导出"><a href="#4-镜像的导入导出" class="headerlink" title="4. 镜像的导入导出"></a>4. 镜像的导入导出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>如果因为网络原因可以通过硬盘的方式传输镜像，虽然不规范，但是有效，但是这种方式导出的镜像名称和版本都是null，需要手动修改</span><br><span class="line"><span class="meta">#</span>将本地的镜像导出</span><br><span class="line">docker save -o 导出的路径 镜像id</span><br><span class="line"><span class="meta">#</span>加载本地的镜像文件</span><br><span class="line">docker load -i 镜像文件</span><br><span class="line"><span class="meta">#</span>修改镜像文件</span><br><span class="line">docker tag 镜像id 新镜像名称：版本</span><br></pre></td></tr></table></figure><h2 id="四、容器的操作"><a href="#四、容器的操作" class="headerlink" title="四、容器的操作"></a>四、容器的操作</h2><h3 id="1-运行容器"><a href="#1-运行容器" class="headerlink" title="1. 运行容器"></a>1. 运行容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">运行容器需要定制具体镜像，如果镜像不存在，会直接下载</span><br><span class="line"><span class="meta">#</span>简单操作</span><br><span class="line">docker run 镜像的标识|镜像的名称[:tag]</span><br><span class="line"><span class="meta">#</span>常用的参数</span><br><span class="line">docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]</span><br><span class="line"><span class="meta">#</span>-d:代表后台运行容器</span><br><span class="line"><span class="meta">#</span>-p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口</span><br><span class="line"><span class="meta">#</span>--name 容器名称:指定容器的名称</span><br></pre></td></tr></table></figure><h3 id="2-查看正在运行的容器"><a href="#2-查看正在运行的容器" class="headerlink" title="2. 查看正在运行的容器"></a>2. 查看正在运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看全部正在运行的容器信息</span><br><span class="line">docker ps [-qa]</span><br><span class="line"><span class="meta">#</span>-a 查看全部的容器，包括没有运行</span><br><span class="line"><span class="meta">#</span>-q 只查看容器的标识</span><br></pre></td></tr></table></figure><h3 id="3-查看容器日志"><a href="#3-查看容器日志" class="headerlink" title="3. 查看容器日志"></a>3. 查看容器日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看容器日志，以查看容器运行的信息</span><br><span class="line">docker logs -f 容器id</span><br><span class="line"><span class="meta">#</span>-f：可以滚动查看日志的最后几行</span><br></pre></td></tr></table></figure><h3 id="4-进入容器的内部"><a href="#4-进入容器的内部" class="headerlink" title="4. 进入容器的内部"></a>4. 进入容器的内部</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以进入容器的内部进行操作</span><br><span class="line">docker exec -it 容器id bash</span><br></pre></td></tr></table></figure><h3 id="5-复制内容到容器"><a href="#5-复制内容到容器" class="headerlink" title="5. 复制内容到容器"></a>5. 复制内容到容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将宿主机的文件复制到容器内部的指定目录</span><br><span class="line">docker cp 文件名称 容器id:容器内部路径</span><br></pre></td></tr></table></figure><h3 id="6-重启-amp-启动-amp-停止-amp-删除容器"><a href="#6-重启-amp-启动-amp-停止-amp-删除容器" class="headerlink" title="6. 重启 &amp; 启动 &amp; 停止 &amp; 删除容器"></a>6. 重启 &amp; 启动 &amp; 停止 &amp; 删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">容器的启动，停止，删除等操作，后续会经常使用到</span><br><span class="line"><span class="meta">#</span>重新启动容器</span><br><span class="line">docker restart 容器id</span><br><span class="line"><span class="meta">#</span>启动停止运行的容器</span><br><span class="line">docker start 容器id</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span>停止指定的容器(删除容器前，需要先停止容器)</span><br><span class="line">docker stop 容器id</span><br><span class="line"><span class="meta">#</span>停止全部容器</span><br><span class="line">docker stop $(docker ps -qa)</span><br><span class="line"><span class="meta">#</span>删除指定容器</span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="meta">#</span>删除全部容器</span><br><span class="line">docker rm $(docker ps -qa)</span><br></pre></td></tr></table></figure><h2 id="五、Docker-应用"><a href="#五、Docker-应用" class="headerlink" title="五、Docker 应用"></a>五、Docker 应用</h2><h3 id="1-docker-安装-tomcat"><a href="#1-docker-安装-tomcat" class="headerlink" title="1.docker 安装 tomcat"></a>1.docker 安装 tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行Tomcat容器，为部署ssm工程做准备</span><br><span class="line"> </span><br><span class="line">docker run -d -p 8080:8080 --name tomcat  daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line"><span class="meta">#</span>或者已经下载了tomcat镜像</span><br><span class="line">docker run -d -p 8080:8080 --name tomcat 镜像的标识</span><br></pre></td></tr></table></figure><h3 id="2-运行-MySQL-容器"><a href="#2-运行-MySQL-容器" class="headerlink" title="2. 运行 MySQL 容器"></a>2. 运行 MySQL 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4</span><br></pre></td></tr></table></figure><h3 id="3-部署-ssm-工程"><a href="#3-部署-ssm-工程" class="headerlink" title="3. 部署 ssm 工程"></a>3. 部署 ssm 工程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改SSM工程环境，设置为Linux中Docker容器的信息</span><br><span class="line">通过Maven的package重新打成war包</span><br><span class="line">将Windows下的war包复制到Linux中</span><br><span class="line">通过docker命令将宿主机的war包复制到容器内部</span><br><span class="line">docker cp 文件名称 容器id:容器内部路径</span><br><span class="line">测试访问SSM工程</span><br></pre></td></tr></table></figure><h3 id="六、数据卷"><a href="#六、数据卷" class="headerlink" title="六、数据卷"></a>六、数据卷</h3><p>为了部署 SSM 的工程，需要使用到 cp 的命令将宿主机内的 ssm.war 文件复制到容器内部。</p><p>数据卷：将宿主机的一个目录映射到容器的一个目录中。</p><p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。  </p><h3 id="1-创建数据卷"><a href="#1-创建数据卷" class="headerlink" title="1. 创建数据卷"></a>1. 创建数据卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建数据卷后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data</span><br><span class="line">docker volume create 数据卷名称</span><br></pre></td></tr></table></figure><h3 id="2-查看全部数据卷"><a href="#2-查看全部数据卷" class="headerlink" title="2. 查看全部数据卷"></a>2. 查看全部数据卷</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看全部数据卷信息</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><h3 id="3-查看数据卷详情"><a href="#3-查看数据卷详情" class="headerlink" title="3. 查看数据卷详情"></a>3. 查看数据卷详情</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看数据卷的详细信息，可以查询到存放的路径，创建时间等等</span></span><br><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure><h3 id="4-删除数据卷"><a href="#4-删除数据卷" class="headerlink" title="4. 删除数据卷"></a>4. 删除数据卷</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除指定的数据卷</span></span><br><span class="line">docker volume rm 数据卷名称</span><br></pre></td></tr></table></figure><h3 id="5-容器映射数据卷"><a href="#5-容器映射数据卷" class="headerlink" title="5. 容器映射数据卷"></a>5. 容器映射数据卷</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过数据卷名称映射，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat -v 数据卷名称:容器内部的路径 镜像id</span><br><span class="line"> </span><br><span class="line"><span class="comment">#通过路径映射数据卷，直接指定一个路径作为数据卷的存放位置。但是这个路径下是空的。</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat -v 路径(/root/自己创建的文件夹):容器内部的路径 镜像id</span><br></pre></td></tr></table></figure><h2 id="七、Dockerfile-自定义镜像"><a href="#七、Dockerfile-自定义镜像" class="headerlink" title="七、Dockerfile 自定义镜像"></a>七、Dockerfile 自定义镜像</h2><h3 id="1-Dockerfile"><a href="#1-Dockerfile" class="headerlink" title="1.Dockerfile"></a>1.Dockerfile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">创建自定义镜像就需要创建一个Dockerfiler,如下为Dockerfile的语言</span><br><span class="line"> </span><br><span class="line">from：指定当前自定义镜像依赖的环境</span><br><span class="line">copy：将相对路径下的内容复制到自定义镜像中</span><br><span class="line">workdir：声明镜像的默认工作目录</span><br><span class="line">run：执行的命令，可以编写多个</span><br><span class="line">cmd：需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">copy ssm.war /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure><h3 id="2-通过-Dockerfile-制作镜像"><a href="#2-通过-Dockerfile-制作镜像" class="headerlink" title="2. 通过 Dockerfile 制作镜像"></a>2. 通过 Dockerfile 制作镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编写完Dockerfile后需要通过命令将其制作为镜像，并且要在Dockerfile的当前目录下，之后即可在镜像中查看到指定的镜像信息，注意最后的 .</span></span><br><span class="line">docker build -t 镜像名称[:tag] ./</span><br></pre></td></tr></table></figure><h2 id="八、Docker-Compose"><a href="#八、Docker-Compose" class="headerlink" title="八、Docker-Compose"></a>八、Docker-Compose</h2><h3 id="1-下载并安装-Docker-Compose"><a href="#1-下载并安装-Docker-Compose" class="headerlink" title="1. 下载并安装 Docker-Compose"></a>1. 下载并安装 Docker-Compose</h3><h3 id="1-1-下载-Docker-Compose"><a href="#1-1-下载-Docker-Compose" class="headerlink" title="1.1 下载 Docker-Compose"></a>1.1 下载 Docker-Compose</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose</span></span><br><span class="line">下载路径：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span><br></pre></td></tr></table></figure><h3 id="1-2-设置权限"><a href="#1-2-设置权限" class="headerlink" title="1.2 设置权限"></a>1.2 设置权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#需要将DockerCompose文件的名称修改一下，给予DockerCompose文件一个可执行的权限</span><br><span class="line">mv docker-compose-Linux-x86_64 docker-compose</span><br><span class="line">chmod 777 docker-compose</span><br></pre></td></tr></table></figure><h3 id="1-3-配置环境变量"><a href="#1-3-配置环境变量" class="headerlink" title="1.3 配置环境变量"></a>1.3 配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方便后期操作，配置一个环境变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">将docker-compose文件移动到了/usr/<span class="built_in">local</span>/bin，修改了/etc/profile文件，给/usr/<span class="built_in">local</span>/bin配置到了PATH中</span></span><br><span class="line"> </span><br><span class="line">mv docker-compose /usr/local/bin</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">添加内容：<span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>:/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="1-4-测试"><a href="#1-4-测试" class="headerlink" title="1.4 测试"></a>1.4 测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在任意目录下输入docker-compose</span><br></pre></td></tr></table></figure><h3 id="2-Docker-Compose-管理-MySQL-和-Tomcat-容器"><a href="#2-Docker-Compose-管理-MySQL-和-Tomcat-容器" class="headerlink" title="2.Docker-Compose 管理 MySQL 和 Tomcat 容器"></a>2.Docker-Compose 管理 MySQL 和 Tomcat 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">yml文件以key:value方式来指定配置信息</span><br><span class="line">多个配置信息以换行+缩进的方式来区分</span><br><span class="line">在docker-compose.yml文件中，不要使用制表符</span><br><span class="line"> </span><br><span class="line">version: '3.1'</span><br><span class="line">services:</span><br><span class="line">  mysql:           # 服务的名称</span><br><span class="line">    restart: always   # 代表只要docker启动，那么这个容器就跟着一起启动</span><br><span class="line">    image: daocloud.io/library/mysql:5.7.4  # 指定镜像路径</span><br><span class="line">    container_name: mysql  # 指定容器名称</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306   #  指定端口号的映射</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: root   # 指定MySQL的ROOT用户登录密码</span><br><span class="line">      TZ: Asia/Shanghai        # 指定时区</span><br><span class="line">    volumes:</span><br><span class="line">     - /opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql   # 映射数据卷</span><br><span class="line">  tomcat:</span><br><span class="line">    restart: always</span><br><span class="line">    image: daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">    container_name: tomcat</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span><br><span class="line">      - /opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs</span><br></pre></td></tr></table></figure><h3 id="3-使用-docker-compose-命令管理容器"><a href="#3-使用-docker-compose-命令管理容器" class="headerlink" title="3. 使用 docker-compose 命令管理容器"></a>3. 使用 docker-compose 命令管理容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">1.基于docker-compose.yml启动管理的容器</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">2.关闭并删除容器</span></span><br><span class="line">docker-compose down</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">3.开启|关闭|重启已经存在的由docker-compose维护的容器</span></span><br><span class="line">docker-compose start|stop|restart</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">4.查看由docker-compose管理的容器</span></span><br><span class="line">docker-compose ps</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">5.查看日志</span></span><br><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><h3 id="4-docker-compose-配合-Dockerfile-使用"><a href="#4-docker-compose-配合-Dockerfile-使用" class="headerlink" title="4.docker-compose 配合 Dockerfile 使用"></a>4.docker-compose 配合 Dockerfile 使用</h3><p>使用 docker-compose.yml 文件以及 Dockerfile 文件在生成自定义镜像的同时启动当前镜像，并且由 docker-compose 去管理容器  </p><h3 id="4-1docker-compose-文件"><a href="#4-1docker-compose-文件" class="headerlink" title="4.1docker-compose 文件"></a>4.1docker-compose 文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">编写docker-compose文件</span><br><span class="line"> </span><br><span class="line"><span class="comment"># yml文件</span></span><br><span class="line">version: <span class="string">'3.1'</span></span><br><span class="line">services:</span><br><span class="line">  ssm:</span><br><span class="line">    restart: always</span><br><span class="line">    build:            <span class="comment"># 构建自定义镜像</span></span><br><span class="line">      context: ../      <span class="comment"># 指定dockerfile文件的所在路径</span></span><br><span class="line">      dockerfile: Dockerfile   <span class="comment"># 指定Dockerfile文件名称</span></span><br><span class="line">    image: ssm:1.0.1</span><br><span class="line">    container_name: ssm</span><br><span class="line">    ports:</span><br><span class="line">      - 8081:8080</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="4-2-Dockerfile-文件"><a href="#4-2-Dockerfile-文件" class="headerlink" title="4.2 Dockerfile 文件"></a>4.2 Dockerfile 文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">编写Dockerfile文件</span><br><span class="line"> </span><br><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">copy ssm.war /usr/<span class="built_in">local</span>/tomcat/webapps</span><br></pre></td></tr></table></figure><h3 id="4-3-运行"><a href="#4-3-运行" class="headerlink" title="4.3 运行"></a>4.3 运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以直接基于docker-compose.yml以及Dockerfile文件构建的自定义镜像</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span></span><br><span class="line"><span class="comment">#重新构建自定义镜像</span></span><br><span class="line">docker-compose build</span><br><span class="line"><span class="comment">#运行当前内容，并重新构建</span></span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><h2 id="九、CI、CD-介绍及准备"><a href="#九、CI、CD-介绍及准备" class="headerlink" title="九、CI、CD 介绍及准备"></a>九、CI、CD 介绍及准备</h2><h3 id="1-CI、CD-引言"><a href="#1-CI、CD-引言" class="headerlink" title="1.CI、CD 引言"></a>1.CI、CD 引言</h3><p>项目部署  </p><ol><li>将项目通过 maven 进行编译打包  </li><li>将文件上传到指定的服务器中  </li><li>将 war 包放到 tomcat 的目录中  </li><li>通过 Dockerfile 将 Tomcat 和 war 包转成一个镜像，由 DockerCompose 去运行容器<br>项目更新后，需要将上述流程再次的从头到尾的执行一次，如果每次更新一次都执行一次上述操作，很费时，费力。我们就可以通过 CI、CD 帮助我们实现持续集成，持续交付和部署  </li></ol><h3 id="2-CI-介绍"><a href="#2-CI-介绍" class="headerlink" title="2.CI 介绍"></a>2.CI 介绍</h3><p>CI（continuous intergration）持续集成<br>持续集成：编写代码时，完成了一个功能后，立即提交代码到 Git 仓库中，将项目重新的构建并且测试。</p><ol><li>快速发现错误。  </li><li>防止代码偏离主分支。  </li></ol><h3 id="3-搭建-Gitlab-服务器"><a href="#3-搭建-Gitlab-服务器" class="headerlink" title="3. 搭建 Gitlab 服务器"></a>3. 搭建 Gitlab 服务器</h3><h3 id="3-1-准备环境"><a href="#3-1-准备环境" class="headerlink" title="3.1. 准备环境"></a>3.1. 准备环境</h3><p>实现 CI，需要使用到 Gitlab 远程仓库，先通过 Docker 搭建 Gitlab<br>创建一个全新的虚拟机，并且至少指定 4G 的运行内存，4G 运行内存是 Gitlab 推荐的内存大小。<br>并且安装 Docker 以及 Docker-Compose  </p><h3 id="3-2-修改-ssh-的-22-端口"><a href="#3-2-修改-ssh-的-22-端口" class="headerlink" title="3.2 修改 ssh 的 22 端口"></a>3.2 修改 ssh 的 22 端口</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将ssh的默认22端口，修改为60022端口，因为Gitlab需要占用22端口</span></span><br><span class="line"> </span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">  PORT 22 -&gt; 60022</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><h3 id="3-3-编写-docker-compose-yml"><a href="#3-3-编写-docker-compose-yml" class="headerlink" title="3.3 编写 docker-compose.yml"></a>3.3 编写 docker-compose.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker-compose.yml文件去安装gitlab（下载和运行的时间比较长的）</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">gitlab:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">'twang2218/gitlab-ce-zh:11.1.4'</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">"gitlab"</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">'gitlab'</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">   <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">external_url</span> <span class="string">'http://xxx.xxx.xxx.xxx'</span></span><br><span class="line">    <span class="string">gitlab_rails['time_zone']</span> <span class="string">=</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">    <span class="string">gitlab_rails['smtp_enable']</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">gitlab_rails['gitlab_shell_ssh_port']</span> <span class="string">=</span> <span class="number">22</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">'22:22'</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/config:/etc/gitlab</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/data:/var/opt/gitlab</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure><h2 id="十、搭建-GitlabRunner"><a href="#十、搭建-GitlabRunner" class="headerlink" title="十、搭建 GitlabRunner"></a>十、搭建 GitlabRunner</h2><h3 id="1-准备文件"><a href="#1-准备文件" class="headerlink" title="1. 准备文件"></a>1. 准备文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">daemon.json</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">“registry-mirrors”: [“https://registry.docker-cn.com”],</span><br><span class="line">“insecure-registries”: [ip:ports]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">文件夹 environment里面准备maven安装包，jdk1.8安装包，Dockerfile，daemon.json以及docker-compose</span><br></pre></td></tr></table></figure><h3 id="2-开始搭建"><a href="#2-开始搭建" class="headerlink" title="2. 开始搭建"></a>2. 开始搭建</h3><p>创建工作目录 /usr/local/docker_gitlab-runner<br>将 docker-compose.yml 文件以及 environment 目录全部复制到上述目录中<br>在宿主机启动 docker 程序后先执行 sudo chown root:root /var/run/docker.sock (如果重启过 docker, 重新执行)<br>在 / usr/local/docker_gitlab-runner 目录中执行 docker-compose up -d –build 启动容器<br>添加容器权限，保证容器可以使用宿主机的 dockerdocker exec -it gitlab-runner usermod -aG root gitlab-runner<br>注册 Runner 信息到 gitlab  </p><h3 id="3-进入后续步骤"><a href="#3-进入后续步骤" class="headerlink" title="3. 进入后续步骤"></a>3. 进入后续步骤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab-runner gitlab-runner register</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 GitLab 地址</span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://192.168.199.109/</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 GitLab Token</span></span><br><span class="line">Please enter the gitlab-ci token for this runner:</span><br><span class="line">1Lxq_f1NRfCfeNbE5WRh</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 Runner 的说明</span></span><br><span class="line">Please enter the gitlab-ci description for this runner:</span><br><span class="line">可以为空</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 Tag，可以用于指定在构建规定的 tag 时触发 ci</span></span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">deploy</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里选择 <span class="literal">true</span> ，可以用于代码上传后直接执行（根据版本，也会没有次选项）</span></span><br><span class="line">Whether to run untagged builds [true/false]:</span><br><span class="line">true</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里选择 <span class="literal">false</span>，可以直接回车，默认为 <span class="literal">false</span>（根据版本，也会没有次选项）</span></span><br><span class="line">Whether to lock Runner to current project [true/false]:</span><br><span class="line">false</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择 runner 执行器，这里我们选择的是 shell</span></span><br><span class="line">Please enter the executor: virtualbox, docker+machine, parallels, shell, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh:</span><br><span class="line">shell</span><br></pre></td></tr></table></figure><h2 id="十一、整合项目入门测试"><a href="#十一、整合项目入门测试" class="headerlink" title="十一、整合项目入门测试"></a>十一、整合项目入门测试</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>创建 maven 工程，添加 web.xml 文件，编写 HTML 页面  </p><h3 id="2-编写-gitlab-ci-yml-文件"><a href="#2-编写-gitlab-ci-yml-文件" class="headerlink" title="2. 编写. gitlab-ci.yml 文件"></a>2. 编写. gitlab-ci.yml 文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">first</span> <span class="string">test</span> <span class="string">ci</span>   <span class="comment"># 输入的命令</span></span><br></pre></td></tr></table></figure><h3 id="3-将-maven-工程推送到-gitlab-中"><a href="#3-将-maven-工程推送到-gitlab-中" class="headerlink" title="3. 将 maven 工程推送到 gitlab 中"></a>3. 将 maven 工程推送到 gitlab 中</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行git命令推送到Gitlab</span><br><span class="line"> </span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="4-查看效果"><a href="#4-查看效果" class="headerlink" title="4. 查看效果"></a>4. 查看效果</h3><p>可以在 gitlab 中查看到 gitlab-ci.yml 编写的内容  </p><h2 id="十二、完善项目配置"><a href="#十二、完善项目配置" class="headerlink" title="十二、完善项目配置"></a>十二、完善项目配置</h2><p>添加 Dockerfile 以及 docker-compose.yml， 并修改. gitlab-ci.yml 文件  </p><h3 id="1-创建-Dockerfile"><a href="#1-创建-Dockerfile" class="headerlink" title="1. 创建 Dockerfile"></a>1. 创建 Dockerfile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Dockerfile</span></span><br><span class="line">FROM daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">COPY testci.war /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure><h3 id="2-创建-docker-compose-yml"><a href="#2-创建-docker-compose-yml" class="headerlink" title="2. 创建 docker-compose.yml"></a>2. 创建 docker-compose.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">testci:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">docker</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">testci</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><h3 id="3-修改-gitlab-ci-yml"><a href="#3-修改-gitlab-ci-yml" class="headerlink" title="3. 修改. gitlab-ci.yml"></a>3. 修改. gitlab-ci.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">first</span> <span class="string">test</span> <span class="string">ci</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/usr/local/maven/apache-maven-3.6.3/bin/mvn</span> <span class="string">package</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">target/testci-1.0-SNAPSHOT.war</span> <span class="string">docker/testci.war</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">down</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span> <span class="string">--build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">$(docker</span> <span class="string">images</span> <span class="string">-qf</span> <span class="string">dangling=true)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Docker-介绍&quot;&gt;&lt;a href=&quot;#一、Docker-介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Docker 介绍&quot;&gt;&lt;/a&gt;一、Docker 介绍&lt;/h2&gt;&lt;h3 id=&quot;1-安装需要的包&quot;&gt;&lt;a href=&quot;#1-安装需要的包&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch</title>
    <link href="http://yoursite.com/2020/07/12/ES/"/>
    <id>http://yoursite.com/2020/07/12/ES/</id>
    <published>2020-07-12T13:44:15.000Z</published>
    <updated>2020-08-06T06:35:55.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ES简介"><a href="#1-ES简介" class="headerlink" title="1 ES简介"></a>1 ES简介</h1><p>ES是使用java 语言并且基于lucence编写的搜索引擎框架，他提供了分布式的全文搜索功能，提供了一个统一的基于restful风格的web 接口。</p><p>lucence:一个搜索引擎底层</p><p>分布式：突出ES的横向扩展能力</p><p>全文检索：将一段词语进行分词，并将分出的词语统一的放在一个分词库中，再搜索时，根据关键字取分词库中检索，找到匹配的内容（倒排索引）。</p><p>restful风格的web 接口：只要发送一个http请求，并且根据请求方式的不同，携带参数的不同，执行相应的功能。</p><p>应用广泛：WIKI, github,Gold man</p><h2 id="1-2ES的由来"><a href="#1-2ES的由来" class="headerlink" title="1.2ES的由来"></a>1.2ES的由来</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">回忆时光**</span><br><span class="line"></span><br><span class="line">许多年前，一个刚结婚的名叫 Shay Banon 的失业开发者，跟着他的妻子去了伦敦，他的妻子在那里学习厨师。 在寻找一个赚钱的工作的时候，为了给他的妻子做一个食谱搜索引擎，他开始使用 Lucene 的一个早期版本。</span><br><span class="line"></span><br><span class="line">直接使用 Lucene 是很难的，因此 Shay 开始做一个抽象层，Java 开发者使用它可以很简单的给他们的程序添加搜索功能。 他发布了他的第一个开源项目 Compass。</span><br><span class="line"></span><br><span class="line">后来 Shay 获得了一份工作，主要是高性能，分布式环境下的内存数据网格。这个对于高性能，实时，分布式搜索引擎的需求尤为突出， 他决定重写 Compass，把它变为一个独立的服务并取名 Elasticsearch。</span><br><span class="line"></span><br><span class="line">第一个公开版本在2010年2月发布，从此以后，Elasticsearch 已经成为了 Github 上最活跃的项目之一，他拥有超过300名 contributors(目前736名 contributors )。 一家公司已经开始围绕 Elasticsearch 提供商业服务，并开发新的特性，但是，Elasticsearch 将永远开源并对所有人可用。</span><br><span class="line"></span><br><span class="line">据说，Shay 的妻子还在等着她的食谱搜索引擎…</span><br></pre></td></tr></table></figure><h2 id="1-3ES和solr"><a href="#1-3ES和solr" class="headerlink" title="1.3ES和solr"></a>1.3ES和solr</h2><p>1.solr 查询死数据，速度比es快。但是数据如果是改变的，solr查询速度会降低很多，ES的查询速度没有明显的改变</p><p>2.solr搭建集群 依赖ZK，ES本身就支持集群搭建</p><p>3.最开始solr 的社区很火爆，针对国内文档 少，ES出现后，国内社区火爆程度 上升，，ES的文档非常健全</p><p>4.ES对云计算和大数据支持很好</p><h2 id="1-4倒排索引"><a href="#1-4倒排索引" class="headerlink" title="1.4倒排索引"></a>1.4倒排索引</h2><p><img src="image-20200727144457339.png" alt="image"></p><p>1.将存放的数据以一定的方式进行分词，并将分词的内容存放到一个单独的分词库中。</p><p>2.当用户取查询数据时，会将用户的查询关键字进行分词，然后去分词库中匹配内容，最终得到数据的id标识</p><p>3.根据id标识去存放数据的位置拉去指定数据</p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h1><h2 id="2-1-elasticsearch-安装"><a href="#2-1-elasticsearch-安装" class="headerlink" title="2.1 elasticsearch 安装"></a>2.1 elasticsearch 安装</h2><p><a href="http://hub.daocloud.io/" target="_blank" rel="noopener">http://hub.daocloud.io/</a>    docker 镜像工厂地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/elasticsearch:6.5.4</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">   <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/kibana:6.5.4</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch_url=10.1.XX.XX:9200</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br></pre></td></tr></table></figure><p>或者本地下载</p><p>2.2</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/archive/v6.8.10.zip" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/archive/v6.8.10.zip</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官方给的安装的办法</span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.0/elasticsearch-analysis-ik-6.3.0.zip</span><br></pre></td></tr></table></figure><p>本地自己安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/medcl/elasticsearch-analysis-ik/archive/v6.8.10.zip </span><br><span class="line">下载好后，</span><br><span class="line">执行 mvn clean package  打包（注意pom文件中的es的版本，如果和自己的es的版本不一致，手动改下）</span><br><span class="line">elasticsearch-analysis-ik-6.8.10\target\releases  中压缩包的内容copy到 elasticsearch-6.8.10\plugins\ik 下</span><br></pre></td></tr></table></figure><p>kibana 主要用到 Dev Tools   和 Management</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">  &quot;text&quot;:&quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-ES的基本操作"><a href="#3-ES的基本操作" class="headerlink" title="3 ES的基本操作"></a>3 ES的基本操作</h1><h2 id="3-1-es的结构"><a href="#3-1-es的结构" class="headerlink" title="3.1 es的结构"></a>3.1 es的结构</h2><h3 id="3-1-1索引indx，分片，备份"><a href="#3-1-1索引indx，分片，备份" class="headerlink" title="3.1.1索引indx，分片，备份"></a>3.1.1索引indx，分片，备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ES服务中会创建多个索引</span><br><span class="line">每个缩影默认被分成5个分片</span><br><span class="line">每个分片存在至少一个备份分片</span><br><span class="line">备份分片 不会帮助检索数据（当ES检索压力特别大的时候才，备份分片才会帮助检索数据）</span><br><span class="line">备份的分片必须放在不同的服务器中</span><br></pre></td></tr></table></figure><p><img src="image-20200727174836230.png" alt="png"></p><h3 id="3-1-2-类型type"><a href="#3-1-2-类型type" class="headerlink" title="3.1.2 类型type"></a>3.1.2 类型type</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个索引下可以创建多个类型</span><br><span class="line">PS:版本不同,类型的创建也不同</span><br></pre></td></tr></table></figure><p><img src="image-20200727175427524.png" alt="png"></p><h3 id="3-1-3-文档document"><a href="#3-1-3-文档document" class="headerlink" title="3.1.3 文档document"></a>3.1.3 文档document</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个类型下可以有多个文档，这个文档就相当于mysql表中的多行数据</span><br></pre></td></tr></table></figure><p><img src="image-20200727175655572.png" alt="png"></p><p>3.1.4 属性field</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个文档中可以包含多个属性，类似于mysql 表中的一行数据有多个列</span><br></pre></td></tr></table></figure><p><img src="ES笔记.assets/image-20200727180642583.png" alt="image-20200727180642583"></p><h2 id="3-2操作ES的restful语法"><a href="#3-2操作ES的restful语法" class="headerlink" title="3.2操作ES的restful语法"></a>3.2操作ES的restful语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET请求：</span><br><span class="line">http://ip:port/index :查询索引信息</span><br><span class="line">http://ip:port/index/type/doc_id :查询指定的文档信息</span><br><span class="line">POST请求：</span><br><span class="line">    http://ip:port/index/type/_search: 查询文档，可以在请求体中添加json字符串来代表查询条件</span><br><span class="line">    http://ip:port/index/type/doc_id/_update: 修改文档，在请求体中添加json字符串来代表修改的信息</span><br><span class="line">PUT请求：</span><br><span class="line">    http://ip:port/index : 创建一个索引，需要在请求体中指定索引的信息</span><br><span class="line">    http://ip:port/index/type/_mappings:代表创建索引时，指定索引文档存储属性的信息</span><br><span class="line">DELETE 请求：</span><br><span class="line">    http://ip:port/index： 删除跑路</span><br><span class="line">    http://ip:port/index/type/doc_id:  删除指定的文档</span><br></pre></td></tr></table></figure><h2 id="3-3-索引的操作"><a href="#3-3-索引的操作" class="headerlink" title="3.3 索引的操作"></a>3.3 索引的操作</h2><h3 id="3-3-1-创建一个索引"><a href="#3-3-1-创建一个索引" class="headerlink" title="3.3.1 创建一个索引"></a>3.3.1 创建一个索引</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#创建一个索引</span><br><span class="line">#number_of_shards  分片</span><br><span class="line">#number_of_replicas 备份</span><br><span class="line">PUT /person</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">5</span>, </span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-查看一个索引"><a href="#3-3-2-查看一个索引" class="headerlink" title="3.3.2 查看一个索引"></a>3.3.2 查看一个索引</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.management</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">#查看索引信息</span><br><span class="line">GET /person</span><br></pre></td></tr></table></figure><h3 id="3-3-3-删除-索引"><a href="#3-3-3-删除-索引" class="headerlink" title="3.3.3 删除 索引"></a>3.3.3 删除 索引</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.management</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">#删除索引</span><br><span class="line">DELETE /person</span><br></pre></td></tr></table></figure><h2 id="3-4-ES中Field可以指定的类型"><a href="#3-4-ES中Field可以指定的类型" class="headerlink" title="3.4 ES中Field可以指定的类型"></a>3.4 ES中Field可以指定的类型</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/mapping-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.8/mapping-types.html</a>  官方 文档</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">字符串类型:</span><br><span class="line">  text: 一般用于全文检索，将当前field 进行分词</span><br><span class="line">  keyword:当前field  不会进行分词</span><br><span class="line">数值类型：</span><br><span class="line">  long:</span><br><span class="line">  Intger:</span><br><span class="line">  short:</span><br><span class="line">  byte:</span><br><span class="line">  double:</span><br><span class="line">  float:</span><br><span class="line">  half_float: 精度比float 小一半</span><br><span class="line">  scaled_float:根据一个long 和scaled 来表达一个浮点型 long-345, -scaled 100 -&gt;3.45</span><br><span class="line">时间类型：</span><br><span class="line">  date类型,根据时间类型指定具体的格式</span><br><span class="line">    PUT my_index</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"_doc"</span>: &#123;</span><br><span class="line">          <span class="attr">"properties"</span>: &#123;</span><br><span class="line">            <span class="attr">"date"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>:   <span class="string">"date"</span>,</span><br><span class="line">              <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">布尔类型：</span><br><span class="line">  boolean 类型，表达true 和false</span><br><span class="line">二进制类型：</span><br><span class="line">  binary类型暂时支持Base64编码的字符串</span><br><span class="line">范围类型：</span><br><span class="line">  integer_range：</span><br><span class="line">  float_range：</span><br><span class="line">  long_range：赋值时，无需指定具体的内容，只需存储一个范围即可，gte,lte,gt,lt,</span><br><span class="line">  double_range：</span><br><span class="line">  date_range：</span><br><span class="line">  ip_range：</span><br><span class="line"></span><br><span class="line">    PUT range_index</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"_doc"</span>: &#123;</span><br><span class="line">          <span class="attr">"properties"</span>: &#123;</span><br><span class="line">            <span class="attr">"expected_attendees"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"integer_range"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"time_frame"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"date_range"</span>, </span><br><span class="line">              <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PUT range_index/_doc/1?refresh</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"expected_attendees"</span> : &#123; </span><br><span class="line">        <span class="attr">"gte"</span> : <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"lte"</span> : <span class="number">20</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"time_frame"</span> : &#123; </span><br><span class="line">        <span class="attr">"gte"</span> : <span class="string">"2015-10-31 12:00:00"</span>, </span><br><span class="line">        <span class="attr">"lte"</span> : <span class="string">"2015-11-01"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">经纬度类型：</span><br><span class="line">  geo_point:用来存储经纬度</span><br><span class="line">IP类型：</span><br><span class="line">  ip:可以存储IPV4 和IPV6</span><br><span class="line">其他的数据类型，参考官网</span><br></pre></td></tr></table></figure><h2 id="3-5-创建索引并指定数据结构"><a href="#3-5-创建索引并指定数据结构" class="headerlink" title="3.5 创建索引并指定数据结构"></a>3.5 创建索引并指定数据结构</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#创建索引，指定数据类型</span><br><span class="line">PUT /book</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    #分片数</span><br><span class="line">    "number_of_shards": 5,</span><br><span class="line">    #备份数</span><br><span class="line">    "number_of_replicas": 1</span><br><span class="line">  &#125;,</span><br><span class="line">    #指定数据类型</span><br><span class="line"> "mappings": &#123;</span><br><span class="line">    #类型 Type</span><br><span class="line">   "novel":&#123;</span><br><span class="line">    #文档存储的field</span><br><span class="line">     "properties":&#123;</span><br><span class="line">       #field属性名</span><br><span class="line">       "name":&#123;</span><br><span class="line">         #类型</span><br><span class="line">         "type":"text",</span><br><span class="line">         #指定分词器</span><br><span class="line">         "analyzer":"ik_max_word",</span><br><span class="line">         #指定当前的field可以被作为查询的条件</span><br><span class="line">         "index":true,</span><br><span class="line">         #是否需要额外存储</span><br><span class="line">         "store":false</span><br><span class="line">       &#125;,</span><br><span class="line">       "author":&#123;</span><br><span class="line">         "type":"keyword"</span><br><span class="line">       &#125;,</span><br><span class="line">       "count":&#123;</span><br><span class="line">         "type":"long"</span><br><span class="line">       &#125;,</span><br><span class="line">       "on-sale":&#123;</span><br><span class="line">         "type":"date",</span><br><span class="line">           #指定时间类型的格式化方式</span><br><span class="line">         "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span><br><span class="line">       &#125;,</span><br><span class="line">        "descr":&#123;</span><br><span class="line">          "type":"text",</span><br><span class="line">          "analyzer":"ik_max_word"</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-文档操作"><a href="#3-6-文档操作" class="headerlink" title="3.6 文档操作"></a>3.6 文档操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文档在ES服务中的唯一标识， _indx ,_type,_id  三个内容为组合，锁定一个文档，操作时添加还时修改操作，</span><br></pre></td></tr></table></figure><h3 id="3-6-1-新建文档"><a href="#3-6-1-新建文档" class="headerlink" title="3.6.1 新建文档"></a>3.6.1 新建文档</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">自动生成id</span><br><span class="line">#添加文档，自动生成id</span><br><span class="line">POST /book/novel</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"盘龙"</span>,</span><br><span class="line">  <span class="attr">"author"</span>:<span class="string">"我吃西红柿"</span>,</span><br><span class="line">  <span class="attr">"count"</span>:<span class="number">100000</span>,</span><br><span class="line">  <span class="attr">"on-sale"</span>:<span class="string">"2001-01-01"</span>,</span><br><span class="line">  <span class="attr">"descr"</span>:<span class="string">"大小的血睛鬃毛狮，力大无穷的紫睛金毛猿，毁天灭地的九头蛇皇，携带着毁灭雷电的恐怖雷龙……这里无奇不有，这是一个广博的魔幻世界。强者可以站在黑色巨龙的头顶遨游天际，恐怖的魔法可以焚烧江河，可以毁灭城池，可以夷平山岳……"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#添加文档,手动指定id</span><br><span class="line">PUT /book/novel/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"红楼梦"</span>,</span><br><span class="line">  <span class="attr">"author"</span>:<span class="string">"曹雪芹"</span>,</span><br><span class="line">  <span class="attr">"count"</span>:<span class="number">10000000</span>,</span><br><span class="line">  <span class="attr">"on-sale"</span>:<span class="string">"2501-01-01"</span>,</span><br><span class="line">  <span class="attr">"descr"</span>:<span class="string">"中国古代章回体长篇小说，中国古典四大名著之一，一般认为是清代作家曹雪芹所著。小说以贾、史、王、薛四大家族的兴衰为背景，以富贵公子贾宝玉为视角，以贾宝玉与林黛玉、薛宝钗的爱情婚姻悲剧为主线，描绘了一批举止见识出于须眉之上的闺阁佳人的人生百态，展现了真正的人性美和悲剧美"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-2-修改文档"><a href="#3-6-2-修改文档" class="headerlink" title="3.6.2 修改文档"></a>3.6.2 修改文档</h3><p>1.覆盖式修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#添加文档,手动指定id</span><br><span class="line">PUT /book/novel/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;红楼梦&quot;,</span><br><span class="line">  &quot;author&quot;:&quot;曹雪芹&quot;,</span><br><span class="line">  &quot;count&quot;:1000444,</span><br><span class="line">  &quot;on-sale&quot;:&quot;2501-01-01&quot;,</span><br><span class="line">  &quot;descr&quot;:&quot;中国古代章回体长篇小说，中国古典四大名著之一，一般认为是清代作家曹雪芹所著。小说以贾、史、王、薛四大家族的兴衰为背景，以富贵公子贾宝玉为视角，以贾宝玉与林黛玉、薛宝钗的爱情婚姻悲剧为主线，描绘了一批举止见识出于须眉之上的闺阁佳人的人生百态，展现了真正的人性美和悲剧美&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用doc修改方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#修改文档，使用doc 方式</span><br><span class="line">POST /book/novel/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"doc"</span>:&#123;</span><br><span class="line">      #指定需要修改的field和对应的值</span><br><span class="line">    "count":566666</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-删除文档"><a href="#3-6-3-删除文档" class="headerlink" title="3.6.3 删除文档"></a>3.6.3 删除文档</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#根据id删除文档</span><br><span class="line">DELETE /book/novel/3mEnk3MBaSKoGN4T2olw</span><br></pre></td></tr></table></figure><h1 id="4-Java-操作ElasticSearch"><a href="#4-Java-操作ElasticSearch" class="headerlink" title="4.Java 操作ElasticSearch"></a>4.Java 操作ElasticSearch</h1><h2 id="4-1-Java-连接ES"><a href="#4-1-Java-连接ES" class="headerlink" title="4.1 Java 连接ES"></a>4.1 Java 连接ES</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">创建maven工程</span><br><span class="line">导入依赖</span><br><span class="line"><span class="comment">&lt;!--        1.elasticsearch--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        2.elasticsearch 高级API--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        3.junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        4.lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建client链接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestHighLevelClient <span class="title">getClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//  创建 HttpHost</span></span><br><span class="line">        HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">"127.0.0.1"</span>,<span class="number">9200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 RestClientBuilder</span></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(httpHost);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 RestHighLevelClient</span></span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2创建索引"><a href="#4-2创建索引" class="headerlink" title="4.2创建索引"></a>4.2创建索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.EsClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.json.JsonXContent;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"person"</span>;</span><br><span class="line">    String type=<span class="string">"man"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndx</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备关于索引的setting</span></span><br><span class="line">        Settings.Builder settings = Settings.builder()</span><br><span class="line">                .put(<span class="string">"number_of_shards"</span>, <span class="number">2</span>)</span><br><span class="line">                .put(<span class="string">"number_of_replicas"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.准备关于索引的mapping</span></span><br><span class="line">        XContentBuilder mappings = JsonXContent.contentBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                    .startObject(<span class="string">"properties"</span>)</span><br><span class="line">                        .startObject(<span class="string">"name"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"age"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"integer"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"birthday"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"date"</span>)</span><br><span class="line">                            .field(<span class="string">"format"</span>, <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                    .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line">        <span class="comment">// 3.将settings和mappings 封装到到一个Request对象中</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(index)</span><br><span class="line">                .settings(settings)</span><br><span class="line">                .mapping(type,mappings);</span><br><span class="line">        <span class="comment">// 4.使用client 去连接ES</span></span><br><span class="line">        CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"response:"</span>+response.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-检查索引是否存在，删除索引"><a href="#4-3-检查索引是否存在，删除索引" class="headerlink" title="4.3 检查索引是否存在，删除索引"></a>4.3 检查索引是否存在，删除索引</h2><h3 id="4-3-1-检查索引存在"><a href="#4-3-1-检查索引存在" class="headerlink" title="4.3.1 检查索引存在"></a>4.3.1 检查索引存在</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.EsClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.json.JsonXContent;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"person"</span>;</span><br><span class="line">    String type=<span class="string">"man"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">existTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  1.准备request 对象</span></span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.通过client 去 操作</span></span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 3输出结果</span></span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-删除索引"><a href="#4-3-2-删除索引" class="headerlink" title="4.3.2 删除索引"></a>4.3.2 删除索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.EsClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.json.JsonXContent;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"person"</span>;</span><br><span class="line">    String type=<span class="string">"man"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取request</span></span><br><span class="line"></span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2.使用client 操作request</span></span><br><span class="line">        AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//  3.输出结果</span></span><br><span class="line">        System.out.println(delete.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-Java操作文档"><a href="#4-4-Java操作文档" class="headerlink" title="4.4 Java操作文档"></a>4.4 Java操作文档</h2><h3 id="4-4-1-添加文档操作"><a href="#4-4-1-添加文档操作" class="headerlink" title="4.4.1 添加文档操作"></a>4.4.1 添加文档操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"person"</span>;</span><br><span class="line">    String type=<span class="string">"man"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDocTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//  1.准备一个json数据</span></span><br><span class="line">        Person person  = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="number">33</span>,<span class="keyword">new</span> Date());</span><br><span class="line">        String json = mapper.writeValueAsString(person);</span><br><span class="line">        <span class="comment">//  2.创建一个request对象(手动指定的方式创建)</span></span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(index,type,person.getId().toString());</span><br><span class="line">        request.source(json, XContentType.JSON);</span><br><span class="line">        <span class="comment">// 3.使用client 操作request对象生成doc</span></span><br><span class="line">        IndexResponse response = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.输出返回结果</span></span><br><span class="line">        System.out.println(response.getResult().toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-修改文档"><a href="#4-4-2-修改文档" class="headerlink" title="4.4.2 修改文档"></a>4.4.2 修改文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Demo3 &#123;</span><br><span class="line">    ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = &quot;person&quot;;</span><br><span class="line">    String type=&quot;man&quot;;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void updateDocTest() throws Exception&#123;</span><br><span class="line">        // 1.创建要跟新的Map</span><br><span class="line">        Map&lt;String,Object&gt;  doc = new HashMap&lt;&gt;();</span><br><span class="line">        doc.put(&quot;name&quot;,&quot;张三三&quot;);</span><br><span class="line"></span><br><span class="line">        // 2.创建request, 将doc 封装进去</span><br><span class="line">        UpdateRequest request = new UpdateRequest(index,type,&quot;1&quot;);</span><br><span class="line">        request.doc(doc);</span><br><span class="line"></span><br><span class="line">        // 3. client 去操作 request</span><br><span class="line">        UpdateResponse response = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        // 4.输出 更新结果</span><br><span class="line">        System.out.println(response.getResult());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-删除文档"><a href="#4-4-3-删除文档" class="headerlink" title="4.4.3  删除文档"></a>4.4.3  删除文档</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"person"</span>;</span><br><span class="line">    String type=<span class="string">"man"</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDocTest</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">//  1.封装删除对象</span></span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(index,type,<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2 client 操作 request对象</span></span><br><span class="line">        DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//  3.输出结果</span></span><br><span class="line">        System.out.println(response.getResult().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-java批量操作文档"><a href="#4-5-java批量操作文档" class="headerlink" title="4.5 java批量操作文档"></a>4.5 java批量操作文档</h2><p>批量操作 新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkCreateDoc</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">      <span class="comment">// 1.准备多个json 对象</span></span><br><span class="line">      Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="number">23</span>,<span class="keyword">new</span> Date());</span><br><span class="line">      Person p2 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">"里斯"</span>,<span class="number">24</span>,<span class="keyword">new</span> Date());</span><br><span class="line">      Person p3 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">"王武"</span>,<span class="number">24</span>,<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">      String json1  = mapper.writeValueAsString(p1);</span><br><span class="line">      String json2  = mapper.writeValueAsString(p2);</span><br><span class="line">      String json3  = mapper.writeValueAsString(p3);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.创建request</span></span><br><span class="line"></span><br><span class="line">      BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">      bulkRequest.add(<span class="keyword">new</span> IndexRequest(index,type,p1.getId().toString()).source(json1,XContentType.JSON))</span><br><span class="line">              .add(<span class="keyword">new</span> IndexRequest(index,type,p2.getId().toString()).source(json2,XContentType.JSON))</span><br><span class="line">              .add(<span class="keyword">new</span> IndexRequest(index,type,p3.getId().toString()).source(json3,XContentType.JSON));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3.client 执行</span></span><br><span class="line">      BulkResponse responses = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4.输出结果</span></span><br><span class="line">      System.out.println(responses.getItems().toString());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>批量删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建Request 对象</span></span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    bulkRequest.add(<span class="keyword">new</span> DeleteRequest(index,type,<span class="string">"1"</span>));</span><br><span class="line">    bulkRequest.add(<span class="keyword">new</span> DeleteRequest(index,type,<span class="string">"2"</span>));</span><br><span class="line">    bulkRequest.add(<span class="keyword">new</span> DeleteRequest(index,type,<span class="string">"3"</span>));</span><br><span class="line">    <span class="comment">// 2.执行</span></span><br><span class="line">    BulkResponse re = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 3.输出结果</span></span><br><span class="line">    System.out.println(re.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-ES-练习"><a href="#5-ES-练习" class="headerlink" title="5.ES 练习"></a>5.ES 练习</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">索引：sms-logs-index</span><br><span class="line">类型：sms-logs-type</span><br></pre></td></tr></table></figure><p><img src="image-20200728173057412.png" alt="png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"sms-logs-index"</span>;</span><br><span class="line">    String type=<span class="string">"sms-logs-type"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备关于索引的setting</span></span><br><span class="line">        Settings.Builder settings = Settings.builder()</span><br><span class="line">                .put(<span class="string">"number_of_shards"</span>, <span class="number">3</span>)</span><br><span class="line">                .put(<span class="string">"number_of_replicas"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.准备关于索引的mapping</span></span><br><span class="line">        XContentBuilder mappings = JsonXContent.contentBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                    .startObject(<span class="string">"properties"</span>)</span><br><span class="line">                        .startObject(<span class="string">"corpName"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"keyword"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"createDate"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"date"</span>)</span><br><span class="line">                            .field(<span class="string">"format"</span>, <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"fee"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"long"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"ipAddr"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"ip"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"longCode"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"keyword"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"mobile"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"keyword"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"operatorId"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"integer"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"province"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"keyword"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"replyTotal"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"integer"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"sendDate"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"date"</span>)</span><br><span class="line">                            .field(<span class="string">"format"</span>, <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"smsContent"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"text"</span>)</span><br><span class="line">                            .field(<span class="string">"analyzer"</span>, <span class="string">"ik_max_word"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"state"</span>)</span><br><span class="line">                            .field(<span class="string">"type"</span>, <span class="string">"integer"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                    .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line">        <span class="comment">// 3.将settings和mappings 封装到到一个Request对象中</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(index)</span><br><span class="line">                .settings(settings)</span><br><span class="line">                .mapping(type,mappings);</span><br><span class="line">        <span class="comment">// 4.使用client 去连接ES</span></span><br><span class="line">        CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"response:"</span>+response.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">bulkCreateDoc</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.准备多个json 对象</span></span><br><span class="line">        String longcode = <span class="string">"1008687"</span>;</span><br><span class="line">        String mobile =<span class="string">"138340658"</span>;</span><br><span class="line">        List&lt;String&gt; companies = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        companies.add(<span class="string">"腾讯课堂"</span>);</span><br><span class="line">        companies.add(<span class="string">"阿里旺旺"</span>);</span><br><span class="line">        companies.add(<span class="string">"海尔电器"</span>);</span><br><span class="line">        companies.add(<span class="string">"海尔智家公司"</span>);</span><br><span class="line">        companies.add(<span class="string">"格力汽车"</span>);</span><br><span class="line">        companies.add(<span class="string">"苏宁易购"</span>);</span><br><span class="line">        List&lt;String&gt; provinces = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        provinces.add(<span class="string">"北京"</span>);</span><br><span class="line">        provinces.add(<span class="string">"重庆"</span>);</span><br><span class="line">        provinces.add(<span class="string">"上海"</span>);</span><br><span class="line">        provinces.add(<span class="string">"晋城"</span>);</span><br><span class="line"></span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">16</span> ; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            SmsLogs s1 = <span class="keyword">new</span> SmsLogs();</span><br><span class="line">            s1.setId(i);</span><br><span class="line">            s1.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">            s1.setSendDate(<span class="keyword">new</span> Date());</span><br><span class="line">            s1.setLongCode(longcode+i);</span><br><span class="line">            s1.setMobile(mobile+<span class="number">2</span>*i);</span><br><span class="line">            s1.setCorpName(companies.get(i%<span class="number">5</span>));</span><br><span class="line">            s1.setSmsContent(SmsLogs.doc.substring((i-<span class="number">1</span>)*<span class="number">100</span>,i*<span class="number">100</span>));</span><br><span class="line">            s1.setState(i%<span class="number">2</span>);</span><br><span class="line">            s1.setOperatorId(i%<span class="number">3</span>);</span><br><span class="line">            s1.setProvince(provinces.get(i%<span class="number">4</span>));</span><br><span class="line">            s1.setIpAddr(<span class="string">"127.0.0."</span>+i);</span><br><span class="line">            s1.setReplyTotal(i*<span class="number">3</span>);</span><br><span class="line">            s1.setFee(i*<span class="number">6</span>+<span class="string">""</span>);</span><br><span class="line">            String json1  = mapper.writeValueAsString(s1);</span><br><span class="line">            bulkRequest.add(<span class="keyword">new</span> IndexRequest(index,type,s1.getId().toString()).source(json1, XContentType.JSON));</span><br><span class="line">            System.out.println(<span class="string">"数据"</span>+i+s1.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.client 执行</span></span><br><span class="line">        BulkResponse responses = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.输出结果</span></span><br><span class="line">        System.out.println(responses.getItems().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-ElasticSearch的各种查询"><a href="#6-ElasticSearch的各种查询" class="headerlink" title="6.ElasticSearch的各种查询"></a>6.ElasticSearch的各种查询</h1><h2 id="6-1-term-和terms-查询"><a href="#6-1-term-和terms-查询" class="headerlink" title="6.1 term 和terms 查询"></a>6.1 term 和terms 查询</h2><h3 id="6-1-1-term-查询"><a href="#6-1-1-term-查询" class="headerlink" title="6.1.1 term 查询"></a>6.1.1 term 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">term 查询是代表完全匹配，搜索之前不会对你搜索的关键字进行分词，直接拿 关键字 去文档分词库中匹配内容</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#term查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  #limit ?</span><br><span class="line">  "from": 0,  </span><br><span class="line">  #limit x,?</span><br><span class="line">  "size":5,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "term": &#123;</span><br><span class="line">      "province": &#123;</span><br><span class="line">        "value": "北京"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TermSearch</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"sms-logs-index"</span>;</span><br><span class="line">    String type=<span class="string">"sms-logs-type"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termSearchTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2.创建查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.from(<span class="number">0</span>);</span><br><span class="line">        builder.size(<span class="number">5</span>);</span><br><span class="line">        builder.query(QueryBuilders.termQuery(<span class="string">"province"</span>,<span class="string">"北京"</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  3.执行查询</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.输出查询结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(sourceAsMap);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-查询"><a href="#6-1-2-查询" class="headerlink" title="6.1.2 查询"></a>6.1.2 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">terms 和 term 查询的机制一样，搜索之前不会对你搜索的关键字进行分词，直接拿 关键字 去文档分词库中匹配内容</span><br><span class="line">terms:是针对一个字段包含多个值</span><br><span class="line">term : where province =北京</span><br><span class="line">terms: where province = 北京  or  province =?  (类似于mysql 中的 in)</span><br><span class="line">也可针对 text,  只是在分词库中查询的时候不会进行分词</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#terms 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"terms"</span>: &#123;</span><br><span class="line">      <span class="attr">"province"</span>: [</span><br><span class="line">        <span class="string">"北京"</span>,</span><br><span class="line">        <span class="string">"晋城"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TermSearch</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"sms-logs-index"</span>;</span><br><span class="line">    String type=<span class="string">"sms-logs-type"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termsSearchTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.termsQuery(<span class="string">"province"</span>,<span class="string">"北京"</span>,<span class="string">"晋城"</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.执行查询</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 输出查询结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-match"><a href="#6-2-match" class="headerlink" title="6.2 match"></a>6.2 match</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">match 查询属于高级查询，会根据你查询字段的类型不一样，采用不同的查询方式</span><br><span class="line">查询的是日期或者数值，他会将你基于字符串的查询内容转换为日期或数值对待</span><br><span class="line">如果查询的内容是一个不能被分词的内容（keyword）,match 不会将你指定的关键字进行分词</span><br><span class="line">如果查询的内容是一个可以被分词的内容（text）,match 查询会将你指定的内容根据一定的方式进行分词，去分词库中匹配指定的内容</span><br><span class="line">match 查询，实际底层就是多个term 查询，将多个term查询的结果给你封装到一起</span><br></pre></td></tr></table></figure><h3 id="6-2-1-math-all"><a href="#6-2-1-math-all" class="headerlink" title="6.2.1 math_all"></a>6.2.1 math_all</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询全部内容，不指定查询条件</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#match_all 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchSearch</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"sms-logs-index"</span>;</span><br><span class="line">    String type=<span class="string">"sms-logs-type"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchAllSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2.创建查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">         <span class="comment">//  ES 默认只查询10条数据</span></span><br><span class="line">        builder.size(<span class="number">20</span>);</span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  3.执行查询</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.输出查询结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(response.getHits().getHits().length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-2-match-查询"><a href="#6-2-2-match-查询" class="headerlink" title="6.2.2 match 查询"></a>6.2.2 match 查询</h3><p>指定一个field 作为查询条件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#match 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"smsContent"</span>: <span class="string">"伟大战士"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchSearch</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"sms-logs-index"</span>;</span><br><span class="line">    String type=<span class="string">"sms-logs-type"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2.创建查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">        builder.query(QueryBuilders.matchQuery(<span class="string">"smsContent"</span>,<span class="string">"伟大战士"</span>));</span><br><span class="line">        <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">        builder.size(<span class="number">20</span>);</span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  3.执行查询</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.输出查询结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(response.getHits().getHits().length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-3-布尔match-查询"><a href="#6-2-3-布尔match-查询" class="headerlink" title="6.2.3 布尔match 查询"></a>6.2.3 布尔match 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于一个field 匹配的内容，按照 and 或者or的方式连接</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#布尔match查询 </span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"smsContent"</span>: &#123;</span><br><span class="line">         # 既包含 战士 也包含 团队</span><br><span class="line">        "query": "战士 团队",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#布尔match查询 </span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"smsContent"</span>: &#123;</span><br><span class="line">         # 既包含 战士 或者 团队</span><br><span class="line">        "query": "战士 团队",</span><br><span class="line">        "operator": "or"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">booleanMatchSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建request对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  2.创建查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">    builder.query(QueryBuilders.matchQuery(<span class="string">"smsContent"</span>,<span class="string">"战士 团队"</span>).operator(Operator.AND));</span><br><span class="line">    <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">    builder.size(<span class="number">20</span>);</span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  3.执行查询</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.输出查询结果</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(response.getHits().getHits().length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4-multi-match"><a href="#6-2-4-multi-match" class="headerlink" title="6.2.4 multi_match"></a>6.2.4 multi_match</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match 针对一个field 做检索，multi_math 针对多个field 进行检索，多个field对应一个文本。</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#multi_math 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"北京"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"province"</span>,<span class="string">"smsContent"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiMatchSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建request对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  2.创建查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">    builder.query(QueryBuilders.multiMatchQuery(<span class="string">"北京"</span>,<span class="string">"province"</span>,<span class="string">"smsContent"</span>));</span><br><span class="line">    <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">    builder.size(<span class="number">20</span>);</span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  3.执行查询</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.输出查询结果</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(response.getHits().getHits().length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-其他查询"><a href="#6-3-其他查询" class="headerlink" title="6.3 其他查询"></a>6.3 其他查询</h2><h3 id="6-3-1id-查询"><a href="#6-3-1id-查询" class="headerlink" title="6.3.1id 查询"></a>6.3.1id 查询</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#id 查询</span><br><span class="line">GET /sms-logs-index/sms-logs-type/1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdGetSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"sms-logs-index"</span>;</span><br><span class="line">    String type=<span class="string">"sms-logs-type"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建GetRequest对象</span></span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(index,type,<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  执行查询</span></span><br><span class="line">        GetResponse response = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(response.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-ids查询"><a href="#6-3-2-ids查询" class="headerlink" title="6.3.2 ids查询"></a>6.3.2 ids查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据多个id 查询,类似 mysql 中的 where in (id1,id2...)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#ids 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"ids"</span>: &#123;</span><br><span class="line">      <span class="attr">"values"</span>: [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">findByIds</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//  创建request对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//--------------------------------------------------</span></span><br><span class="line">    builder.query(QueryBuilders.idsQuery().addIds(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>));</span><br><span class="line">    <span class="comment">//------------------------------------------------------</span></span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-3-prefix-查询"><a href="#6-3-3-prefix-查询" class="headerlink" title="6.3.3 prefix 查询"></a>6.3.3 prefix 查询</h3><p>前缀查询，可以通过一个关键字去指定一个field 的前缀，从而查询到指定文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#prefix 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: &#123;</span><br><span class="line">      <span class="attr">"corpName"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"海"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#match 查询 在这里是什么都查不到的 和上边的prefix 做比较</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"corpName"</span>: <span class="string">"海"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">findByPrefix</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//  创建request对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//--------------------------------------------------</span></span><br><span class="line">    builder.query(QueryBuilders.prefixQuery(<span class="string">"corpName"</span>,<span class="string">"阿"</span>));</span><br><span class="line">    <span class="comment">//------------------------------------------------------</span></span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-4-fuzzy-查询"><a href="#6-3-4-fuzzy-查询" class="headerlink" title="6.3.4  fuzzy 查询"></a>6.3.4  fuzzy 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模糊查询，我们可以输入一个字符的大概，ES 可以根据输入的大概去匹配内容。查询结果不稳定</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#fuzzy 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"fuzzy"</span>: &#123;</span><br><span class="line">      <span class="attr">"corpName"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"腾讯客堂"</span>,</span><br><span class="line">          #指定前边几个字符是不允许出现错误的</span><br><span class="line">        "prefix_length": 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public  void findByFuzzy() throws IOException &#123;</span><br><span class="line">    <span class="comment">//  创建request对象</span></span><br><span class="line">    SearchRequest request = new SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = new SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//--------------------------------------------------</span></span><br><span class="line">    builder.query(QueryBuilders.fuzzyQuery("corpName","腾讯客堂").prefixLength(2));</span><br><span class="line">    <span class="comment">//------------------------------------------------------</span></span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    for (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-5-wildcard-查询"><a href="#6-3-5-wildcard-查询" class="headerlink" title="6.3.5 wildcard 查询"></a>6.3.5 wildcard 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通配查询，同mysql中的like 是一样的，可以在查询时，在字符串中指定通配符*和占位符？</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#wildcard 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"wildcard"</span>: &#123;</span><br><span class="line">      <span class="attr">"corpName"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"海尔*"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#wildcard 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"wildcard"</span>: &#123;</span><br><span class="line">      <span class="attr">"corpName"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"海尔??"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">findByWildCard</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//  创建request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  指定查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//--------------------------------------------------</span></span><br><span class="line">        builder.query(QueryBuilders.wildcardQuery(<span class="string">"corpName"</span>,<span class="string">"海尔*"</span>));</span><br><span class="line">        <span class="comment">//------------------------------------------------------</span></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-6-rang-查询"><a href="#6-3-6-rang-查询" class="headerlink" title="6.3.6 rang 查询"></a>6.3.6 rang 查询</h3><p>范围查询，只针对数值类型，对一个field 进行大于或者小于的范围指定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#rang 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"fee"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"lte"</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">findByRang</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//  创建request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  指定查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//--------------------------------------------------</span></span><br><span class="line">        builder.query(QueryBuilders.rangeQuery(<span class="string">"fee"</span>).gt(<span class="number">10</span>).lte(<span class="number">30</span>));</span><br><span class="line">        <span class="comment">//------------------------------------------------------</span></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>6.3.7  regexp 查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正则查询，通过你编写的正则表达式去匹配内容</span><br><span class="line">Ps:prefix wildcard  fuzzy 和regexp 查询效率比较低 ,在要求效率比较高时，避免使用</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#regexp 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"regexp"</span>: &#123;</span><br><span class="line">      <span class="attr">"mobile"</span>: <span class="string">"138[0-9]&#123;8&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">findByRegexp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//  创建request对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//--------------------------------------------------</span></span><br><span class="line">    builder.query(QueryBuilders.regexpQuery(<span class="string">"mobile"</span>,<span class="string">"138[0-9]&#123;8&#125;"</span>));</span><br><span class="line">    <span class="comment">//------------------------------------------------------</span></span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-深分页-scrol-l"><a href="#6-4-深分页-scrol-l" class="headerlink" title="6.4 深分页 scrol l"></a>6.4 深分页 scrol l</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ES 对from +size时又限制的，from +size 之和 不能大于1W,超过后 效率会十分低下</span><br><span class="line">原理：</span><br><span class="line">  from+size  ES查询数据的方式，</span><br><span class="line">  第一步将用户指定的关键词进行分词，</span><br><span class="line">  第二部将词汇去分词库中进行检索，得到多个文档id,</span><br><span class="line">  第三步去各个分片中拉去数据， 耗时相对较长</span><br><span class="line">  第四步根据score 将数据进行排序， 耗时相对较长</span><br><span class="line">  第五步根据from 和size 的值 将部分数据舍弃，</span><br><span class="line">  第六步，返回结果。</span><br><span class="line">  </span><br><span class="line">  scroll +size ES 查询数据的方式</span><br><span class="line">  第一步将用户指定的关键词进行分词，</span><br><span class="line">  第二部将词汇去分词库中进行检索，得到多个文档id,</span><br><span class="line">  第三步，将文档的id放在一个上下文中</span><br><span class="line">  第四步，根据指定的size去ES中检索指定个数数据，拿完数据的文档id,会从上下文中移除</span><br><span class="line">  第五步，如果需要下一页的数据，直接去ES的上下文中找后续内容。</span><br><span class="line">  第六步，循环第四步和第五步</span><br><span class="line">  scroll 不适合做实时查询。</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#scroll 查询,返回第一页数据，并将文档id信息存放在ES上下文中，并指定生存时间</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"fee"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#根据scroll 查询下一页数据</span><br><span class="line">POST _search/scroll</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scroll_id"</span>:<span class="string">"DnF1ZXJ5VGhlbkZldGNoAwAAAAAAABbqFk04VlZ1cjlUU2t1eHpsQWNRY1YwWWcAAAAAAAAW7BZNOFZWdXI5VFNrdXh6bEFjUWNWMFlnAAAAAAAAFusWTThWVnVyOVRTa3V4emxBY1FjVjBZZw=="</span>,</span><br><span class="line">  <span class="attr">"scroll"</span>:<span class="string">"1m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#删除scroll上下文中的数据</span><br><span class="line">DELETE _search/scroll/DnF1ZXJ5VGhlbkZldGNoAwAAAAAAABchFk04VlZ1cjlUU2t1eHpsQWNRY1YwWWcAAAAAAAAXIBZNOFZWdXI5VFNrdXh6bEFjUWNWMFlnAAAAAAAAFx8WTThWVnVyOVRTa3V4emxBY1FjVjBZZw==</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollSearch</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"sms-logs-index"</span>;</span><br><span class="line">    String type=<span class="string">"sms-logs-type"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建request</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        searchRequest.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2.指定scroll信息,过期时间</span></span><br><span class="line">        searchRequest.scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  3.指定查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.size(<span class="number">4</span>);</span><br><span class="line">        builder.sort(<span class="string">"fee"</span>, SortOrder.DESC);</span><br><span class="line">        searchRequest.source(builder);</span><br><span class="line">        <span class="comment">// 4.获取返回结果scrollId,获取source</span></span><br><span class="line">        SearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        String scrollId = response.getScrollId();</span><br><span class="line">        System.out.println(<span class="string">"-------------首页数据---------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 5.创建scroll request</span></span><br><span class="line"></span><br><span class="line">            SearchScrollRequest scrollRequest = <span class="keyword">new</span> SearchScrollRequest(scrollId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6.指定scroll 有效时间</span></span><br><span class="line">            scrollRequest.scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7.执行查询，返回查询结果</span></span><br><span class="line">            SearchResponse scroll = client.scroll(scrollRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8.判断是否查询到数据，查询到输出</span></span><br><span class="line">            SearchHit[] searchHits =  scroll.getHits().getHits();</span><br><span class="line">            <span class="keyword">if</span>(searchHits!=<span class="keyword">null</span> &amp;&amp; searchHits.length &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"-------------下一页数据---------------------"</span>);</span><br><span class="line">                <span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">                    System.out.println(hit.getSourceAsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//  9.没有数据，结束</span></span><br><span class="line">                System.out.println(<span class="string">"-------------结束---------------------"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 10.创建 clearScrollRequest</span></span><br><span class="line">        ClearScrollRequest clearScrollRequest = <span class="keyword">new</span> ClearScrollRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 11.指定scrollId</span></span><br><span class="line">        clearScrollRequest.addScrollId(scrollId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//12.删除scroll</span></span><br><span class="line">        ClearScrollResponse clearScrollResponse = client.clearScroll(clearScrollRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 13.输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"删除scroll:"</span>+clearScrollResponse.isSucceeded());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-5-delete-by-query"><a href="#6-5-delete-by-query" class="headerlink" title="6.5 delete-by-query"></a>6.5 delete-by-query</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据term,match 等查询方式去删除大量索引</span><br><span class="line">PS:如果你要删除的内容，时index下的大部分数据，推荐创建一个新的index,然后把保留的文档内容，添加到全新的索引</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Delet-by-query 删除</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"fee"</span>: &#123;</span><br><span class="line">        <span class="attr">"lt"</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建DeleteByQueryRequest</span></span><br><span class="line">    DeleteByQueryRequest request = <span class="keyword">new</span> DeleteByQueryRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.指定条件</span></span><br><span class="line">    request.setQuery(QueryBuilders.rangeQuery(<span class="string">"fee"</span>).lt(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.执行</span></span><br><span class="line">    BulkByScrollResponse response = client.deleteByQuery(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.输出返回结果</span></span><br><span class="line">    System.out.println(response.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-6-复合查询"><a href="#6-6-复合查询" class="headerlink" title="6.6 复合查询"></a>6.6 复合查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">复合过滤器，将你的多个查询条件 以一定的逻辑组合在一起，</span><br><span class="line"></span><br><span class="line">must:所有条件组合在一起，表示 and 的意思</span><br><span class="line">must_not: 将must_not中的条件，全部都不匹配，表示not的意思</span><br><span class="line">should:所有条件用should 组合在一起，表示or 的意思</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#省是 晋城 或者北京</span><br><span class="line"># 运营商不能是联通</span><br><span class="line">#smsContent 包含 战士 和的</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"province"</span>: &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="string">"晋城"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"province"</span>: &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="string">"北京"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"must_not"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"operatorId"</span>: &#123;</span><br><span class="line">              <span class="attr">"value"</span>: <span class="string">"2"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"smsContent"</span>: <span class="string">"战士"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"smsContent"</span>: <span class="string">"的"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">boolSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  1.创建 searchRequest</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        <span class="comment">// 2.指定查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = <span class="keyword">new</span> BoolQueryBuilder();</span><br><span class="line">        <span class="comment">// #省是 晋城 或者北京</span></span><br><span class="line">        boolQueryBuilder.should(QueryBuilders.termQuery(<span class="string">"province"</span>,<span class="string">"北京"</span>));</span><br><span class="line">        boolQueryBuilder.should(QueryBuilders.termQuery(<span class="string">"province"</span>,<span class="string">"晋城"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//# 运营商不能是联通</span></span><br><span class="line">        boolQueryBuilder.mustNot(QueryBuilders.termQuery(<span class="string">"operatorId"</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//#smsContent 包含 战士 和的</span></span><br><span class="line">        boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="string">"smsContent"</span>,<span class="string">"战士"</span>));</span><br><span class="line">        boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="string">"smsContent"</span>,<span class="string">"的"</span>));</span><br><span class="line"></span><br><span class="line">        builder.query(boolQueryBuilder);</span><br><span class="line">        request.source(builder);</span><br><span class="line">        <span class="comment">//  3.执行查询</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.输出结果</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="6-6-boosting-查询"><a href="#6-6-boosting-查询" class="headerlink" title="6.6  boosting 查询"></a>6.6  boosting 查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">boosting 查询可以帮助我们去影响查询后的score</span><br><span class="line">   positive:只有匹配上positive 查询的内容，才会被放到返回的结果集中</span><br><span class="line">   negative: 如果匹配上了positive 也匹配上了negative, 就可以 降低这样的文档score.</span><br><span class="line">   negative_boost:指定系数,必须小于1   0.5 </span><br><span class="line">关于查询时，分数时如何计算的：</span><br><span class="line">搜索的关键字再文档中出现的频次越高，分数越高</span><br><span class="line">指定的文档内容越短，分数越高。</span><br><span class="line">我们再搜索时，指定的关键字也会被分词，这个被分词的内容，被分词库匹配的个数越多，分数就越高。</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#boosting 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"boosting"</span>: &#123;</span><br><span class="line">      <span class="attr">"positive"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"smsContent"</span>: <span class="string">"战士"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      <span class="attr">"negative"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"smsContent"</span>: <span class="string">"团队"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"negative_boost"</span>: <span class="number">0.2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">boostSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  1.创建 searchRequest</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">// 2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    BoostingQueryBuilder boost = QueryBuilders.boostingQuery(</span><br><span class="line">            QueryBuilders.matchQuery(<span class="string">"smsContent"</span>, <span class="string">"战士"</span>),</span><br><span class="line">            QueryBuilders.matchQuery(<span class="string">"smsContent"</span>, <span class="string">"团队"</span>)</span><br><span class="line">    ).negativeBoost(<span class="number">0.2f</span>);</span><br><span class="line">    builder.query(boost);</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//  3.执行查询</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-7-filter-查询"><a href="#6-7-filter-查询" class="headerlink" title="6.7 filter  查询"></a>6.7 filter  查询</h2><p>query 查询：根据你的查询条件，去计算文档的匹配度得到一个分数，并根据分数排序，不会做缓存的。</p><p>filter 查询：根据查询条件去查询文档，不去计算分数，而且filter会对经常被过滤的数据进行缓存。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#filter 查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"corpName"</span>: <span class="string">"海尔智家公司"</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"range"</span>:&#123;</span><br><span class="line">            <span class="attr">"fee"</span>:&#123;</span><br><span class="line">              <span class="attr">"lte"</span>:<span class="number">50</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.searchRequest</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    searchRequest.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    BoolQueryBuilder boolBuilder = QueryBuilders.boolQuery();</span><br><span class="line">    boolBuilder.filter(QueryBuilders.termQuery(<span class="string">"corpName"</span>,<span class="string">"海尔智家公司"</span>));</span><br><span class="line">    boolBuilder.filter(QueryBuilders.rangeQuery(<span class="string">"fee"</span>).gt(<span class="number">20</span>));</span><br><span class="line">    sourceBuilder.query(boolBuilder);</span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  3.执行</span></span><br><span class="line">    SearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  4. 输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">        System.out.println(hit.getId()+<span class="string">"的分数是："</span>+hit.getScore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-8-高亮查询"><a href="#6-8-高亮查询" class="headerlink" title="6.8 高亮查询"></a>6.8 高亮查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">高亮查询就是用户输入的关键字，以一定特殊样式展示给用户，让用户知道为什么这个结果被检索出来</span><br><span class="line">高亮展示的数据，本身就是文档中的一个field,单独将field以highlight的形式返回给用户</span><br><span class="line">ES提供了一个highlight 属性，他和query 同级别。</span><br><span class="line"> frament_size: 指定高亮数据展示多少个字符回来</span><br><span class="line"> pre_tags:指定前缀标签&lt;front color=&quot;red&quot;&gt;</span><br><span class="line"> post_tags:指定后缀标签 &lt;/font&gt;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#highlight 高亮查询</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"smsContent"</span>: <span class="string">"团队"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"smsContent"</span>:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"pre_tags"</span>:<span class="string">"&lt;font color='red'&gt;"</span>,</span><br><span class="line">    <span class="attr">"post_tags"</span>:<span class="string">"&lt;/font&gt;"</span>,</span><br><span class="line">    <span class="attr">"fragment_size"</span>:<span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">highLightQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="comment">// 1.创建request</span></span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">       request.types(type);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.指定查询条件，指定高亮</span></span><br><span class="line">       SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       builder.query(QueryBuilders.matchQuery(<span class="string">"smsContent"</span>,<span class="string">"团队"</span>));</span><br><span class="line">       HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">       highlightBuilder.field(<span class="string">"smsContent"</span>,<span class="number">10</span>)</span><br><span class="line">               .preTags(<span class="string">"&lt;font colr='red'&gt;"</span>)</span><br><span class="line">               .postTags(<span class="string">"&lt;/font&gt;"</span>);</span><br><span class="line">       builder.highlighter(highlightBuilder);</span><br><span class="line">       request.source(builder);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 3.执行</span></span><br><span class="line">       SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4. 输出结果</span></span><br><span class="line">       <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">           System.out.println(hit.getHighlightFields().get(<span class="string">"smsContent"</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="6-9-聚合查询"><a href="#6-9-聚合查询" class="headerlink" title="6.9 聚合查询"></a>6.9 聚合查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES的聚合查询和mysql 的聚合查询类似，ES的聚合查询相比mysql 要强大得多。ES提供的统计数据的方式多种多样。</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#ES 聚合查询的RSTFul 语法</span><br><span class="line">POST /index/type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">        <span class="attr">"(名字)agg"</span>:&#123;</span><br><span class="line">            <span class="attr">"agg_type"</span>:&#123;</span><br><span class="line">                "属性"："值"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-1-去重计数聚合查询"><a href="#6-9-1-去重计数聚合查询" class="headerlink" title="6.9.1 去重计数聚合查询"></a>6.9.1 去重计数聚合查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">去重计数，cardinality 先将返回的文档中的一个指定的field进行去重，统计一共有多少条</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 去重计数 查询 province</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"provinceAgg"</span>: &#123;</span><br><span class="line">      <span class="attr">"cardinality"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"province"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aggCardinalityC</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 指定使用聚合查询方式</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.aggregation(AggregationBuilders.cardinality(<span class="string">"provinceAgg"</span>).field(<span class="string">"province"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.执行查询</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.输出返回结果</span></span><br><span class="line">    Cardinality agg = response.getAggregations().get(<span class="string">"provinceAgg"</span>);</span><br><span class="line">    System.out.println(agg.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-2-范围统计"><a href="#6-9-2-范围统计" class="headerlink" title="6.9.2 范围统计"></a>6.9.2 范围统计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">统计一定范围内出现的文档个数，比如，针对某一个field 的值再0~100,100~200,200~300 之间文档出现的个数分别是多少</span><br><span class="line">范围统计 可以针对 普通的数值，针对时间类型，针对ip类型都可以响应。</span><br><span class="line">数值 rang    </span><br><span class="line">时间  date_rang     </span><br><span class="line">ip   ip_rang</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#针对数值方式的范围统计  from 带等于效果 ，to 不带等于效果</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"agg"</span>: &#123;</span><br><span class="line">      <span class="attr">"range"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"fee"</span>,</span><br><span class="line">        <span class="attr">"ranges"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"to"</span>: <span class="number">30</span></span><br><span class="line">          &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="attr">"to"</span>: <span class="number">60</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="number">60</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#时间方式统计</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"agg"</span>: &#123;</span><br><span class="line">      <span class="attr">"date_range"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"sendDate"</span>,</span><br><span class="line">        <span class="attr">"format"</span>: <span class="string">"yyyy"</span>, </span><br><span class="line">        <span class="attr">"ranges"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"to"</span>: <span class="string">"2000"</span></span><br><span class="line">          &#125;,&#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="string">"2000"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#ip 方式 范围统计</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"agg"</span>: &#123;</span><br><span class="line">      <span class="attr">"ip_range"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"ipAddr"</span>,</span><br><span class="line">        <span class="attr">"ranges"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"to"</span>: <span class="string">"127.0.0.8"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"from"</span>: <span class="string">"127.0.0.8"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aggRang</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 1.创建request</span></span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">       request.types(type);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 指定使用聚合查询方式</span></span><br><span class="line">       SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       builder.aggregation(AggregationBuilders.range(<span class="string">"agg"</span>).field(<span class="string">"fee"</span>)</span><br><span class="line">                           .addUnboundedTo(<span class="number">30</span>)</span><br><span class="line">                           .addRange(<span class="number">30</span>,<span class="number">60</span>)</span><br><span class="line">                           .addUnboundedFrom(<span class="number">60</span>));</span><br><span class="line">       request.source(builder);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3.执行查询</span></span><br><span class="line">       SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 4.输出返回结果</span></span><br><span class="line">       Range agg = response.getAggregations().get(<span class="string">"agg"</span>);</span><br><span class="line">       <span class="keyword">for</span> (Range.Bucket bucket : agg.getBuckets()) &#123;</span><br><span class="line">           String key = bucket.getKeyAsString();</span><br><span class="line">           Object from = bucket.getFrom();</span><br><span class="line">           Object to = bucket.getTo();</span><br><span class="line">           <span class="keyword">long</span> docCount = bucket.getDocCount();</span><br><span class="line">           System.out.println(String.format(<span class="string">"key: %s ,from: %s ,to: %s ,docCount: %s"</span>,key,from,to,docCount));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-3-统计聚合"><a href="#6-9-3-统计聚合" class="headerlink" title="6.9.3 统计聚合"></a>6.9.3 统计聚合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">他可以帮你查询指定field 的最大值，最小值，平均值，平方和...</span><br><span class="line">使用 extended_stats</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#统计聚合查询 extended_stats</span><br><span class="line">POST /sms-logs-index/sms-logs-type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"agg"</span>: &#123;</span><br><span class="line">      <span class="attr">"extended_stats"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"fee"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java实现   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aggExtendedStats</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 指定使用聚合查询方式</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.aggregation(AggregationBuilders.extendedStats(<span class="string">"agg"</span>).field(<span class="string">"fee"</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.执行查询</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.输出返回结果</span></span><br><span class="line">       ExtendedStats extendedStats =  response.getAggregations().get(<span class="string">"agg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"最大值："</span>+extendedStats.getMaxAsString()+<span class="string">",最小值："</span>+extendedStats.getMinAsString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-4-其他聚合查询-查看官方文档"><a href="#6-9-4-其他聚合查询-查看官方文档" class="headerlink" title="6.9.4  其他聚合查询 查看官方文档"></a>6.9.4  其他聚合查询 查看官方文档</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/search-aggregations-metrics-weight-avg-aggregation.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.8/search-aggregations-metrics-weight-avg-aggregation.html</a></p><h2 id="6-10-地图经纬度搜索"><a href="#6-10-地图经纬度搜索" class="headerlink" title="6.10 地图经纬度搜索"></a>6.10 地图经纬度搜索</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#创建一个经纬度索引,指定一个 name ,一个location</span><br><span class="line">PUT /map</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"map"</span>:&#123;</span><br><span class="line">      <span class="attr">"properties"</span>:&#123;</span><br><span class="line">        <span class="attr">"name"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"location"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"geo_point"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#添加测试数据</span><br><span class="line">PUT /map/map/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"天安门"</span>,</span><br><span class="line">  <span class="attr">"location"</span>:&#123;</span><br><span class="line">    <span class="attr">"lon"</span>: <span class="number">116.403694</span>,</span><br><span class="line">    <span class="attr">"lat"</span>:<span class="number">39.914492</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /map/map/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"百望山"</span>,</span><br><span class="line">  <span class="attr">"location"</span>:&#123;</span><br><span class="line">    <span class="attr">"lon"</span>: <span class="number">116.26284</span>,</span><br><span class="line">    <span class="attr">"lat"</span>:<span class="number">40.036576</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /map/map/3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"北京动物园"</span>,</span><br><span class="line">  <span class="attr">"location"</span>:&#123;</span><br><span class="line">    <span class="attr">"lon"</span>: <span class="number">116.347352</span>,</span><br><span class="line">    <span class="attr">"lat"</span>:<span class="number">39.947468</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-10-1-ES-的地图检索方式"><a href="#6-10-1-ES-的地图检索方式" class="headerlink" title="6.10.1 ES 的地图检索方式"></a>6.10.1 ES 的地图检索方式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geo_distance :直线距离检索方式</span><br><span class="line">geo_bounding_box: 以2个点确定一个矩形，获取再矩形内的数据</span><br><span class="line">geo_polygon:以多个点，确定一个多边形，获取多边形的全部数据</span><br></pre></td></tr></table></figure><h3 id="6-10-2-基于RESTFul-实现地图检索"><a href="#6-10-2-基于RESTFul-实现地图检索" class="headerlink" title="6.10.2 基于RESTFul 实现地图检索"></a>6.10.2 基于RESTFul 实现地图检索</h3><p>geo_distance</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#geo_distance </span><br><span class="line">POST /map/map/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"geo_distance"</span>:&#123;</span><br><span class="line">        #确定一个点</span><br><span class="line">      "location":&#123;</span><br><span class="line">        "lon":116.434739,</span><br><span class="line">        "lat":39.909843</span><br><span class="line">      &#125;,</span><br><span class="line">      #确定半径</span><br><span class="line">      "distance":20000,</span><br><span class="line">      #指定形状为圆形</span><br><span class="line">      "distance_type":"arc"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#geo_bounding_box</span><br><span class="line">POST /map/map/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"geo_bounding_box"</span>:&#123;</span><br><span class="line">      <span class="attr">"location"</span>:&#123;</span><br><span class="line">        <span class="attr">"top_left"</span>:&#123;</span><br><span class="line">          <span class="attr">"lon"</span>:<span class="number">116.327805</span>,</span><br><span class="line">          <span class="attr">"lat"</span>:<span class="number">39.95499</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"bottom_right"</span>:&#123;</span><br><span class="line">          <span class="attr">"lon"</span>: <span class="number">116.363162</span>,</span><br><span class="line">          <span class="attr">"lat"</span>:<span class="number">39.938395</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#geo_polygon</span><br><span class="line">POST /map/map/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"geo_polygon"</span>:&#123;</span><br><span class="line">      <span class="attr">"location"</span>:&#123;</span><br><span class="line">          # 指定多个点确定 位置</span><br><span class="line">       "points":[</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">"lon"</span>:<span class="number">116.220296</span>,</span><br><span class="line">           <span class="attr">"lat"</span>:<span class="number">40.075013</span></span><br><span class="line">         &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">           <span class="attr">"lon"</span>:<span class="number">116.346777</span>,</span><br><span class="line">           <span class="attr">"lat"</span>:<span class="number">40.044751</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">"lon"</span>:<span class="number">116.236106</span>,</span><br><span class="line">           <span class="attr">"lat"</span>:<span class="number">39.981533</span></span><br><span class="line">         &#125; </span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-10-3-java-实现-geo-polygon"><a href="#6-10-3-java-实现-geo-polygon" class="headerlink" title="6.10.3  java 实现 geo_polygon"></a>6.10.3  java 实现 geo_polygon</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeoDemo</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"map"</span>;</span><br><span class="line">    String type=<span class="string">"map"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">GeoPolygon</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">//  1.创建searchRequest</span></span><br><span class="line">            SearchRequest request  = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">            request.types(type);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  2.指定 检索方式</span></span><br><span class="line"></span><br><span class="line">            SearchSourceBuilder builder =  <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">            List&lt;GeoPoint&gt; points = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            points.add(<span class="keyword">new</span> GeoPoint(<span class="number">40.075013</span>,<span class="number">116.220296</span>));</span><br><span class="line">            points.add(<span class="keyword">new</span> GeoPoint(<span class="number">40.044751</span>,<span class="number">116.346777</span>));</span><br><span class="line">            points.add(<span class="keyword">new</span> GeoPoint(<span class="number">39.981533</span>,<span class="number">116.236106</span>));</span><br><span class="line">            builder.query(QueryBuilders.geoPolygonQuery(<span class="string">"location"</span>,points));</span><br><span class="line">            request.source(builder);</span><br><span class="line">            <span class="comment">// 3.执行</span></span><br><span class="line">            SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="comment">// 4.输出结果</span></span><br><span class="line">            <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">                System.out.println(hit.getSourceAsMap());</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-ES简介&quot;&gt;&lt;a href=&quot;#1-ES简介&quot; class=&quot;headerlink&quot; title=&quot;1 ES简介&quot;&gt;&lt;/a&gt;1 ES简介&lt;/h1&gt;&lt;p&gt;ES是使用java 语言并且基于lucence编写的搜索引擎框架，他提供了分布式的全文搜索功能，提供了一个统
      
    
    </summary>
    
    
      <category term="information retrieval" scheme="http://yoursite.com/categories/information-retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>Rank For Expert Retrieval</title>
    <link href="http://yoursite.com/2020/07/12/rank/"/>
    <id>http://yoursite.com/2020/07/12/rank/</id>
    <published>2020-07-12T13:44:15.000Z</published>
    <updated>2020-07-13T05:15:51.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h3><ul><li><strong>P@notic Model</strong><br>  以作者为中心, 将作者所有的文本汇集(mate-document),并且向量化(vec-mate), 通过query与vec-mate的相似度来排序.进而获取专家排序.  - 简单但是准确度低.</li><li><p><strong>Voting Model</strong><br>  以文档为中心, 首先计算出query与document的相似度.并排序.</p><script type="math/tex; mode=display">\text {RRFscore}(d)=\sum_{i} \frac{1}{k+r_{i}(d)}, \quad k=0 \text { (for this example)}</script><p>  $r_i$ the rank of i,比如 候选作者是排名第2,3,7的文档的作者, 则他的得分为<br>  <script type="math/tex">\frac{1}{2} + \frac{1}{3} +\frac{1}{7} = 0.976</script>.将相关作者得分排序的到结果.<br>  将最相关的文档的作者,和作者的文章数量都考虑到了.<br>  其他技术:</p><pre><code>  Comb*:综合各个方式结果.</code></pre></li><li><p><strong>Propagation Model</strong><br>  传播模型是基于图的方式.因为文档与作者之间天然就是一个二分图. :<br>  采用随机游走的方式,让图收敛.<br>目前来看的话, 投票模型的效果是最好的. </p></li></ul><p><strong>Modeling Multi-step Relevance Propagation for Expert Finding</strong></p><ol><li>不仅仅将专家文本的内容作为专家线索, 并且将其相连或者间接相连的文章作为证据. </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Rank&quot;&gt;&lt;a href=&quot;#Rank&quot; class=&quot;headerlink&quot; title=&quot;Rank&quot;&gt;&lt;/a&gt;Rank&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;P@notic Model&lt;/strong&gt;&lt;br&gt;  以作者为中心, 将作者所有的文本汇集(m
      
    
    </summary>
    
    
      <category term="information retrieval" scheme="http://yoursite.com/categories/information-retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>检索系统的评价</title>
    <link href="http://yoursite.com/2020/07/12/Evaluation/"/>
    <id>http://yoursite.com/2020/07/12/Evaluation/</id>
    <published>2020-07-12T13:42:15.000Z</published>
    <updated>2020-07-12T14:57:15.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="检索系统的评价"><a href="#检索系统的评价" class="headerlink" title="检索系统的评价"></a>检索系统的评价</h1><h3 id="无序的检索结果评价"><a href="#无序的检索结果评价" class="headerlink" title="无序的检索结果评价."></a>无序的检索结果评价.</h3><p>如果有测试集的话,那么系统效果常用的两个基本指标就是正确率和召回率.不考虑结果的顺序的话.那就和分类的评价差不多.</p><ul><li>正确率:返回与query相关文档所占比例;</li></ul><script type="math/tex; mode=display">Precision = \frac{\text { 返同结果中相关文档的数目 }}{\text { 返同结果的数目 }}=P(\text { relevant } \mid \text { retrieved })</script><ul><li>召回率:返回相关文档所占所有相关文档的比例;</li></ul><script type="math/tex; mode=display">Recall =\frac{\text { 返同结果中相关文档的数目 }}{\text { 所有相关文档的数目 }}=P(\text { retrieved } \mid \text { relevant })</script><div class="table-container"><table><thead><tr><th></th><th>相关(relevant)</th><th>不相关(nonrelevant)</th></tr></thead><tbody><tr><td>retrieved</td><td>true positives(tp)</td><td>false positives(fp)</td></tr><tr><td>not retrieved</td><td>false negatives(fn)</td><td>true negatives(tn)</td></tr></tbody></table></div><p>则有:</p><script type="math/tex; mode=display">\begin{array}{l}P=t p /(t p+f p) \\R=t p /(t p+f n)\end{array}</script><p>在这有个问题就是精确度(accuracy)对于信息检索不是一个很好的指标, 因为信息检索中数据极度不平衡.通常99.99%以上都是不相关文档. 全判定为不相关精确度都很高.<br>采用正确率() 和 召回率() 两个指标的有个有点,他能根据场景不同来确定指标的重要性.<br>如果两种都需要,直觉来看就是平均值, 这就出现了一个新的指标 F</p><script type="math/tex; mode=display">F=\frac{1}{\alpha \frac{1}{P}+(1-\alpha) \frac{1}{R}}=\frac{\left(\beta^{2}+1\right) P R}{\beta^{2} P+R}</script><p>其中, $\beta^{2} = \frac{1 - \alpha}{\alpha} , \alpha \in [0, 1]$,</p><h3 id="有序检索结果的评价方法"><a href="#有序检索结果的评价方法" class="headerlink" title="有序检索结果的评价方法"></a>有序检索结果的评价方法</h3><p>正确率、召回率和F值都是基于集合的评价方法,它们都利用无序的文档集合进行计算.所以需要其他的评价方式.<br>在结果有序的情况下，通常很自然地会将前面k个（k=1,2,…）检索结果组成合适的返回文档子集。对每个这样的集合，都可以得到正确率和召回率，分别以它们作为纵坐标和横<br>坐标在平面上描点并连接便可以得到所示的正确率—召回率曲线<br><img src="20200711110949009_8654.png" alt="png"><br>在某个召回率水平r上的插值正确率（interpolated precision，记为pinterp）定义为对于任意不小于r的召回率水平r′ 所对应的最大正确率，即</p><script type="math/tex; mode=display">p_{\text {interp }}(r)=\max _{r^{\prime} \mathrm{H} r} p\left(r^{\prime}\right)</script><p>根据插值正确率.画出插值正确率—召回率平均曲线<br><img src="20200711111350026_26373.png" alt="png"></p><ul><li>MAP(mean average precision)平均正确率值列表.<br>形式化地，假定信息需求qj∈Q对应的所有相关文档集合<br>为${d<em>1, . . . d</em>{mj}}，R_{jk}$是返回结果中直到遇见$d_k$后其所在位置前（含$d_k$）的所有文档集合，则有</li></ul><script type="math/tex; mode=display">\operatorname{MAP}(Q)=\frac{1}{|Q|} \sum_{j=1}^{|Q|} \frac{1}{m_{j}} \sum_{k=1}^{m_{j}} \operatorname{Prcision}\left(R_{j k}\right)</script><p>如果某篇相关文档未返回，那么上式中其对应的正确率值为0。对于单个信息需求来说，平均正确率是未插值的正确率—召回率曲线下面的面积的近似值，因此，MAP可以粗略地认为是某个查询集合对应的多条正确率—召回率曲线下面积的平均值<br><img src="20200711141728462_15451.png" alt="png"><br><a href="https://blog.csdn.net/leviopku/article/details/80835929" target="_blank" rel="noopener">MAP参考</a></p><ul><li><p>P@k, 在上述基础上,只计算前K个结果的正确率, 该指标的优点九十一不需要计算相关文档的集合数目, 缺点是不稳定, 因为相关文档的总数会对P@k有非常强的影响.</p></li><li><p>R-precision</p></li><li>ROC</li><li>NDCG</li></ul><p>CG表示将每个结果相关性的分值累加后作为整个列表的得分</p><script type="math/tex; mode=display">C G_{k}=\sum_{i=1}^{k} r e l_{i}$$此时没有考虑顺序.$$DCG_k = \sum_{i = 1}^{k} \frac{2^{rel_i} - 1}{log_2(i + 1)}</script><p>同指标P@k一样，它基于前k个检索结果进行计算。设$R(j,d)$是评价人员给出的文档d对查询 j 的相关性得分，那么有</p><script type="math/tex; mode=display">\operatorname{NDCG}(Q, k)=\frac{1}{|Q|} \sum_{j=1}^{|Q|} Z_{j, k} \sum_{m=1}^{k} \frac{2^{R(j, m)}-1}{\log (1+m)}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;检索系统的评价&quot;&gt;&lt;a href=&quot;#检索系统的评价&quot; class=&quot;headerlink&quot; title=&quot;检索系统的评价&quot;&gt;&lt;/a&gt;检索系统的评价&lt;/h1&gt;&lt;h3 id=&quot;无序的检索结果评价&quot;&gt;&lt;a href=&quot;#无序的检索结果评价&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="information retrieval" scheme="http://yoursite.com/categories/information-retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>Learn to rank</title>
    <link href="http://yoursite.com/2020/07/12/Learn2Rank/"/>
    <id>http://yoursite.com/2020/07/12/Learn2Rank/</id>
    <published>2020-07-12T06:56:15.000Z</published>
    <updated>2020-07-12T07:06:43.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Learn-to-rank"><a href="#Learn-to-rank" class="headerlink" title="Learn to rank"></a>Learn to rank</h1><p>在信息检索中, 检索rank可以由多种算法获得, 或者是检索的结果还可以受外部信息所影响.将这些信息融合起来排名可能会获得更好的排序结果.<br>如:<br><img src="20200711163650350_6358.png" alt="png"><br>我们可以看到有不同的排序结果.将这多组数据进行在排序.在这 我们将得分 以$s_i(d)$表示, $i$ 为rank. d- document, $r_i(d)$</p><h3 id="无监督的reranking方法"><a href="#无监督的reranking方法" class="headerlink" title="无监督的reranking方法"></a>无监督的reranking方法</h3><h4 id="Score-based-methods"><a href="#Score-based-methods" class="headerlink" title="Score-based methods"></a>Score-based methods</h4><ul><li><p>Comb*</p><script type="math/tex; mode=display">CombMAX(d) = max\{s_0(d), ...,s_n(d)\}</script><script type="math/tex; mode=display">CombMIN(d) = min\{s_0(d), ...,s_n(d)\}</script><script type="math/tex; mode=display">CombSUM(d) = \sum_i(s_i(d))</script><script type="math/tex; mode=display">\operatorname{CombMNZ}(d)=\left|\left\{i \mid d \in \operatorname{Rank}_{i}\right\}\right| \cdot \sum_{i} s_{i}(d)</script><p>  CombSUM 例子:<br>  <img src="20200711165912563_19363.png" alt="png"><br>  我们也可以将数据归一化之后再进行SUM操作.</p><script type="math/tex; mode=display">\frac {score - u} {\alpha}</script><p>  直接Comb的方式过于简单,我们很容易想到将不同的rank赋予不同的权重.</p><script type="math/tex; mode=display">\operatorname{wCombSUM}(d)=\sum_{i} w_{i} s_{i}(d)</script><script type="math/tex; mode=display">\operatorname{wComb} M N Z(d)=\left|\left\{i \mid d \in \operatorname{Rank}_{i}\right\}\right| \cdot \operatorname{w} \operatorname{CombSUM}(d)</script></li></ul><p>那么如何来确定这些权重呢.?</p><ol><li>我们凭借经验手动设置</li><li>通过机器学习的方式.<h4 id="Rank-based-融合"><a href="#Rank-based-融合" class="headerlink" title="Rank-based 融合"></a>Rank-based 融合</h4></li></ol><ul><li><p>Bordafuse</p><p> 混合排名将每种排名分数加起来. 即就纯粹根据各种算法的排名来打分.如图:<br> <img src="20200711171554979_372.png" alt="png"></p></li><li>Condorect<br>根据各种算法战胜其他算法的次数进行排名.<br><img src="20200712082852047_29522.png" alt="png"><br><img src="20200712083012487_27249.png" alt="png">   </li><li><p>Reciprocal Rank Fusion(RRF)<br>根据排名的倒数作为其文档的权重.</p><script type="math/tex; mode=display">RRFscore(d) = \sum_i \frac{1}{k + r_i{d}}</script><p>k 作为参数可以调节.<br><img src="20200712083312233_23519.png" alt="png"></p><h4 id="Learning-to-Rank"><a href="#Learning-to-Rank" class="headerlink" title="Learning to Rank"></a>Learning to Rank</h4><p><img src="20200712084032594_18408.png" alt="png"><br>使用机器学习的方式自动学习到如何rank.</p></li><li><p>逐点的方式.<br>  对相关分数进行回归，将文档分类为“相关”和“非相关”<br>  以$(q, d, r)$ 三元数据集合进行训练.出模型.通过$q,d$ 预测 $s$</p></li><li>逐对的方式.<br>  给定两个文档，预测部分排名<br>  通过预测部分排名来查找全局的顺序:<br>  <img src="20200712084724596_13505.png" alt="png"></li><li>逐列的方式.<br>  给出两个相同项目的排名列表，哪个更好.<ul><li>考虑许多排名特征.</li><li>排名模型是加权线性模型.</li><li>线性模型优化最终排名的顺序.<script type="math/tex; mode=display">ReRanker(d)=w_{1} s_{1}(d)+w_{2} s_{2}(d)+\ldots+w_{n} s_{n}(d)</script><img src="20200712085133960_17800.png" alt="png"></li></ul></li></ul><ul><li>参考 · André Mourão, João Magalhães</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Learn-to-rank&quot;&gt;&lt;a href=&quot;#Learn-to-rank&quot; class=&quot;headerlink&quot; title=&quot;Learn to rank&quot;&gt;&lt;/a&gt;Learn to rank&lt;/h1&gt;&lt;p&gt;在信息检索中, 检索rank可以由多种算法获得, 或
      
    
    </summary>
    
    
      <category term="information retrieval" scheme="http://yoursite.com/categories/information-retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOs Poxy</title>
    <link href="http://yoursite.com/2020/02/26/CentOsPoxy/"/>
    <id>http://yoursite.com/2020/02/26/CentOsPoxy/</id>
    <published>2020-02-26T06:57:15.000Z</published>
    <updated>2020-02-26T07:14:20.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOs-Poxy"><a href="#CentOs-Poxy" class="headerlink" title="CentOs Poxy"></a>CentOs Poxy</h1><p>使用vmware 装了个centos. 但是需要Google. 本机已经使用ssr.可以访问.</p><ol><li>首先将vm网络设置为桥接</li></ol><p>虚拟机- 设置<br><img src="20200226113957464_28044.png" alt="png"></p><p>2.将本机ssr设置为<br>帮助 - 选项设置<br><img src="20200226114136407_25977.png" alt="png"></p><p>3.打开虚拟机器设置网络代理<br>System - Preference - Network Proxy<br>此处设置的ip地址为宿主机的ip<br><img src="20200226114649104_4762.png" alt="png"></p><p>4.ok测试<br><img src="20200226114819288_15728.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CentOs-Poxy&quot;&gt;&lt;a href=&quot;#CentOs-Poxy&quot; class=&quot;headerlink&quot; title=&quot;CentOs Poxy&quot;&gt;&lt;/a&gt;CentOs Poxy&lt;/h1&gt;&lt;p&gt;使用vmware 装了个centos. 但是需要Google. 本机
      
    
    </summary>
    
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
  </entry>
  
  <entry>
    <title>STDP手写数字识别</title>
    <link href="http://yoursite.com/2019/11/09/eth_mnist/"/>
    <id>http://yoursite.com/2019/11/09/eth_mnist/</id>
    <published>2019-11-09T08:40:15.000Z</published>
    <updated>2019-11-13T00:51:22.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="STDP手写数字识别"><a href="#STDP手写数字识别" class="headerlink" title="STDP手写数字识别"></a>STDP手写数字识别</h3><p><img src="mnist.png" alt="image.png"></p><p>数字识别的SNN，其基于具有更高生物似然性的机制，即基于电导而不是基于电流的突触，具有随时间变化的体重变化，横向抑制和自适应峰值阈值的基于脉冲时序的可塑性(STDP)<br>采用无监督的学习方式。</p><p><a href="https://pypi.org/project/bindsnet/" target="_blank" rel="noopener">bindsnet</a> 一个Python软件包，用于使用PyTorch Tensor功能在CPU或GPU上模拟脉冲神经网络（SNN）</p><ol><li><p>首先在github上将项目搂下来。<a href="https://gitlab.com/aiCTX/sinabs" target="_blank" rel="noopener">sinabs</a></p></li><li><p>进入项目根目录（有setup.py）进行本地pip安装 ：  pip install -e<br>bindsnet已经帮助我们以及把脉冲编码，神经元模型等定义好了，方便极了。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bindsnet.encoding <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> bindsnet.datasets <span class="keyword">import</span> MNIST</span><br><span class="line"><span class="keyword">from</span> bindsnet.encoding <span class="keyword">import</span> PoissonEncoder</span><br><span class="line"><span class="keyword">from</span> bindsnet.models <span class="keyword">import</span> DiehlAndCook2015</span><br><span class="line"><span class="keyword">from</span> bindsnet.network.monitors <span class="keyword">import</span> Monitor</span><br><span class="line"><span class="keyword">from</span> bindsnet.utils <span class="keyword">import</span> get_square_weights, get_square_assignments</span><br><span class="line"><span class="keyword">from</span> bindsnet.evaluation <span class="keyword">import</span> all_activity, proportion_weighting, assign_labels</span><br><span class="line"><span class="keyword">from</span> bindsnet.analysis.plotting <span class="keyword">import</span> (</span><br><span class="line">    plot_input,</span><br><span class="line">    plot_spikes,</span><br><span class="line">    plot_weights,</span><br><span class="line">    plot_assignments,</span><br><span class="line">    plot_performance,</span><br><span class="line">    plot_voltages,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  all_activity spikes(n_samples, time, n_neurons)</span></span><br><span class="line">n_neurons = <span class="number">100</span> <span class="comment"># 神经元个数</span></span><br><span class="line">step = <span class="number">1.0</span> <span class="comment"># 步长 z  即以时间驱动模拟策略（未验证）</span></span><br><span class="line">time = <span class="number">250</span> <span class="comment"># 模拟周期</span></span><br><span class="line">update_interval = <span class="number">250</span>  <span class="comment"># time / step</span></span><br><span class="line">spike_record = torch.zeros(update_interval, time, <span class="number">100</span>) <span class="comment"># 记录脉冲数据</span></span><br></pre></td></tr></table></figure><h4 id="构建网络"><a href="#构建网络" class="headerlink" title="构建网络"></a>构建网络</h4><p>使用binsnet中 diehl&amp;Cook模型,我们暂时不用去关心模型的细节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">network = DiehlAndCook2015(</span><br><span class="line">    n_inpt = <span class="number">28</span> * <span class="number">28</span>,</span><br><span class="line">    n_neurons = n_neurons,</span><br><span class="line">    exc = <span class="number">22.5</span>,                        <span class="comment"># 表示从兴奋 到 抑制的突触强度</span></span><br><span class="line">    inh = <span class="number">120</span>,                         <span class="comment"># 表示从抑制 到 兴奋的突出强度</span></span><br><span class="line">    dt = step,                          <span class="comment"># 模拟时间步长</span></span><br><span class="line">    norm = <span class="number">78.4</span>,                       <span class="comment"># 输入层到兴奋层连接权归一化常数。</span></span><br><span class="line">    theta_plus = <span class="number">0.05</span>,                 </span><br><span class="line">    inpt_shape = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network</span><br></pre></td></tr></table></figure><pre><code>DiehlAndCook2015(  (X): Input()  (Ae): DiehlAndCookNodes()  (Ai): LIFNodes()  (X_to_Ae): Connection(    (source): Input()    (target): DiehlAndCookNodes()  )  (Ae_to_Ai): Connection(    (source): DiehlAndCookNodes()    (target): LIFNodes()  )  (Ai_to_Ae): Connection(    (source): LIFNodes()    (target): DiehlAndCookNodes()  ))</code></pre><h4 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h4><p>通过Bindsnet封装的数据集， 可以直接调用，将数据进行脉冲编码。<br>Possion编码是一个频率编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_poisson</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">100</span>]:  <span class="comment"># number of nodes in layer</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> [<span class="number">1000</span>]:  <span class="comment"># number of timesteps</span></span><br><span class="line">            datum = torch.empty(n).uniform_(<span class="number">20</span>, <span class="number">100</span>)  <span class="comment"># Generate firing rates.</span></span><br><span class="line">            spikes = poisson(datum, time=t)  <span class="comment"># Encode as spikes.</span></span><br><span class="line">            <span class="keyword">assert</span> spikes.size() == torch.Size((t, n))</span><br><span class="line">            <span class="keyword">return</span> spikes</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spikes = test_poisson()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dataset = MNIST(</span><br><span class="line">    PoissonEncoder(time=time, dt=step),<span class="comment"># time 每个输入变量的泊松脉冲序列的长度。</span></span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">    root=os.path.join(<span class="string">"data"</span>, <span class="string">"MNIST"</span>),  <span class="comment"># 数据路径</span></span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(), transforms.Lambda(<span class="keyword">lambda</span> x: x * <span class="number">128</span>)]</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset</span><br></pre></td></tr></table></figure><pre><code>Dataset TorchvisionDatasetWrapper    Number of datapoints: 60000    Root location: data\MNIST    Split: Train    StandardTransformTransform: Compose(               ToTensor()               Lambda()           )</code></pre><h4 id="使用Monitor来记录-exc-和-inh层-voltage"><a href="#使用Monitor来记录-exc-和-inh层-voltage" class="headerlink" title="使用Monitor来记录 exc 和 inh层 voltage"></a>使用Monitor来记录 exc 和 inh层 voltage</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exc_voltage_monitor = Monitor(network.layers[<span class="string">"Ae"</span>], [<span class="string">"v"</span>], time=time)</span><br><span class="line">inh_voltage_monitor = Monitor(network.layers[<span class="string">"Ai"</span>], [<span class="string">"v"</span>], time=time)</span><br><span class="line">network.add_monitor(exc_voltage_monitor, name=<span class="string">"exc_voltage"</span>)</span><br><span class="line">network.add_monitor(inh_voltage_monitor, name=<span class="string">"inh_voltage"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听脉冲，以及电压值</span></span><br><span class="line">spikes = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> set(network.layers):</span><br><span class="line">    <span class="comment">##print(layer)</span></span><br><span class="line">    spikes[layer] = Monitor(network.layers[layer], state_vars=[<span class="string">"s"</span>], time=time)</span><br><span class="line">    network.add_monitor(spikes[layer], name=<span class="string">"%s_spikes"</span> % layer)</span><br><span class="line"><span class="comment">#print("====")</span></span><br><span class="line">voltages = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> set(network.layers) - &#123;<span class="string">"X"</span>&#125;:</span><br><span class="line">    <span class="comment">#print(layer)</span></span><br><span class="line">    voltages[layer] = Monitor(network.layers[layer], state_vars=[<span class="string">"v"</span>], time=time)</span><br><span class="line">    network.add_monitor(voltages[layer], name=<span class="string">"%s_voltages"</span> % layer)</span><br></pre></td></tr></table></figure><h4 id="训练网络"><a href="#训练网络" class="headerlink" title="训练网络"></a>训练网络</h4><ul><li>精度计算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算精度</span></span><br><span class="line">accuracy = &#123;<span class="string">"all"</span>: [], <span class="string">"proportion"</span>: []&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Neuron assignments and spike proportions.</span></span><br><span class="line">n_classes = <span class="number">10</span></span><br><span class="line">assignments = -torch.ones(<span class="number">100</span>)</span><br><span class="line">proportions = torch.zeros(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">rates = torch.zeros(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_accuracy</span><span class="params">(all_activity_pred, proportion_pred)</span>:</span></span><br><span class="line">    </span><br><span class="line">    accuracy[<span class="string">"all"</span>].append(</span><br><span class="line">        <span class="number">100</span> * torch.sum(label_tensor.long() == all_activity_pred).item() / len(label_tensor)</span><br><span class="line">    )</span><br><span class="line">    accuracy[<span class="string">"proportion"</span>].append(</span><br><span class="line">        <span class="number">100</span> * torch.sum(label_tensor.long() == proportion_pred).item() / len(label_tensor)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"\nAll activity accuracy: %.2f (last), %.2f (average), %.2f (best)"</span></span><br><span class="line">        % (</span><br><span class="line">            accuracy[<span class="string">"all"</span>][<span class="number">-1</span>],</span><br><span class="line">            np.mean(accuracy[<span class="string">"all"</span>]),</span><br><span class="line">            np.max(accuracy[<span class="string">"all"</span>]),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"Proportion weighting accuracy: %.2f (last), %.2f (average), %.2f (best)\n"</span></span><br><span class="line">        % (</span><br><span class="line">            accuracy[<span class="string">"proportion"</span>][<span class="number">-1</span>],</span><br><span class="line">            np.mean(accuracy[<span class="string">"proportion"</span>]),</span><br><span class="line">            np.max(accuracy[<span class="string">"proportion"</span>]),</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><ul><li>画图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(batch, exc_voltagesl,inh_voltages )</span>:</span></span><br><span class="line">    inpt_ims, inpt_axes = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    spike_ims, spike_axes = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    weights_im = <span class="literal">None</span></span><br><span class="line">    assigns_im = <span class="literal">None</span></span><br><span class="line">    perf_ax = <span class="literal">None</span></span><br><span class="line">    voltage_axes, voltage_ims = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    image = batch[<span class="string">"image"</span>].view(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    inpt = inputs[<span class="string">"X"</span>].view(time, <span class="number">784</span>).sum(<span class="number">0</span>).view(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    input_exc_weights = network.connections[(<span class="string">"X"</span>, <span class="string">"Ae"</span>)].w</span><br><span class="line">    square_weights = get_square_weights( <span class="comment"># n_sqrt =  10  = int(np.ceil(np.sqrt(n_neurons)))</span></span><br><span class="line">        <span class="comment"># piex, n_neruons  </span></span><br><span class="line">        input_exc_weights.view(<span class="number">784</span>, <span class="number">100</span>), <span class="number">10</span>, <span class="number">28</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    square_assignments = get_square_assignments(assignments, <span class="number">10</span>)</span><br><span class="line">    spikes_ = &#123;layer: spikes[layer].get(<span class="string">"s"</span>) <span class="keyword">for</span> layer <span class="keyword">in</span> spikes&#125;</span><br><span class="line">    voltages = &#123;<span class="string">"Ae"</span>: exc_voltages, <span class="string">"Ai"</span>: inh_voltages&#125;</span><br><span class="line">    inpt_axes, inpt_ims = plot_input(</span><br><span class="line">        image, inpt, label=batch[<span class="string">"label"</span>], axes=inpt_axes, ims=inpt_ims</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    spike_ims, spike_axes = plot_spikes(spikes_, ims=spike_ims, axes=spike_axes)</span><br><span class="line">    weights_im = plot_weights(square_weights, im=weights_im)</span><br><span class="line">    assigns_im = plot_assignments(square_assignments, im=assigns_im)</span><br><span class="line">    perf_ax = plot_performance(accuracy, ax=perf_ax)</span><br><span class="line">    voltage_ims, voltage_axes = plot_voltages(</span><br><span class="line">        voltages, ims=voltage_ims, axes=voltage_axes, plot_type=<span class="string">"line"</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    plt.pause(<span class="number">1e-8</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"\nBegin training.\n"</span>)</span><br><span class="line">start = t()</span><br><span class="line">n_epochs = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(n_epochs):</span><br><span class="line">    labels = []</span><br><span class="line">    </span><br><span class="line"><span class="comment">#     # 每迭代10次 计算一次训练时间</span></span><br><span class="line"><span class="comment">#     if epoch % 10 == 0:</span></span><br><span class="line"><span class="comment">#         print("Progress: %d / %d (%.4f seconds)" % (epoch, n_epochs, t() - start))</span></span><br><span class="line"><span class="comment">#         start = t()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载以及处理好的数据。</span></span><br><span class="line">    dataloader = torch.utils.data.DataLoader( <span class="comment">#, num_workers=1, pin_memory=False</span></span><br><span class="line">        dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> step, batch <span class="keyword">in</span> enumerate(tqdm(dataloader)):</span><br><span class="line">        <span class="comment"># 获取训练样本                           #time    </span></span><br><span class="line">        inputs = &#123;<span class="string">"X"</span>: batch[<span class="string">"encoded_image"</span>].view(<span class="number">250</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> step % <span class="number">250</span> == <span class="number">0</span> <span class="keyword">and</span> step &gt; <span class="number">0</span>:</span><br><span class="line">            </span><br><span class="line">            label_tensor = torch.tensor(labels)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#  使用在所有神经元上具有最高平均脉冲活动的标签对数据进行分类</span></span><br><span class="line">            <span class="comment">#  all_activity spikes(n_samples, time, n_neurons)</span></span><br><span class="line">            all_activity_pred = all_activity(</span><br><span class="line">                spikes=spike_record, assignments=assignments, n_labels=n_classes</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 使用在所有神经元上具有最高平均脉冲活动的标签对数据进行分类，并按类别比例加权。</span></span><br><span class="line">            proportion_pred = proportion_weighting(</span><br><span class="line">                spikes=spike_record,</span><br><span class="line">                assignments=assignments,</span><br><span class="line">                proportions=proportions,</span><br><span class="line">                n_labels=n_classes,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            cal_accuracy(all_activity_pred, proportion_pred)</span><br><span class="line">            <span class="comment"># 计算精确度</span></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">            <span class="comment"># 根据最高的平均脉冲活动 为（excitatory）神经元——分配标签</span></span><br><span class="line">            assignments, proportions, rates = assign_labels(</span><br><span class="line">                spikes=spike_record,</span><br><span class="line">                labels=label_tensor,</span><br><span class="line">                n_labels=n_classes,</span><br><span class="line">                rates=rates,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            labels = []</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        labels.append(batch[<span class="string">"label"</span>])</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        network.run(inpts=inputs, time=<span class="number">250</span>, input_time_dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得 voltage 记录</span></span><br><span class="line">        exc_voltages = exc_voltage_monitor.get(<span class="string">"v"</span>)</span><br><span class="line">        inh_voltages = inh_voltage_monitor.get(<span class="string">"v"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录spike</span></span><br><span class="line">        spike_record[step % update_interval] = spikes[<span class="string">"Ae"</span>].get(<span class="string">"s"</span>).squeeze()</span><br><span class="line"> </span><br><span class="line">        polt = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> polt:</span><br><span class="line">            <span class="keyword">if</span>(step % <span class="number">1000</span> == <span class="number">0</span>):</span><br><span class="line">                draw(batch, exc_voltages,inh_voltages)</span><br><span class="line"></span><br><span class="line">        network.reset_() <span class="comment">#api已经修改</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Progress: %d / %d (%.4f seconds)"</span> % (epoch + <span class="number">1</span>, n_epochs, t() - start))</span><br><span class="line">print(<span class="string">"Training complete.\n"</span>)</span><br></pre></td></tr></table></figure><pre><code>Begin training.</code></pre><p>​    </p><pre><code>  0%|                                                                                        | 0/60000 [00:00&lt;?, ?it/s]</code></pre><p><img src="output_22_2.png" alt="png"></p><p><img src="output_22_3.png" alt="png"></p><p><img src="output_22_4.png" alt="png"></p><p><img src="output_22_5.png" alt="png"></p><p><img src="output_22_6.png" alt="png"></p><p><img src="output_22_7.png" alt="png"></p><p>……………………………………………………………….two years later…………………………………………………………………………..</p><p><img src="output_22_828.png" alt="png"></p><p><img src="output_22_829.png" alt="png"></p><p><img src="output_22_830.png" alt="png"></p><p><img src="output_22_831.png" alt="png"></p><p><img src="output_22_832.png" alt="png"></p><p><img src="output_22_833.png" alt="png"></p><pre><code> 99%|█████████████████████████████████████████████████████████████████████████ | 59250/60000 [4:50:13&lt;03:40,  3.41it/s]</code></pre><p>​<br>​    All activity accuracy: 78.00 (last), 76.35 (average), 86.80 (best)<br>​    Proportion weighting accuracy: 78.40 (last), 77.21 (average), 86.80 (best)</p><p>​    </p><pre><code> 99%|█████████████████████████████████████████████████████████████████████████▍| 59500/60000 [4:51:27&lt;02:26,  3.41it/s]</code></pre><p>​<br>​    All activity accuracy: 77.60 (last), 76.36 (average), 86.80 (best)<br>​    Proportion weighting accuracy: 77.60 (last), 77.21 (average), 86.80 (best)</p><p>​    </p><pre><code>100%|█████████████████████████████████████████████████████████████████████████▋| 59750/60000 [4:52:40&lt;01:13,  3.40it/s]</code></pre><p>​    All activity accuracy: 74.80 (last), 76.35 (average), 86.80 (best)<br>​    Proportion weighting accuracy: 76.40 (last), 77.21 (average), 86.80 (best)</p><p>​    </p><pre><code>100%|██████████████████████████████████████████████████████████████████████████| 60000/60000 [4:53:53&lt;00:00,  3.54it/s]Progress: 1 / 1 (17633.7226 seconds)Training complete.</code></pre><p>​    </p><h4 id="result"><a href="#result" class="headerlink" title="result"></a>result</h4><p>All activity accuracy: 76.40 (last), 75.78 (average), 84.00 (best)<br>Proportion weighting accuracy: 75.60 (last), 76.45 (average), 85.20 (best)</p><p>100%|██████████████████████████████████████████████████████████████████████████| 60000/60000 [4:52:35&lt;00:00,  3.48it/s]<br>Progress: 1 / 1 (17555.5081 seconds)<br>Training complete.</p><pre><code>tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,        0., 0., 0., 0.])</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;STDP手写数字识别&quot;&gt;&lt;a href=&quot;#STDP手写数字识别&quot; class=&quot;headerlink&quot; title=&quot;STDP手写数字识别&quot;&gt;&lt;/a&gt;STDP手写数字识别&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;mnist.png&quot; alt=&quot;image.png&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="snn" scheme="http://yoursite.com/categories/snn/"/>
    
    
  </entry>
  
  <entry>
    <title>动态规划老实人买卖股票</title>
    <link href="http://yoursite.com/2019/10/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/"/>
    <id>http://yoursite.com/2019/10/20/动态规划之买卖股票/</id>
    <published>2019-10-20T06:57:15.000Z</published>
    <updated>2020-01-03T00:29:17.341Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 121.买卖股票最佳时机I</span></span><br><span class="line"><span class="comment"> * 只能买卖一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfitI</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 122.买卖股票最佳时机II</span></span><br><span class="line"><span class="comment"> * 如果是无限次的买卖机会，那么肯定就是能赚钱的都买卖</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfitII</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 123.卖卖股票的最佳时机III</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfitIII</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">            dp[i][j][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][j][<span class="number">0</span>], dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][j][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][j][<span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 188.买卖股票最佳时机IV</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfitIV</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k &gt;= prices.length / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> maxProfitII(prices);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][i][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">            dp[i][j][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][j][<span class="number">0</span>], dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][j][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][j][<span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][k][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 309.最佳股票买卖时机V</span></span><br><span class="line"><span class="comment"> * 含有冷冻期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfitV</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length == <span class="number">0</span> || prices.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>][<span class="number">0</span>], dp[<span class="number">0</span>][<span class="number">1</span>] + prices[<span class="number">1</span>]);</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = Math.max(dp[<span class="number">0</span>][<span class="number">1</span>], -prices[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">2</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 714. 买卖股票的最佳时机</span></span><br><span class="line"><span class="comment"> * 含手续费</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prices</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfitVI</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>] - fee;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i] - fee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="算法题" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>回溯相关题目</title>
    <link href="http://yoursite.com/2019/10/09/%E5%9B%9E%E6%BA%AF/"/>
    <id>http://yoursite.com/2019/10/09/回溯/</id>
    <published>2019-10-09T13:51:30.000Z</published>
    <updated>2019-11-01T00:34:00.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回溯相关算法题"><a href="#回溯相关算法题" class="headerlink" title="回溯相关算法题"></a>回溯相关算法题</h3><h4 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a><a href="https://leetcode.com/problems/subsets/" target="_blank" rel="noopener">Subsets</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        subsetsbacktrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subsetsbacktrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++) &#123;</span><br><span class="line">            tempList.add(nums[i]);</span><br><span class="line">            subsetsbacktrack(list, tempList, nums, i + <span class="number">1</span>);</span><br><span class="line">            tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Subsets-II"><a href="#Subsets-II" class="headerlink" title="Subsets II"></a><a href="https://leetcode.com/problems/subsets-ii/" target="_blank" rel="noopener">Subsets II</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Arrays.sort(nums);</span><br><span class="line">       subsetsWithDupbacktrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subsetsWithDupbacktrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">       list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i &gt; start &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">               <span class="keyword">continue</span>; <span class="comment">// skip duplicates</span></span><br><span class="line">           &#125;</span><br><span class="line">           tempList.add(nums[i]);</span><br><span class="line">           subsetsWithDupbacktrack(list, tempList, nums, i + <span class="number">1</span>);</span><br><span class="line">           tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener">Permutations</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="comment">// Arrays.sort(nums); // not necessary</span></span><br><span class="line">       permutebacktrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums);</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">permutebacktrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (tempList.size() == nums.length) &#123;</span><br><span class="line">           list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (tempList.contains(nums[i])) &#123;</span><br><span class="line">                   <span class="keyword">continue</span>; <span class="comment">// element already exists, skip</span></span><br><span class="line">               &#125;</span><br><span class="line">               tempList.add(nums[i]);</span><br><span class="line">               permutebacktrack(list, tempList, nums);</span><br><span class="line">               tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Permutations-II"><a href="#Permutations-II" class="headerlink" title="Permutations II"></a><a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="noopener">Permutations II</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Arrays.sort(nums);</span><br><span class="line">       permuteUniquebacktrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length]);</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">permuteUniquebacktrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span>[] nums, <span class="keyword">boolean</span>[] used)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (tempList.size() == nums.length) &#123;</span><br><span class="line">           list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (used[i] || i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               used[i] = <span class="keyword">true</span>;</span><br><span class="line">               tempList.add(nums[i]);</span><br><span class="line">               permuteUniquebacktrack(list, tempList, nums, used);</span><br><span class="line">               used[i] = <span class="keyword">false</span>;</span><br><span class="line">               tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Combination"><a href="#Combination" class="headerlink" title="Combination"></a><a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="noopener">Combination</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        combinationSumbacktrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">combinationSumbacktrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> remain, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (remain &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (remain == <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++) &#123;</span><br><span class="line">                tempList.add(nums[i]);</span><br><span class="line">                <span class="comment">// not i + 1 because we can reuse same elements</span></span><br><span class="line">                combinationSumbacktrack(list, tempList, nums, remain - nums[i], i);</span><br><span class="line">                tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Combination-Sum-II"><a href="#Combination-Sum-II" class="headerlink" title="Combination Sum II"></a><a href="https://leetcode.com/problems/combination-sum-ii/" target="_blank" rel="noopener">Combination Sum II</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Arrays.sort(nums);</span><br><span class="line">       backtrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, target, <span class="number">0</span>);</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> remain, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (remain &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (remain == <span class="number">0</span>) &#123;</span><br><span class="line">           list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (i &gt; start &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                   <span class="keyword">continue</span>; <span class="comment">// skip duplicates</span></span><br><span class="line">               &#125;</span><br><span class="line">               tempList.add(nums[i]);</span><br><span class="line">               backtrack(list, tempList, nums, remain - nums[i], i + <span class="number">1</span>);</span><br><span class="line">               tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Palindrome-Partitioning"><a href="#Palindrome-Partitioning" class="headerlink" title="Palindrome Partitioning"></a><a href="https://leetcode.com/problems/palindrome-partitioning/" target="_blank" rel="noopener">Palindrome Partitioning</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// todo</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        partitionbacktrack(list, <span class="keyword">new</span> ArrayList&lt;&gt;(), s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partitionbacktrack</span><span class="params">(List&lt;List&lt;String&gt;&gt; list, List&lt;String&gt; tempList, String s, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == s.length()) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tempList));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isPalindrome(s, start, i)) &#123;</span><br><span class="line">                    tempList.add(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line">                    partitionbacktrack(list, tempList, s, i + <span class="number">1</span>);</span><br><span class="line">                    tempList.remove(tempList.size() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(low++) != s.charAt(high--)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="combine"><a href="#combine" class="headerlink" title="combine"></a><a href>combine</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">       helper(res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(),<span class="number">1</span> , n, k);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; tmp, <span class="keyword">int</span> start, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (tmp.size() == k)&#123;</span><br><span class="line">           res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n; i++)&#123;</span><br><span class="line">           tmp.add(i);</span><br><span class="line">           helper(res, tmp,i + <span class="number">1</span>, n, k - <span class="number">1</span>);</span><br><span class="line">           tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;回溯相关算法题&quot;&gt;&lt;a href=&quot;#回溯相关算法题&quot; class=&quot;headerlink&quot; title=&quot;回溯相关算法题&quot;&gt;&lt;/a&gt;回溯相关算法题&lt;/h3&gt;&lt;h4 id=&quot;Subsets&quot;&gt;&lt;a href=&quot;#Subsets&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="算法题" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式_单例</title>
    <link href="http://yoursite.com/2019/10/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/10/09/设计模式/</id>
    <published>2019-10-09T13:51:30.000Z</published>
    <updated>2020-05-24T14:19:45.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="类、接口和类图"><a href="#类、接口和类图" class="headerlink" title="类、接口和类图"></a>类、接口和类图</h4><ul><li><p>依赖关系<br> 类通过 局部变量， 方法参数， 或静态方法的调用来访问另外一个类。</p><pre><code>如   人： 打电话（传入--手机）</code></pre><p> 用带箭头的虚线来表示  </p></li><li><p>关联关系</p><p> 关联关系是对象之间的引用关系， 表示一类对象与另一类对象之间的关系。</p><p> 双向的关联可以用带两个箭头或者没有箭头的实线 </p></li><li><p>聚合关系</p><p> 强关联关系。 是has - a 的关系。  同样是以成员对象来实现的。成员是整体的一部分，并且成员可以单独存在。          如 ： 大学 和 老师的关系。 </p><p> 用带空心菱形的实线来表示 ， 菱形指整体</p></li><li><p>组合关系</p><p> 更强烈的聚合关系。是 contain -  a 的关系， 整体对象控制部分对象的生命周期。整体不存在，那么部分对象也将失效。    如 ： 头 和 嘴的关系<br> 用带实心菱形的实线 来表示，  菱形指整体</p></li><li><p>泛化关系<br>对象之间耦合度最大的一种关系，是 is - a 的关系。 父类与子类的关系，继承关系。</p><pre><code>如 ： 人 —&gt; 学生， 老师。</code></pre><p> 用带空心三角箭头的实线来表示 ， 三角形指父类。</p></li><li><p>实现关系</p><p> 接口与实现类之间的关系 ， 类中的操作实现了接口中所声明的所有的抽象操作 </p><p>如， 汽车 和 船实现的交通工具。</p><p> 空心三角箭头的虚线来表示 ，三角形指接口 。</p></li></ul><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li><p>开闭原则</p><p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。 </p></li><li><p>里氏替换原则（Liskov Substitution Principle，LSP） </p><p>里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承 。</p><p>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。 </p></li><li><p>依赖倒置原则（Dependence Inversion Principle，DIP） </p><p>依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性 </p><ol><li>每个类尽量提供接口或抽象类，或者两者都具备。</li><li>变量的声明类型尽量是接口或者是抽象类。</li><li>任何类都不应该从具体类派生。</li><li>使用继承时尽量遵循里氏替换原则。</li></ol></li><li><p>单一职责原则（Single Responsibility Principle，SRP）</p><p> 发现类的不同职责并将其分离，再封装到不同的类或模块中 </p></li><li><p>接口隔离原则（Interface Segregation Principle，ISP） </p><p>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。 </p><ol><li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li><li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li><li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li><li>.提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li></ol></li></ul><h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h4><h5 id="单例（Singleton）模式"><a href="#单例（Singleton）模式" class="headerlink" title="单例（Singleton）模式"></a>单例（Singleton）模式</h5><p>定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。 </p><p>单例模式有 3 个特点：</p><ol><li>单例类只有一个实例对象；</li><li>该单例对象必须由单例类自行创建；</li><li>单例类对外提供一个访问该单例的全局访问点；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类加载的时候就将对象实例化， 如果长时间不使用就会造成浪费</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 obj = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 obj;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多线程问题 new Singleton2 还没有构造完成， 新的请求obj == null 然后就产生了多个对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton2 <span class="title">getInstace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 obj;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加锁解决3 的问题，但是如果对象比较大，还未创建结束就会出问题</span></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Singleton3();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> Singleton3.obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 obj;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 使用双重锁的方式，解决三的问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                obj = <span class="keyword">new</span> Singleton4();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Singleton4.obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java 本身来说 静态内部类 只有咋调用的时候 会加载， 而且只会加载一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton6 obj = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton7</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton7</span><span class="params">()</span> 1    <span class="comment">//枚举只创建一次。</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> <span class="keyword">enum</span> Singleton </span>&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Singleton7 obj;</span><br><span class="line">        Singleton() &#123;</span><br><span class="line">            obj = <span class="keyword">new</span> Singleton7();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Singleton7 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton7 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h3&gt;&lt;h4 id=&quot;类、接口和类图&quot;&gt;&lt;a href=&quot;#类、接口和类图&quot; class=&quot;headerlink&quot; title=&quot;类、接
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>TextRNN</title>
    <link href="http://yoursite.com/2019/10/01/TextRNN/"/>
    <id>http://yoursite.com/2019/10/01/TextRNN/</id>
    <published>2019-10-01T12:52:15.000Z</published>
    <updated>2019-10-04T12:31:21.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TextRNN"><a href="#TextRNN" class="headerlink" title="TextRNN"></a>TextRNN</h3><p>使用双向LSTM。使用最后的hidden layer全连接进行分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pickle <span class="keyword">as</span> pkl</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_file_path = <span class="string">"THUCNews/data/train.txt"</span></span><br><span class="line">test_file_path = <span class="string">"THUCNews/data/test.txt"</span></span><br><span class="line">dev_file_path = <span class="string">"THUCNews/data/dev.txt"</span></span><br><span class="line">class_file_path = <span class="string">"THUCNews/data/class.txt"</span></span><br><span class="line">embedding_file_path = <span class="string">"THUCNews/data/embedding_SougouNews.npz"</span></span><br><span class="line">vocab_file_path = <span class="string">"THUCNews/data/vocab.pkl"</span></span><br><span class="line">save_file_path = <span class="string">"THUCNews/saved_dict/TextRNN.ckpt"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载与训练好的embedding 数组</span></span><br><span class="line">embedding_pretrained = torch.tensor(</span><br><span class="line">            np.load(embedding_file_path)[<span class="string">"embeddings"</span>].astype(<span class="string">'float32'</span>))\</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个 字 与 id 的map 相互一一映射(tokenizer 切割方式)</span></span><br><span class="line">UNK, PAD = <span class="string">'&lt;UNK&gt;'</span>, <span class="string">'&lt;PAD&gt;'</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vocab</span><span class="params">(file_path, max_size = <span class="number">10000</span>, min_freq = <span class="number">1</span>)</span>:</span> </span><br><span class="line">    vocab_dic = &#123;&#125;</span><br><span class="line">    tokenizer = <span class="keyword">lambda</span> x:[y <span class="keyword">for</span>  y <span class="keyword">in</span> x] <span class="comment"># 切割</span></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'r'</span>, encoding = <span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">            content = line.split(<span class="string">'\t'</span>)[<span class="number">0</span>] <span class="comment"># 将 文本与文本类型标志 分开</span></span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> tokenizer(content):</span><br><span class="line">                vocab_dic[word] = vocab_dic.get(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        vocab_list = sorted([it <span class="keyword">for</span> it <span class="keyword">in</span> vocab_dic.items() <span class="keyword">if</span> it[<span class="number">1</span>] &gt; min_freq], key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse = <span class="literal">True</span>)[:max_size] </span><br><span class="line">        vocab_dic = &#123;word_count[<span class="number">0</span>]: idx <span class="keyword">for</span> idx, word_count <span class="keyword">in</span> enumerate(vocab_list)&#125;</span><br><span class="line">        vocab_dic.update(&#123;UNK: len(vocab_dic), PAD: len(vocab_dic) + <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> vocab_dic</span><br></pre></td></tr></table></figure><blockquote><p>{“如”：           213}  -&gt;  213    embedding   [1.24, 2.1, 3.5, 2.52,…… 12.3, 0.234]<br>{“<unk>“：4762}   -&gt; 4762   embedding   [3.04, 3.3, 1.5, 0.52,…… 2.13, 0.341] </unk></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成与源文本与之对应的 id 数值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dataset</span><span class="params">(file_path, pad_size=<span class="number">32</span>)</span>:</span></span><br><span class="line">    contents = []</span><br><span class="line">    tokenizer = <span class="keyword">lambda</span> x:[y <span class="keyword">for</span>  y <span class="keyword">in</span> x] <span class="comment"># 切割</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(vocab_file_path):</span><br><span class="line">        vocab = pkl.load(open(vocab_file_path, <span class="string">'rb'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        vocab = get_vocab(train_file_path, <span class="number">10000</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'r'</span>, encoding = <span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">            content, label = line.split(<span class="string">'\t'</span>)</span><br><span class="line">            words_line = []</span><br><span class="line">            token = tokenizer(content)</span><br><span class="line">            seq_len = len(token)</span><br><span class="line">            <span class="keyword">if</span> pad_size:</span><br><span class="line">                <span class="keyword">if</span> len(token) &lt; pad_size:</span><br><span class="line">                    token.extend([vocab.get(PAD)] * (pad_size - len(token)))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    token = token[:pad_size]</span><br><span class="line">                    seq_len = pad_size</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> token:</span><br><span class="line">                words_line.append(vocab.get(word, vocab.get(UNK)))</span><br><span class="line">            contents.append((words_line, int(label), seq_len))</span><br><span class="line">    <span class="keyword">return</span> contents</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 产生train dev 和 test 数据集合（由id组成，并与文字一一对应）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dataset</span><span class="params">()</span>:</span></span><br><span class="line">    train = load_dataset(train_file_path, <span class="number">32</span>)</span><br><span class="line">    dev = load_dataset(dev_file_path, <span class="number">32</span>)</span><br><span class="line">    test = load_dataset(test_file_path, <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> train, dev, test</span><br></pre></td></tr></table></figure><blockquote><p>（[“我”, “爱”, “中”,  “国”，”,”…….. “美”， “好”，“<pad>”，“<pad>”]，  类型，总的长度）<br>（[132,   3,      32,    44,    24,……, 32,      213,      4403,          4403 ] ，       3，   30）</pad></pad></p></blockquote><p><img src="textrnn.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Model, self).__init__()</span><br><span class="line">        self.embedding = nn.Embedding.from_pretrained(embedding_pretrained, freeze=<span class="literal">False</span>)</span><br><span class="line">        self.lstm = nn.LSTM(<span class="number">300</span>, <span class="number">32</span>, bidirectional=<span class="literal">True</span>, batch_first=<span class="literal">True</span>, dropout=<span class="number">0.5</span>) <span class="comment">#hidden_size 32</span></span><br><span class="line">        self.fc = nn.Linear(<span class="number">32</span>* <span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># x[0] shape 128 * 32</span></span><br><span class="line">        out = self.embedding(x[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># embedding 之后 32个 每一个都转换为 300 维度的向量</span></span><br><span class="line">        out, h_n = self.lstm(out) </span><br><span class="line">        <span class="comment"># 得到一个shape 128 * 32 * 256 -&gt; 32个字 由于是双向 每一个字对应两个hidden 所以拼起来就是32 * 256</span></span><br><span class="line">        out = self.fc(out[:, <span class="number">-1</span>, :]) <span class="comment"># 取最后一共hidden层</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_iterator</span><span class="params">(dataset, batch_size)</span>:</span></span><br><span class="line">    iter = DatasetIterater(dataset, batch_size, <span class="string">'cpu'</span>)</span><br><span class="line">    <span class="keyword">return</span> iter</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 权重初始化， 使用xavier</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_network</span><span class="params">(model)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name, w <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">         <span class="keyword">if</span> <span class="string">'embedding'</span> <span class="keyword">not</span> <span class="keyword">in</span> name: </span><br><span class="line">            <span class="keyword">if</span> <span class="string">'weight'</span> <span class="keyword">in</span> name:</span><br><span class="line">                    nn.init.xavier_normal_(w)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'bias'</span> <span class="keyword">in</span> name:</span><br><span class="line">                nn.init.constant_(w, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(model, train_iter, dev_iter, test_iter)</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    model.train() <span class="comment"># 训练模式</span></span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr =  <span class="number">1e-3</span>)</span><br><span class="line">    batch_no = <span class="number">0</span> <span class="comment"># 记录到多少batch了</span></span><br><span class="line">    dev_best_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">    last_improve = <span class="number">0</span> <span class="comment"># 上次验证集loss下降的batch数</span></span><br><span class="line">    flag = <span class="literal">False</span> <span class="comment"># 是否很久没有效果提升</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        print(<span class="string">'Epoch [&#123;&#125;/&#123;&#125;]'</span>.format(epoch + <span class="number">1</span>, <span class="number">20</span>))</span><br><span class="line">        <span class="keyword">for</span> i, (trains, labels) <span class="keyword">in</span> enumerate(train_iter):</span><br><span class="line">            outputs = model(trains)</span><br><span class="line">            model.zero_grad()</span><br><span class="line">            loss = F.cross_entropy(outputs, labels) <span class="comment"># 交叉熵损失函数</span></span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> batch_no % <span class="number">100</span> == <span class="number">0</span>: <span class="comment"># 100输出 训练集，和验证集的效果</span></span><br><span class="line">                true = labels.data.cpu()</span><br><span class="line">                predic = torch.max(outputs.data, <span class="number">1</span>)[<span class="number">1</span>].cpu() <span class="comment"># 获取输出结果中最大的作为预测类别</span></span><br><span class="line">                train_acc = metrics.accuracy_score(true, predic) <span class="comment"># 获取训练集的准确度</span></span><br><span class="line">                dev_acc, dev_loss = evaluate(model, dev_iter) <span class="comment"># 评估验证集中的效果</span></span><br><span class="line">                <span class="keyword">if</span> dev_loss &lt; dev_best_loss:</span><br><span class="line">                    dev_best_loss = dev_loss</span><br><span class="line">                    torch.save(model.state_dict(), save_file_path) <span class="comment"># 将有提升的模型参数存下来</span></span><br><span class="line">                    improve = <span class="string">'*'</span></span><br><span class="line">                    last_improve = batch_no <span class="comment"># 最后提升的批次号</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    improve = <span class="string">''</span></span><br><span class="line">                time_dif = time.time() - start_time <span class="comment"># 记录花费的时间</span></span><br><span class="line">                msg = <span class="string">'Iter: &#123;0:&gt;6&#125;,  Train Loss: &#123;1:&gt;5.2&#125;,  Train Acc: &#123;2:&gt;6.2%&#125;,  '</span> \</span><br><span class="line">                      <span class="string">'Val Loss: &#123;3:&gt;5.2&#125;,  Val Acc: &#123;4:&gt;6.2%&#125;,  Time: &#123;5&#125; &#123;6&#125;'</span></span><br><span class="line">                print(msg.format(batch_no, loss.item(), train_acc, dev_loss, dev_acc, time_dif, improve)) <span class="comment"># </span></span><br><span class="line">                model.train()</span><br><span class="line">            batch_no += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> batch_no - last_improve &gt; <span class="number">1000</span>: <span class="comment"># 如果已经超过1000次没有提升了 就主动停止训练</span></span><br><span class="line">                print(<span class="string">"No improve, auto-stoppping"</span>)</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    test(model, test_iter)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(model, test_iter)</span>:</span></span><br><span class="line">    model.load_state_dict(torch.load(save_file_path)) <span class="comment"># 加载以及存储的dev 效果最好的相应模型</span></span><br><span class="line">    model.eval()</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    test_acc, test_loss, test_report, test_confusion = evaluate(model, test_iter, test=<span class="literal">True</span>)</span><br><span class="line">    msg = <span class="string">'Test Loss: &#123;0:&gt;5.2&#125;,  Test Acc: &#123;1:&gt;6.2%&#125;'</span></span><br><span class="line">    print(msg.format(test_loss, test_acc))</span><br><span class="line">    print(<span class="string">"Precision, Recall and F1-Score..."</span>)</span><br><span class="line">    print(test_report)</span><br><span class="line">    print(<span class="string">"Confusion Matrix..."</span>)</span><br><span class="line">    print(test_confusion)</span><br><span class="line">    time_dif = time.time() - start_time</span><br><span class="line">    print(<span class="string">"Time usage:"</span>, time_dif)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(model, data_iter, test = False)</span>:</span></span><br><span class="line">    model.eval() <span class="comment"># eval 模式</span></span><br><span class="line">    loss_total = <span class="number">0</span></span><br><span class="line">    predict_all = np.array([], dtype = int)</span><br><span class="line">    labels_all = np.array([], dtype = int)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> texts, labels <span class="keyword">in</span> data_iter:</span><br><span class="line">            outputs = model(texts)</span><br><span class="line">            loss = F.cross_entropy(outputs, labels)</span><br><span class="line">            loss_total += loss</span><br><span class="line">            labels = labels.data.cpu().numpy()</span><br><span class="line">            predic = torch.max(outputs.data, <span class="number">1</span>)[<span class="number">1</span>].cpu().numpy()</span><br><span class="line">            labels_all = np.append(labels_all, labels) <span class="comment"># 验证集上一个批次真实分类</span></span><br><span class="line">            predict_all = np.append(predict_all, predic) <span class="comment"># 验证集上一个批次的预测结果</span></span><br><span class="line">    acc = metrics.accuracy_score(labels_all, predict_all) <span class="comment"># 在整个验证集上的acc</span></span><br><span class="line">    <span class="keyword">if</span> test:</span><br><span class="line">        class_list = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> open(</span><br><span class="line">             <span class="string">'THUCNews/data/class.txt'</span>).readlines()] </span><br><span class="line">        report = metrics.classification_report(labels_all, predict_all, target_names = class_list, digits=<span class="number">4</span>)</span><br><span class="line">        confusion = metrics.confusion_matrix(labels_all, predict_all)</span><br><span class="line">        <span class="keyword">return</span> acc, loss_total / len(data_iter), report, confusion</span><br><span class="line">    <span class="keyword">return</span> acc, loss_total / len(data_iter)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">    torch.cuda.manual_seed_all(<span class="number">1</span>)</span><br><span class="line">    torch.backends.cudnn.deterministic = <span class="literal">True</span>  <span class="comment"># 保证每次结果一样</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(<span class="string">"Loading data..."</span>) <span class="comment">#vocab, </span></span><br><span class="line">    train_data, dev_data, test_data = build_dataset()</span><br><span class="line">    print(<span class="string">"+++++++++++++++++++++++++++++++++"</span>)</span><br><span class="line">    train_iter = build_iterator(train_data, <span class="number">128</span>) <span class="comment">#batch_size</span></span><br><span class="line">    print(train_iter)</span><br><span class="line">    dev_iter = build_iterator(dev_data, <span class="number">128</span>)</span><br><span class="line">    print(train_iter)</span><br><span class="line">    test_iter = build_iterator(test_data, <span class="number">128</span>)</span><br><span class="line">    print(train_iter)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Loading data Complete, Using time"</span>, time.time() - start_time)</span><br><span class="line">    </span><br><span class="line">    model = Model()</span><br><span class="line">    init_network(model)</span><br><span class="line">    print(model.parameters)</span><br><span class="line">    </span><br><span class="line">    train(model, train_iter, dev_iter, test_iter)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run()</span><br></pre></td></tr></table></figure><pre><code>Loading data...180000it [00:02, 65875.25it/s]10000it [00:00, 70955.32it/s]10000it [00:00, 69962.09it/s]+++++++++++++++++++++++++++++++++&lt;__main__.DatasetIterater object at 0x000002854FC59D30&gt;&lt;__main__.DatasetIterater object at 0x000002854FC59D30&gt;&lt;__main__.DatasetIterater object at 0x000002854FC59D30&gt;Loading data Complete, Using time 3.046241283416748C:\ProgramData\Anaconda3\lib\site-packages\torch\nn\modules\rnn.py:54: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.5 and num_layers=1  &quot;num_layers={}&quot;.format(dropout, num_layers))&lt;bound method Module.parameters of Model(  (embedding): Embedding(4762, 300)  (lstm): LSTM(300, 32, batch_first=True, dropout=0.5, bidirectional=True)  (fc): Linear(in_features=64, out_features=10, bias=True))&gt;Epoch [1/20]Iter:      0,  Train Loss:   2.3,  Train Acc:  5.47%,  Val Loss:   2.3,  Val Acc:  9.99%,  Time: 3.8678135871887207 *Iter:    100,  Train Loss:   1.9,  Train Acc: 28.91%,  Val Loss:   1.9,  Val Acc: 31.62%,  Time: 22.469587802886963 *Iter:    200,  Train Loss:   1.4,  Train Acc: 51.56%,  Val Loss:   1.2,  Val Acc: 55.65%,  Time: 40.84703755378723 *Iter:    300,  Train Loss:  0.95,  Train Acc: 72.66%,  Val Loss:   1.1,  Val Acc: 65.07%,  Time: 60.29182720184326 *Iter:    400,  Train Loss:  0.78,  Train Acc: 75.78%,  Val Loss:  0.81,  Val Acc: 74.96%,  Time: 78.93504977226257 *Iter:    500,  Train Loss:  0.63,  Train Acc: 82.81%,  Val Loss:  0.72,  Val Acc: 77.39%,  Time: 98.05553436279297 *Iter:    600,  Train Loss:  0.69,  Train Acc: 79.69%,  Val Loss:  0.67,  Val Acc: 79.05%,  Time: 117.16351222991943 *Iter:    700,  Train Loss:  0.63,  Train Acc: 82.03%,  Val Loss:  0.61,  Val Acc: 81.13%,  Time: 135.9926619529724 *Iter:    800,  Train Loss:   0.5,  Train Acc: 83.59%,  Val Loss:  0.57,  Val Acc: 82.46%,  Time: 155.52704286575317 *Iter:    900,  Train Loss:  0.52,  Train Acc: 83.59%,  Val Loss:  0.55,  Val Acc: 82.95%,  Time: 174.2003309726715 *Iter:   1000,  Train Loss:  0.44,  Train Acc: 86.72%,  Val Loss:  0.54,  Val Acc: 83.21%,  Time: 192.82258319854736 *Iter:   1100,  Train Loss:   0.4,  Train Acc: 89.84%,  Val Loss:  0.49,  Val Acc: 84.65%,  Time: 211.5442943572998 *Iter:   1200,  Train Loss:  0.36,  Train Acc: 89.06%,  Val Loss:  0.48,  Val Acc: 85.20%,  Time: 230.28150415420532 *Iter:   1300,  Train Loss:  0.48,  Train Acc: 83.59%,  Val Loss:  0.48,  Val Acc: 85.06%,  Time: 249.9981701374054 *Iter:   1400,  Train Loss:  0.55,  Train Acc: 84.38%,  Val Loss:  0.46,  Val Acc: 85.76%,  Time: 268.71038818359375 *Epoch [2/20]Iter:   1500,  Train Loss:  0.48,  Train Acc: 85.16%,  Val Loss:  0.45,  Val Acc: 85.83%,  Time: 287.3316514492035 *Iter:   1600,  Train Loss:  0.45,  Train Acc: 85.16%,  Val Loss:  0.46,  Val Acc: 85.38%,  Time: 306.0338559150696 Iter:   1700,  Train Loss:  0.42,  Train Acc: 84.38%,  Val Loss:  0.43,  Val Acc: 86.62%,  Time: 324.7470557689667 *Iter:   1800,  Train Loss:  0.34,  Train Acc: 90.62%,  Val Loss:  0.44,  Val Acc: 86.25%,  Time: 343.53873229026794 Iter:   1900,  Train Loss:  0.36,  Train Acc: 88.28%,  Val Loss:  0.41,  Val Acc: 86.96%,  Time: 362.429979801178 *Iter:   2000,  Train Loss:  0.41,  Train Acc: 87.50%,  Val Loss:  0.41,  Val Acc: 86.97%,  Time: 381.4939856529236 *Iter:   2100,  Train Loss:  0.45,  Train Acc: 87.50%,  Val Loss:   0.4,  Val Acc: 87.39%,  Time: 400.5055284500122 *Iter:   2200,  Train Loss:  0.28,  Train Acc: 91.41%,  Val Loss:  0.41,  Val Acc: 87.08%,  Time: 419.2572121620178 Iter:   2300,  Train Loss:  0.32,  Train Acc: 90.62%,  Val Loss:   0.4,  Val Acc: 87.43%,  Time: 438.2492642402649 *Iter:   2400,  Train Loss:  0.31,  Train Acc: 91.41%,  Val Loss:   0.4,  Val Acc: 87.65%,  Time: 456.98245310783386 *Iter:   2500,  Train Loss:  0.28,  Train Acc: 90.62%,  Val Loss:   0.4,  Val Acc: 86.99%,  Time: 476.24933409690857 Iter:   2600,  Train Loss:  0.36,  Train Acc: 88.28%,  Val Loss:  0.39,  Val Acc: 87.81%,  Time: 495.0570206642151 *Iter:   2700,  Train Loss:  0.27,  Train Acc: 93.75%,  Val Loss:  0.39,  Val Acc: 87.61%,  Time: 513.9666152000427 *Iter:   2800,  Train Loss:  0.44,  Train Acc: 85.94%,  Val Loss:  0.38,  Val Acc: 87.87%,  Time: 532.8607122898102 *Epoch [3/20]Iter:   2900,  Train Loss:   0.4,  Train Acc: 89.06%,  Val Loss:  0.38,  Val Acc: 87.80%,  Time: 551.6988520622253 Iter:   3000,  Train Loss:  0.29,  Train Acc: 89.06%,  Val Loss:  0.38,  Val Acc: 88.30%,  Time: 570.5799615383148 *Iter:   3100,  Train Loss:  0.28,  Train Acc: 89.84%,  Val Loss:  0.39,  Val Acc: 87.66%,  Time: 589.4430770874023 Iter:   3200,  Train Loss:  0.35,  Train Acc: 90.62%,  Val Loss:  0.38,  Val Acc: 87.63%,  Time: 608.1702740192413 Iter:   3300,  Train Loss:  0.37,  Train Acc: 85.94%,  Val Loss:  0.38,  Val Acc: 87.97%,  Time: 627.0054371356964 Iter:   3400,  Train Loss:   0.3,  Train Acc: 89.84%,  Val Loss:  0.38,  Val Acc: 88.29%,  Time: 645.7606160640717 Iter:   3500,  Train Loss:  0.29,  Train Acc: 91.41%,  Val Loss:  0.37,  Val Acc: 88.25%,  Time: 665.3868064880371 *Iter:   3600,  Train Loss:   0.2,  Train Acc: 93.75%,  Val Loss:  0.37,  Val Acc: 88.15%,  Time: 684.3798725605011 Iter:   3700,  Train Loss:  0.37,  Train Acc: 84.38%,  Val Loss:  0.36,  Val Acc: 88.40%,  Time: 703.2969629764557 *Iter:   3800,  Train Loss:  0.32,  Train Acc: 89.06%,  Val Loss:  0.36,  Val Acc: 88.65%,  Time: 722.1076171398163 Iter:   3900,  Train Loss:  0.33,  Train Acc: 88.28%,  Val Loss:  0.36,  Val Acc: 88.56%,  Time: 741.0077271461487 Iter:   4000,  Train Loss:  0.24,  Train Acc: 91.41%,  Val Loss:  0.37,  Val Acc: 88.10%,  Time: 759.8083894252777 Iter:   4100,  Train Loss:  0.34,  Train Acc: 89.06%,  Val Loss:  0.37,  Val Acc: 88.56%,  Time: 778.7774691581726 Iter:   4200,  Train Loss:  0.34,  Train Acc: 92.19%,  Val Loss:  0.35,  Val Acc: 88.69%,  Time: 797.5661556720734 *Epoch [4/20]Iter:   4300,  Train Loss:  0.26,  Train Acc: 92.19%,  Val Loss:  0.36,  Val Acc: 88.57%,  Time: 816.4322924613953 Iter:   4400,  Train Loss:  0.15,  Train Acc: 93.75%,  Val Loss:  0.36,  Val Acc: 88.61%,  Time: 835.2734205722809 Iter:   4500,  Train Loss:  0.31,  Train Acc: 89.84%,  Val Loss:  0.35,  Val Acc: 88.54%,  Time: 854.1645164489746 *Iter:   4600,  Train Loss:  0.22,  Train Acc: 92.19%,  Val Loss:  0.36,  Val Acc: 88.29%,  Time: 873.123607635498 Iter:   4700,  Train Loss:  0.37,  Train Acc: 89.06%,  Val Loss:  0.36,  Val Acc: 88.73%,  Time: 892.0637054443359 Iter:   4800,  Train Loss:  0.18,  Train Acc: 92.19%,  Val Loss:  0.36,  Val Acc: 88.60%,  Time: 911.1337130069733 Iter:   4900,  Train Loss:  0.22,  Train Acc: 92.97%,  Val Loss:  0.36,  Val Acc: 88.87%,  Time: 930.1882197856903 Iter:   5000,  Train Loss:  0.34,  Train Acc: 87.50%,  Val Loss:  0.36,  Val Acc: 88.76%,  Time: 949.0653252601624 Iter:   5100,  Train Loss:  0.28,  Train Acc: 88.28%,  Val Loss:  0.35,  Val Acc: 88.85%,  Time: 968.1674032211304 *Iter:   5200,  Train Loss:  0.33,  Train Acc: 86.72%,  Val Loss:  0.35,  Val Acc: 88.98%,  Time: 987.1639504432678 Iter:   5300,  Train Loss:   0.2,  Train Acc: 91.41%,  Val Loss:  0.35,  Val Acc: 88.65%,  Time: 1005.9341161251068 Iter:   5400,  Train Loss:  0.34,  Train Acc: 89.84%,  Val Loss:  0.35,  Val Acc: 89.01%,  Time: 1024.9731514453888 Iter:   5500,  Train Loss:  0.22,  Train Acc: 92.19%,  Val Loss:  0.35,  Val Acc: 88.74%,  Time: 1045.3965137004852 Iter:   5600,  Train Loss:  0.16,  Train Acc: 96.88%,  Val Loss:  0.35,  Val Acc: 88.91%,  Time: 1065.713327884674 Epoch [5/20]Iter:   5700,  Train Loss:  0.29,  Train Acc: 90.62%,  Val Loss:  0.35,  Val Acc: 88.90%,  Time: 1085.443971157074 Iter:   5800,  Train Loss:  0.17,  Train Acc: 95.31%,  Val Loss:  0.35,  Val Acc: 88.97%,  Time: 1104.4659898281097 Iter:   5900,  Train Loss:  0.24,  Train Acc: 90.62%,  Val Loss:  0.36,  Val Acc: 88.75%,  Time: 1124.85223031044 Iter:   6000,  Train Loss:  0.28,  Train Acc: 90.62%,  Val Loss:  0.36,  Val Acc: 88.90%,  Time: 1146.5233688354492 Iter:   6100,  Train Loss:  0.31,  Train Acc: 89.06%,  Val Loss:  0.36,  Val Acc: 88.79%,  Time: 1166.4595756530762 No improve, auto-stopppingTest Loss:  0.35,  Test Acc: 89.18%Precision, Recall and F1-Score...               precision    recall  f1-score   support      finance     0.9049    0.8470    0.8750      1000       realty     0.8627    0.9360    0.8978      1000       stocks     0.8492    0.7770    0.8115      1000    education     0.9258    0.9360    0.9309      1000      science     0.8071    0.8620    0.8337      1000      society     0.9007    0.8890    0.8948      1000     politics     0.8752    0.8770    0.8761      1000       sports     0.9706    0.9560    0.9632      1000         game     0.9197    0.9160    0.9178      1000entertainment     0.9084    0.9220    0.9151      1000    micro avg     0.8918    0.8918    0.8918     10000    macro avg     0.8924    0.8918    0.8916     10000 weighted avg     0.8924    0.8918    0.8916     10000Confusion Matrix...[[847  36  67   5  21   8  12   1   2   1] [  9 936  12   2   8   9   6   3   4  11] [ 58  44 777   1  58   1  44   1  13   3] [  0   5   3 936  14  16  13   0   4   9] [  4  13  25   8 862  16  16   3  38  15] [  5  22   1  24  16 889  24   2   4  13] [  6  12  19  18  22  29 877   2   4  11] [  1   3   3   2   3   5   5 956   1  21] [  2   2   6   2  52   7   2   2 916   9] [  4  12   2  13  12   7   3  15  10 922]]Time usage: 3.51796293258667</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TextRNN&quot;&gt;&lt;a href=&quot;#TextRNN&quot; class=&quot;headerlink&quot; title=&quot;TextRNN&quot;&gt;&lt;/a&gt;TextRNN&lt;/h3&gt;&lt;p&gt;使用双向LSTM。使用最后的hidden layer全连接进行分类。&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="nlp" scheme="http://yoursite.com/categories/nlp/"/>
    
    
  </entry>
  
  <entry>
    <title>TextCNN</title>
    <link href="http://yoursite.com/2019/09/25/TextCNN/"/>
    <id>http://yoursite.com/2019/09/25/TextCNN/</id>
    <published>2019-09-25T08:52:15.000Z</published>
    <updated>2019-10-04T12:30:43.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TextCnn"><a href="#TextCnn" class="headerlink" title="TextCnn"></a>TextCnn</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pickle <span class="keyword">as</span> pkl</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br></pre></td></tr></table></figure><h4 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h4><p>数据集采用THUCNEWS，和预处理的embedding</p><ol><li>class.text, test.txt, train.txt 2. embedding_SougouNew.npz</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_file_path = <span class="string">"THUCNews/data/train.txt"</span></span><br><span class="line">test_file_path = <span class="string">"THUCNews/data/test.txt"</span></span><br><span class="line">dev_file_path = <span class="string">"THUCNews/data/dev.txt"</span></span><br><span class="line">class_file_path = <span class="string">"THUCNews/data/class.txt"</span></span><br><span class="line">embedding_file_path = <span class="string">"THUCNews/data/embedding_SougouNews.npz"</span></span><br><span class="line">vocab_file_path = <span class="string">"THUCNews/data/vocab.pkl"</span></span><br><span class="line">save_file_path = <span class="string">"THUCNews/saved_dict/TextCNN.ckpt"</span></span><br></pre></td></tr></table></figure><ul><li>现在开始处理数据，我们采用以字为单位的方式来进行处理<ul><li>以字为单位分割， 并且统计每一个字出现的个数。可以去除出现次数非常少的字（min_freq）,确定vocab的最大长度（max_size）</li><li>生成一个 字 与 id 的map 相互一一映射(tokenizer 切割方式)</li><li>生成与源文本与之对应的 id 数值 </li><li>保证没一段文本的长度固定，字数超过就切断，如果字数不够 则加 PAD</li><li>如果到字表中没有的字 则一律采用一个标志 UNK 来表示<br>（PAD 和 UNK 实际上都是对应着一个向量）</li><li>使用DataLoader在训练的时候进行批次加载</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个 字 与 id 的map 相互一一映射(tokenizer 切割方式)</span></span><br><span class="line">UNK, PAD = <span class="string">'&lt;UNK&gt;'</span>, <span class="string">'&lt;PAD&gt;'</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vocab</span><span class="params">(file_path, max_size = <span class="number">10000</span>, min_freq = <span class="number">1</span>)</span>:</span> </span><br><span class="line">    vocab_dic = &#123;&#125;</span><br><span class="line">    tokenizer = <span class="keyword">lambda</span> x:[y <span class="keyword">for</span>  y <span class="keyword">in</span> x] <span class="comment"># 切割</span></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'r'</span>, encoding = <span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">            content = line.split(<span class="string">'\t'</span>)[<span class="number">0</span>] <span class="comment"># 将 文本与文本类型标志 分开</span></span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> tokenizer(content):</span><br><span class="line">                vocab_dic[word] = vocab_dic.get(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        vocab_list = sorted([it <span class="keyword">for</span> it <span class="keyword">in</span> vocab_dic.items() <span class="keyword">if</span> it[<span class="number">1</span>] &gt; min_freq], key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse = <span class="literal">True</span>)[:max_size] </span><br><span class="line">        vocab_dic = &#123;word_count[<span class="number">0</span>]: idx <span class="keyword">for</span> idx, word_count <span class="keyword">in</span> enumerate(vocab_list)&#125;</span><br><span class="line">        vocab_dic.update(&#123;UNK: len(vocab_dic), PAD: len(vocab_dic) + <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> vocab_dic</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get_vocab(train_file_path, 10000, 1)</span></span><br></pre></td></tr></table></figure><blockquote><p>{“如”：           213}  -&gt;  213    embedding   [1.24, 2.1, 3.5, 2.52,…… 12.3, 0.234]<br>{“<unk>“：4762}   -&gt; 4762   embedding   [3.04, 3.3, 1.5, 0.52,…… 2.13, 0.341] </unk></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成与源文本与之对应的 id 数值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dataset</span><span class="params">(file_path, pad_size=<span class="number">32</span>)</span>:</span></span><br><span class="line">    contents = []</span><br><span class="line">    tokenizer = <span class="keyword">lambda</span> x:[y <span class="keyword">for</span>  y <span class="keyword">in</span> x] <span class="comment"># 切割</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(vocab_file_path):</span><br><span class="line">        vocab = pkl.load(open(vocab_file_path, <span class="string">'rb'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        vocab = get_vocab(train_file_path, <span class="number">10000</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'r'</span>, encoding = <span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">            content, label = line.split(<span class="string">'\t'</span>)</span><br><span class="line">            words_line = []</span><br><span class="line">            token = tokenizer(content)</span><br><span class="line">            seq_len = len(token)</span><br><span class="line">            <span class="keyword">if</span> pad_size:</span><br><span class="line">                <span class="keyword">if</span> len(token) &lt; pad_size:</span><br><span class="line">                    token.extend([vocab.get(PAD)] * (pad_size - len(token)))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    token = token[:pad_size]</span><br><span class="line">                    seq_len = pad_size</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> token:</span><br><span class="line">                words_line.append(vocab.get(word, vocab.get(UNK)))</span><br><span class="line">            contents.append((words_line, int(label), seq_len))</span><br><span class="line">    <span class="keyword">return</span> contents</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#load_dataset(train_file_path)</span></span><br></pre></td></tr></table></figure><blockquote><p>（[“我”, “爱”, “中”,  “国”，”,”…….. “美”， “好”，“<pad>”，“<pad>”]，  类型，总的长度）<br>（[132,   3,      32,    44,    24,……, 32,      213,      4403,          4403 ] ，       3，   30）</pad></pad></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 产生train dev 和 test 数据集合（由id组成，并与文字一一对应）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dataset</span><span class="params">()</span>:</span></span><br><span class="line">    train = load_dataset(train_file_path, <span class="number">32</span>)</span><br><span class="line">    dev = load_dataset(dev_file_path, <span class="number">32</span>)</span><br><span class="line">    test = load_dataset(test_file_path, <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> train, dev, test</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># build_dataset()</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 产生batch_data即就是将所有数据封装成对象， 再训练的时候一个批次一个批次的取</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatasetIterater</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, batches, batch_size, device)</span>:</span></span><br><span class="line">        self.batch_size = batch_size</span><br><span class="line">        self.batches = batches</span><br><span class="line">        self.n_batches = len(batches) // batch_size</span><br><span class="line">        self.residue = <span class="literal">False</span>  <span class="comment"># 记录batch数量是否为整数</span></span><br><span class="line">        <span class="keyword">if</span> len(batches) % self.n_batches != <span class="number">0</span>:</span><br><span class="line">            self.residue = <span class="literal">True</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.device = device</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_tensor</span><span class="params">(self, datas)</span>:</span></span><br><span class="line">        x = torch.LongTensor([_[<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line">        y = torch.LongTensor([_[<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pad前的长度(超过pad_size的设为pad_size)</span></span><br><span class="line">        seq_len = torch.LongTensor([_[<span class="number">2</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line">        <span class="keyword">return</span> (x, seq_len), y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.residue <span class="keyword">and</span> self.index == self.n_batches:</span><br><span class="line">            batches = self.batches[self.index * self.batch_size: len(self.batches)]</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            batches = self._to_tensor(batches)</span><br><span class="line">            <span class="keyword">return</span> batches</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.index &gt; self.n_batches:</span><br><span class="line">            self.index = <span class="number">0</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            batches = self.batches[self.index * self.batch_size: (self.index + <span class="number">1</span>) * self.batch_size]</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            batches = self._to_tensor(batches)</span><br><span class="line">            <span class="keyword">return</span> batches</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.residue:</span><br><span class="line">            <span class="keyword">return</span> self.n_batches + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.n_batches</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_iterator</span><span class="params">(dataset, batch_size)</span>:</span></span><br><span class="line">    iter = DatasetIterater(dataset, batch_size, <span class="string">'cpu'</span>)</span><br><span class="line">    <span class="keyword">return</span> iter</span><br></pre></td></tr></table></figure><h4 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h4><p><img src="textcnn.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">128</span> <span class="comment"># 批次大小</span></span><br><span class="line">num_epochs = <span class="number">20</span> <span class="comment"># 迭代次数</span></span><br><span class="line">drop_out = <span class="number">0.5</span> <span class="comment"># </span></span><br><span class="line">embedding = <span class="number">300</span> <span class="comment"># embedding 维度</span></span><br><span class="line">pad_size = <span class="number">32</span> <span class="comment"># 文本处理后统一的 长度</span></span><br><span class="line">filter_sizes = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment"># </span></span><br><span class="line">num_filters = <span class="number">128</span> <span class="comment">#filter数量</span></span><br><span class="line">num_class = <span class="number">10</span> <span class="comment"># 文本类型数</span></span><br><span class="line">n_vocab = <span class="number">0</span> <span class="comment"># 词表的大小</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载与训练好的embedding 数组</span></span><br><span class="line">embedding_pretrained = torch.tensor(</span><br><span class="line">            np.load(embedding_file_path)[<span class="string">"embeddings"</span>].astype(<span class="string">'float32'</span>))</span><br></pre></td></tr></table></figure><p>为了方便查看网络结构所以我把所有参数定义在上面， 然后再网络结构中 直接写相关的数（不用变量，方便读者查看）</p><ul><li>首先是embedding的向量 对图中每一行</li><li>convs是3种不同尺寸的filter（每一种的个数可以是多个一般是2的指数）</li><li>将通过卷积运算的数据通过激活函数relu</li><li>max_pool1d的工作是取得当前的卷积运中的最大值，然后将相同尺寸的max_pool结果拼接起来。 然后再由将不同尺寸max_pool后的结果拼接起来</li><li>将拼接好的结果通过dropout 防止过拟合</li><li>通过fc网络得每一种分类的得分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Model, self).__init__()</span><br><span class="line">        self.embedding = nn.Embedding.from_pretrained(embedding_pretrained, freeze=<span class="literal">False</span>)</span><br><span class="line">        self.convs = nn.ModuleList([nn.Conv2d(<span class="number">1</span>, <span class="number">2</span>, (k, <span class="number">300</span>)) <span class="keyword">for</span> k <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)]) <span class="comment"># num_filters 2   kernel 2, 3, 4,  * 300</span></span><br><span class="line">        self.dropout = nn.Dropout(<span class="number">0.5</span>)</span><br><span class="line">        self.fc = nn.Linear(<span class="number">2</span> * <span class="number">3</span>, <span class="number">10</span>) <span class="comment">#  num_filters *  len(filter_sizes) num_class</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conv_and_pool</span><span class="params">(self, x, conv)</span>:</span></span><br><span class="line">        <span class="comment"># 由forward的传过来 x 128 1 32 300</span></span><br><span class="line">        x = F.relu(conv(x)).squeeze(<span class="number">3</span>)</span><br><span class="line">        <span class="comment">#  x 128 256 31</span></span><br><span class="line">        x = F.max_pool1d(x, x.size(<span class="number">2</span>)).squeeze(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># max_pool 取 31 个中的最大 ，得到128 256 1 然后 squeeze 得到 128 256</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># x[0] shape 128 * 32</span></span><br><span class="line">        out = self.embedding(x[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># embedding 之后 32个 每一个都转换为 300 维度的向量</span></span><br><span class="line">        <span class="comment"># out shape 128 32 300</span></span><br><span class="line">        out = out.unsqueeze(<span class="number">1</span>) <span class="comment"># 在 1 上增加一个维度 ？  why</span></span><br><span class="line">        <span class="comment"># 在 1 处增加一个维度 out shape 128 1 32 300</span></span><br><span class="line">        out = torch.cat([self.conv_and_pool(out, conv) <span class="keyword">for</span> conv <span class="keyword">in</span> self.convs], <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 横着拼在一起 128 768</span></span><br><span class="line">        out = self.dropout(out)</span><br><span class="line">        out = self.fc(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h4 id="网络的训练"><a href="#网络的训练" class="headerlink" title="网络的训练"></a>网络的训练</h4><ul><li>权重的初始化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 权重初始化， 使用xavier</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_network</span><span class="params">(model)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name, w <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">         <span class="keyword">if</span> <span class="string">'embedding'</span> <span class="keyword">not</span> <span class="keyword">in</span> name: </span><br><span class="line">            <span class="keyword">if</span> <span class="string">'weight'</span> <span class="keyword">in</span> name:</span><br><span class="line">                    nn.init.xavier_normal_(w)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'bias'</span> <span class="keyword">in</span> name:</span><br><span class="line">                nn.init.constant_(w, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>训练<ul><li>训练的模型 在上文已经定义</li><li>训练的数据集 通过DatasetIterater批量加载数据</li><li>优化的方法 使用Adam</li><li>使用交叉熵损失函数</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(model, train_iter, dev_iter, test_iter)</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    model.train() <span class="comment"># 训练模式</span></span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr =  <span class="number">1e-3</span>)</span><br><span class="line">    batch_no = <span class="number">0</span> <span class="comment"># 记录到多少batch了</span></span><br><span class="line">    dev_best_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">    last_improve = <span class="number">0</span> <span class="comment"># 上次验证集loss下降的batch数</span></span><br><span class="line">    flag = <span class="literal">False</span> <span class="comment"># 是否很久没有效果提升</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        print(<span class="string">'Epoch [&#123;&#125;/&#123;&#125;]'</span>.format(epoch + <span class="number">1</span>, <span class="number">20</span>))</span><br><span class="line">        <span class="keyword">for</span> i, (trains, labels) <span class="keyword">in</span> enumerate(train_iter):</span><br><span class="line">            outputs = model(trains)</span><br><span class="line">            model.zero_grad()</span><br><span class="line">            loss = F.cross_entropy(outputs, labels) <span class="comment"># 交叉熵损失函数</span></span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> batch_no % <span class="number">100</span> == <span class="number">0</span>: <span class="comment"># 100输出 训练集，和验证集的效果</span></span><br><span class="line">                true = labels.data.cpu()</span><br><span class="line">                predic = torch.max(outputs.data, <span class="number">1</span>)[<span class="number">1</span>].cpu() <span class="comment"># 获取输出结果中最大的作为预测类别</span></span><br><span class="line">                train_acc = metrics.accuracy_score(true, predic) <span class="comment"># 获取训练集的准确度</span></span><br><span class="line">                dev_acc, dev_loss = evaluate(model, dev_iter) <span class="comment"># 评估验证集中的效果</span></span><br><span class="line">                <span class="keyword">if</span> dev_loss &lt; dev_best_loss:</span><br><span class="line">                    dev_best_loss = dev_loss</span><br><span class="line">                    torch.save(model.state_dict(), save_file_path) <span class="comment"># 将有提升的模型参数存下来</span></span><br><span class="line">                    improve = <span class="string">'*'</span></span><br><span class="line">                    last_improve = batch_no <span class="comment"># 最后提升的批次号</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    improve = <span class="string">''</span></span><br><span class="line">                time_dif = time.time() - start_time <span class="comment"># 记录花费的时间</span></span><br><span class="line">                msg = <span class="string">'Iter: &#123;0:&gt;6&#125;,  Train Loss: &#123;1:&gt;5.2&#125;,  Train Acc: &#123;2:&gt;6.2%&#125;,  '</span> \</span><br><span class="line">                      <span class="string">'Val Loss: &#123;3:&gt;5.2&#125;,  Val Acc: &#123;4:&gt;6.2%&#125;,  Time: &#123;5&#125; &#123;6&#125;'</span></span><br><span class="line">                print(msg.format(batch_no, loss.item(), train_acc, dev_loss, dev_acc, time_dif, improve)) <span class="comment"># </span></span><br><span class="line">                model.train()</span><br><span class="line">            batch_no += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> batch_no - last_improve &gt; <span class="number">1000</span>: <span class="comment"># 如果已经超过1000次没有提升了 就主动停止训练</span></span><br><span class="line">                print(<span class="string">"No improve, auto-stoppping"</span>)</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    test(model, test_iter)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(model, test_iter)</span>:</span></span><br><span class="line">    model.load_state_dict(torch.load(save_file_path)) <span class="comment"># 加载以及存储的dev 效果最好的相应模型</span></span><br><span class="line">    model.eval()</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    test_acc, test_loss, test_report, test_confusion = evaluate(model, test_iter, test=<span class="literal">True</span>)</span><br><span class="line">    msg = <span class="string">'Test Loss: &#123;0:&gt;5.2&#125;,  Test Acc: &#123;1:&gt;6.2%&#125;'</span></span><br><span class="line">    print(msg.format(test_loss, test_acc))</span><br><span class="line">    print(<span class="string">"Precision, Recall and F1-Score..."</span>)</span><br><span class="line">    print(test_report)</span><br><span class="line">    print(<span class="string">"Confusion Matrix..."</span>)</span><br><span class="line">    print(test_confusion)</span><br><span class="line">    time_dif = time.time() - start_time</span><br><span class="line">    print(<span class="string">"Time usage:"</span>, time_dif)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(model, data_iter, test = False)</span>:</span></span><br><span class="line">    model.eval() <span class="comment"># eval 模式</span></span><br><span class="line">    loss_total = <span class="number">0</span></span><br><span class="line">    predict_all = np.array([], dtype = int)</span><br><span class="line">    labels_all = np.array([], dtype = int)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> texts, labels <span class="keyword">in</span> data_iter:</span><br><span class="line">            outputs = model(texts)</span><br><span class="line">            loss = F.cross_entropy(outputs, labels)</span><br><span class="line">            loss_total += loss</span><br><span class="line">            labels = labels.data.cpu().numpy()</span><br><span class="line">            predic = torch.max(outputs.data, <span class="number">1</span>)[<span class="number">1</span>].cpu().numpy()</span><br><span class="line">            labels_all = np.append(labels_all, labels) <span class="comment"># 验证集上一个批次真实分类</span></span><br><span class="line">            predict_all = np.append(predict_all, predic) <span class="comment"># 验证集上一个批次的预测结果</span></span><br><span class="line">    acc = metrics.accuracy_score(labels_all, predict_all) <span class="comment"># 在整个验证集上的acc</span></span><br><span class="line">    <span class="keyword">if</span> test:</span><br><span class="line">        class_list = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> open(</span><br><span class="line">             <span class="string">'THUCNews/data/class.txt'</span>).readlines()] </span><br><span class="line">        report = metrics.classification_report(labels_all, predict_all, target_names = class_list, digits=<span class="number">4</span>)</span><br><span class="line">        confusion = metrics.confusion_matrix(labels_all, predict_all)</span><br><span class="line">        <span class="keyword">return</span> acc, loss_total / len(data_iter), report, confusion</span><br><span class="line">    <span class="keyword">return</span> acc, loss_total / len(data_iter)</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">    torch.cuda.manual_seed_all(<span class="number">1</span>)</span><br><span class="line">    torch.backends.cudnn.deterministic = <span class="literal">True</span>  <span class="comment"># 保证每次结果一样</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(<span class="string">"Loading data..."</span>) <span class="comment">#vocab, </span></span><br><span class="line">    train_data, dev_data, test_data = build_dataset()</span><br><span class="line">    print(<span class="string">"+++++++++++++++++++++++++++++++++"</span>)</span><br><span class="line">    train_iter = build_iterator(train_data, <span class="number">128</span>) <span class="comment">#batch_size</span></span><br><span class="line">    print(train_iter)</span><br><span class="line">    dev_iter = build_iterator(dev_data, <span class="number">128</span>)</span><br><span class="line">    print(train_iter)</span><br><span class="line">    test_iter = build_iterator(test_data, <span class="number">128</span>)</span><br><span class="line">    print(train_iter)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Loading data Complete, Using time"</span>, time.time() - start_time)</span><br><span class="line">    </span><br><span class="line">    model = Model()</span><br><span class="line">    init_network(model)</span><br><span class="line">    print(model.parameters)</span><br><span class="line">    </span><br><span class="line">    train(model, train_iter, dev_iter, test_iter)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run()</span><br></pre></td></tr></table></figure><pre><code>Loading data...180000it [00:02, 70878.90it/s]10000it [00:00, 69477.66it/s]10000it [00:00, 72506.85it/s]+++++++++++++++++++++++++++++++++&lt;__main__.DatasetIterater object at 0x000001E8F73248D0&gt;&lt;__main__.DatasetIterater object at 0x000001E8F73248D0&gt;&lt;__main__.DatasetIterater object at 0x000001E8F73248D0&gt;Loading data Complete, Using time 2.84836745262146&lt;bound method Module.parameters of Model(  (embedding): Embedding(4762, 300)  (convs): ModuleList(    (0): Conv2d(1, 2, kernel_size=(2, 300), stride=(1, 1))    (1): Conv2d(1, 2, kernel_size=(3, 300), stride=(1, 1))    (2): Conv2d(1, 2, kernel_size=(4, 300), stride=(1, 1))  )  (dropout): Dropout(p=0.5)  (fc): Linear(in_features=6, out_features=10, bias=True))&gt;Epoch [1/20]Iter:      0,  Train Loss:   2.4,  Train Acc: 10.94%,  Val Loss:   2.3,  Val Acc: 11.67%,  Time: 4.347041845321655 *Iter:    100,  Train Loss:   2.0,  Train Acc: 21.88%,  Val Loss:   2.0,  Val Acc: 38.10%,  Time: 31.06502628326416 *Iter:    200,  Train Loss:   1.9,  Train Acc: 28.12%,  Val Loss:   1.8,  Val Acc: 48.73%,  Time: 56.15272235870361 *Iter:    300,  Train Loss:   1.7,  Train Acc: 35.16%,  Val Loss:   1.6,  Val Acc: 56.35%,  Time: 81.23346781730652 *Iter:    400,  Train Loss:   1.8,  Train Acc: 35.94%,  Val Loss:   1.6,  Val Acc: 60.44%,  Time: 106.87457942962646 *Iter:    500,  Train Loss:   1.7,  Train Acc: 35.16%,  Val Loss:   1.5,  Val ...........Epoch [6/20]Iter:   7100,  Train Loss:   1.6,  Train Acc: 46.09%,  Val Loss:   1.1,  Val Acc: 72.51%,  Time: 1965.9722084999084 Iter:   7200,  Train Loss:   1.5,  Train Acc: 46.09%,  Val Loss:   1.1,  Val Acc: 72.92%,  Time: 1993.864845275879 Iter:   7300,  Train Loss:   1.6,  Train Acc: 41.41%,  Val Loss:   1.1,  Val Acc: 72.55%,  Time: 2020.9455888271332 Iter:   7400,  Train Loss:   1.4,  Train Acc: 47.66%,  Val Loss:   1.1,  Val Acc: 72.65%,  Time: 2047.5681087970734 Iter:   7500,  Train Loss:   1.8,  Train Acc: 36.72%,  Val Loss:   1.1,  Val Acc: 72.65%,  Time: 2077.9685645103455 No improve, auto-stopppingTest Loss:   1.1,  Test Acc: 74.40%Precision, Recall and F1-Score...               precision    recall  f1-score   support      finance     0.8488    0.7750    0.8102      1000       realty     0.8516    0.7690    0.8082      1000       stocks     0.7146    0.6610    0.6868      1000    education     0.9013    0.8580    0.8791      1000      science     0.6545    0.6290    0.6415      1000      society     0.7890    0.6620    0.7200      1000     politics     0.4792    0.7620    0.5884      1000       sports     0.8064    0.8330    0.8195      1000         game     0.8377    0.7590    0.7964      1000entertainment     0.7485    0.7320    0.7401      1000    micro avg     0.7440    0.7440    0.7440     10000    macro avg     0.7632    0.7440    0.7490     10000 weighted avg     0.7632    0.7440    0.7490     10000Confusion Matrix...[[775   9  92  10  16   3  54  35   2   4] [ 11 769  15  12  48   5  86   7   1  46] [ 85  14 661   1  64   2 150  17   6   0] [  5  20   4 858   2  29  65   0   2  15] [ 14  22 106   7 629  12 112  17  54  27] [  4  16   5  39  11 662 211  15  10  27] [ 10  20  22  18  31  85 762  29   3  20] [  7   1   7   2  15  12  55 833   2  66] [  1   4  12   3 123   3  32  22 759  41] [  1  28   1   2  22  26  63  58  67 732]</code></pre><p>参考资料：<br><a href="https://aclweb.org/anthology/D14-1181/" target="_blank" rel="noopener">Convolutional Neural Networks for Sentence Classification</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TextCnn&quot;&gt;&lt;a href=&quot;#TextCnn&quot; class=&quot;headerlink&quot; title=&quot;TextCnn&quot;&gt;&lt;/a&gt;TextCnn&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="nlp" scheme="http://yoursite.com/categories/nlp/"/>
    
    
  </entry>
  
  <entry>
    <title>Neural Networks and Neural Language Models</title>
    <link href="http://yoursite.com/2019/09/06/Neural%20Networks%20and%20Neural%20Language%20Models/"/>
    <id>http://yoursite.com/2019/09/06/Neural Networks and Neural Language Models/</id>
    <published>2019-09-06T06:57:15.000Z</published>
    <updated>2019-09-06T02:14:58.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Neural-Networks-and-Neural-Language-Models"><a href="#Neural-Networks-and-Neural-Language-Models" class="headerlink" title="Neural Networks and Neural Language Models"></a>Neural Networks and Neural Language Models</h3><h4 id="Units"><a href="#Units" class="headerlink" title="Units"></a>Units</h4><p>即一个节点，输入 - &gt; 处理  -&gt;输出</p><ul><li><p><strong>bias</strong> </p><script type="math/tex; mode=display">z = b(这个就是bias) + \sum_iw_ix_i</script></li><li><p><strong>vector</strong> 将上面的 sum 看作向量的<strong>dot product</strong></p><script type="math/tex; mode=display">z = w\cdot x + b</script></li><li><p><strong>activation</strong> 把unit中的输出传入activation，事实上是当前网络的实际输出：</p><script type="math/tex; mode=display">y = a = {f(z)}</script></li></ul><ul><li><p>sigmoid:</p><script type="math/tex; mode=display">y  = \sigma(z) = \frac{1}{1 + e^{-z}}</script></li><li><p>tanh:</p><script type="math/tex; mode=display">y = \frac{e^z - e^{-z}}{e^z + e{-z}}</script></li><li><p>ReLU</p><script type="math/tex; mode=display">y = max(x, 0)</script></li></ul><h4 id="The-XOR-problem"><a href="#The-XOR-problem" class="headerlink" title="The XOR problem"></a>The XOR problem</h4><script type="math/tex; mode=display">y=\left\{\begin{array}{ll}{0,} & {\text { if } w \cdot x+b \leq 0} \\ {1,} & {\text { if } w \cdot x+b>0}\end{array}\right.</script><p>建立一个 <strong>与</strong> <strong>(a)</strong>， <strong>或</strong> <strong>(b)</strong> 网络非常简单, 但是不能建立一个网络 XOR </p><p><img src="01.png" alt="png"></p><ul><li><p><strong>decision boundary</strong>  $w1x1+w2x2+b = 0$</p><p>如果由决策边界 或者 决策面，说明是线性可分的，所以可以由单层网络直接模拟</p></li></ul><p><img src="02.png" alt="png"></p><p>由图可以明显看出 XOR 线性不可分。 所以 XOR不能被单层的感知机计算。可以叠加网络来解决这个问题。</p><p><img src="03.png" alt="png"></p><p>中间加了hidden layer 形成新的input 。新形成的input 使得其线性可分。</p><h4 id="Feed-Forward-Neural-Networks"><a href="#Feed-Forward-Neural-Networks" class="headerlink" title="Feed-Forward Neural Networks"></a>Feed-Forward Neural Networks</h4><script type="math/tex; mode=display">h = \sigma(Wx + b)\\z = Uh\\y = softmax(z)</script><p>e.g</p><script type="math/tex; mode=display">\begin{aligned} z^{[1]} &=W^{[1]} a^{[0]}+b^{[1]} \\ a^{[1]} &=g^{[1]}\left(z^{[1]}\right) \\ z^{[2]} &=W^{[2]} a^{[1]}+b^{[2]} \\ a^{[2]} &=g^{[2]}\left(z^{[2]}\right) \\ \hat{y} &=a^{[2]} \end{aligned}</script><h5 id="Training-Neural-Nets"><a href="#Training-Neural-Nets" class="headerlink" title="Training Neural Nets"></a>Training Neural Nets</h5><ul><li><p><strong>Loss funciton</strong></p><ul><li>cross-entropy loss:<script type="math/tex; mode=display">\text 二分类：： L_{CE}(\hat y, y)= -log\ p(p|x) = -[ylog\ \hat y + (1 - y)log(1-\hat y)]\\\text 多分类：：L_{CE}(\hat y,y) = - \sum_{i = 1}^{C}y_ilog\ \hat y_i</script></li></ul></li></ul><ul><li>由于上述等式处理 当前为真的其他的都将是零，所以可以简化为negative log likelihood loss:<script type="math/tex; mode=display">  L_{CE}(\hat y, y) = -log\ \hat y_i\\  \text 把softmax函数加上\  L_{CE}(\hat y,y) = -log\frac{e^{z_i}}{\sum_{i = j}^Ke^{z_j}}</script></li></ul><ul><li><p><strong>Computing thre Gradient</strong></p><ul><li>error back-propagation</li></ul></li></ul><ul><li><p><strong>Computation Graphs</strong> </p><p>如果我们计算$L(a,b,c) = c(a + 2b)$。我们可以把计算步骤分解如下：</p><script type="math/tex; mode=display">d = 2 * b\\e = a +d\\L = c * e</script><p>使用计算图来表示如下：</p><p><img src="04.png" alt="png"></p></li><li><p><strong>Backward differentiation on computation graphs</strong> </p><ul><li><p>chain rule $f(x) = u(v(x))$ 其中$f$对 $x$的导数如下：</p><script type="math/tex; mode=display">\frac{df}{dx} = \frac{du}{dv}\cdot \frac{dv}{dx}</script></li><li><p>我们继续计算上图我们需要的3个导数：</p><script type="math/tex; mode=display">\frac{\partial L}{\partial c} = e\\\frac{\partial L}{\partial a} = \frac{\partial L}{\partial e}\frac{\partial e}{\partial a}\\\frac{\partial L}{\partial b} =  \frac{\partial L}{\partial e} \frac{\partial e}{\partial d} \frac{\partial d}{\partial b}</script></li><li><p>在反向传播中我们从右边到左边计算，直到我们所需要的导数</p><p><img src="05.png" alt="png"></p></li></ul></li><li><p><strong>Backward differentiation for a neural network</strong></p><script type="math/tex; mode=display">\begin{aligned} z^{[1]} &=W^{[1]} \mathbf{x}+b^{[1]} \\ a^{[1]} &=\operatorname{RELu}\left(z^{[1]}\right) \\ z^{[2]} &=W^{[2]} a^{[1]}+b^{[2]} \\ a^{[2]} &=\sigma\left(z^{[2]}\right) \\ \hat{y} &=a^{[2]} \end{aligned}</script><p><img src="06.png" alt="png"></p><ul><li>the derivative of the sigmoid $\sigma$:<script type="math/tex; mode=display">\frac {d\sigma(z)}{dz} = \sigma(z)(1 - \sigma(z))</script></li><li><p>the derivative of tanh:</p><script type="math/tex; mode=display">\frac{dtanh(z)}{dz} = 1 - tanh^2(z)</script></li><li><p>the derivative of the ReLU</p><script type="math/tex; mode=display">\frac{d \operatorname{ReLU}(z)}{d z}=\left\{\begin{array}{ll}{0} & {\text { for } x<0} \\ {1} & {\text { for } x \geq 0}\end{array}\right.</script></li></ul></li></ul><h5 id="More-details-on-learning"><a href="#More-details-on-learning" class="headerlink" title="More details on learning"></a>More details on learning</h5><ul><li><p><strong>dropout</strong> : 防止过拟合</p></li><li><p><strong>hyperparameter</strong>：神经网络的参数是$权重\  W 和 bias\  b$ 通过梯度下降学习而来，而hyperparameters 是通过算法设计者自己选择。其包括 learning rate $\eta$,   mini-batch size， the model architecture ，如何 正则化，采用哪种梯度下降算法等等。</p></li></ul><h4 id="Neural-Language-Models"><a href="#Neural-Language-Models" class="headerlink" title="Neural Language Models"></a>Neural Language Models</h4><p>Neural Models</p><ul><li><p><strong>advance</strong>： 获取更长的的信息。概括上下文。更好的预测准确率。 是其他模型的的基础。</p></li><li><p><strong>disadvance</strong>： 训练速度慢</p></li></ul><p>n-gram 模型</p><script type="math/tex; mode=display">P(w_t| w_1^{t - 1})\approx P(w_t| w_{t - N + 1}^{t - 1})</script><h5 id="Embeddings"><a href="#Embeddings" class="headerlink" title="Embeddings"></a>Embeddings</h5><blockquote><p>e.g:I have to make sure when I get home to feed the cat. </p></blockquote><ul><li><p><strong>pretraining</strong>: 通过其他算法，如word2vec训练出embeding representations</p></li><li><p>当然也通常是在训练具体的任务中同时学习embedding </p></li></ul><p><img src="07.png" alt="png"></p><script type="math/tex; mode=display">1 * d -> 1 * 3d\\W^T.shape = 3d * d_h \\(1 * 3d) * (3d * d_h) = 1 * d_h \\U^T = d_h * |V| \\(1 * d_h) * U^T = 1 * |V|\\\text {softmax:  the probobilty of V_42 is the largest}</script><ul><li><strong>one-hot vector</strong> :</li></ul><script type="math/tex; mode=display">[\  0\ 0\  0\  0\  1\  0\  0\  ...\  0\  0\  0\  0\  ] \\  1\ 2\ 3\  4 \ 5 \ 6 \ 7 ... ...  \ |V|</script><p><img src="08.png" alt="png"></p><pre><code>  首先初始换一个 E 矩阵, 该矩阵 乘以 one-hot 之后 ,实际上就是 one-hot 所代表的那个单词的embedding.</code></pre><p>​    然后后面操作就和之前是一样的.</p><script type="math/tex; mode=display">\begin{aligned} e &=\left(E x_{1}, E x_{2}, \ldots, E x\right) \\ h &=\sigma(W e+b) \\ z &=U h \\ y &=\operatorname{softmax}(z) \end{aligned}</script><h5 id="Training-the-neural-language-model"><a href="#Training-the-neural-language-model" class="headerlink" title="Training the neural language model"></a>Training the neural language model</h5><ul><li><p>训练的参数 $ \theta = E,\ W,\ U,\ b$</p></li><li><p>使用梯度下降,反向传播.</p></li><li>由于在训练中不仅仅是训练参数,并且要预测下一个单词,所以训练出来的E 在预测下一个单词上更优秀.</li></ul><p>通常情况下,输入是一个长文本,包括所有的句子, 随机权重,然后迭代. cross-entropy(negative log likelihood) loss :</p><script type="math/tex; mode=display">L = - log\ p(w_t|w_{t-1},...,w_{t-n+1})</script><p>梯度:</p><script type="math/tex; mode=display">\theta_{t+1} = \theta_t - \eta \frac{\partial{- log\ p(w_t|w_{t-1},...,w_{t-n+1})}}{\partial \theta}</script><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.<a href="https://web.stanford.edu/~jurafsky/slp3/" target="_blank" rel="noopener">Neural Networks and Neural Language Models </a></p><p>2.[<a href="https://web.stanford.edu/~jurafsky/slp3/" target="_blank" rel="noopener">Vector Semantics and Embeddings</a>; </p><p>3.<a href>Word2vec Parameter Learning Explained</a>; Xin Rong ronxin@umich.edu.</p><p>4.<a href>Distributed Representations of Sentences and Documents.pdf</a>Quoc Le Tomas Mikolov Google Inc, 1600 Amphitheatre Parkway, Mountain View, CA 94043</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Neural-Networks-and-Neural-Language-Models&quot;&gt;&lt;a href=&quot;#Neural-Networks-and-Neural-Language-Models&quot; class=&quot;headerlink&quot; title=&quot;Neural N
      
    
    </summary>
    
    
      <category term="nlp" scheme="http://yoursite.com/categories/nlp/"/>
    
    
  </entry>
  
  <entry>
    <title>Transformer</title>
    <link href="http://yoursite.com/2019/08/28/Transformer/"/>
    <id>http://yoursite.com/2019/08/28/Transformer/</id>
    <published>2019-08-28T09:57:15.000Z</published>
    <updated>2019-09-01T12:11:05.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><h3 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h3><p><img src="trans.png" alt="png"></p><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><h4 id="先定义符号："><a href="#先定义符号：" class="headerlink" title="先定义符号："></a>先定义符号：</h4><p><strong>emb_dim</strong>：embedding的维度</p><p><strong>input_length</strong>: 输入序列的长度（不同长度的序列通过填充来使得其长度都相同）</p><p><strong>hidden_dim</strong>:forward_feedback中隐藏层的长度</p><p><strong>vocab_size</strong>:词汇表中单词的数量，总的数量</p><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><ul><li><p>1.输入（<strong>input_length</strong>) <em> (<em>*emb_size</em></em>)</p></li><li><p>2.然后添加位置信息 得到（<strong>input_length</strong>) <em> (<em>*emb_size</em></em>)</p></li><li><p>3.通过N个Encoder编码块得到 （<strong>input_length</strong>) <em> (<em>*emb_size</em></em>)</p></li></ul><p>&emsp; <strong><em>note：</em></strong>N块Encoder的输入和输出尺寸维度是相同的，所以可以把上一个Encoder的输出，作为下一个Encoder的输入。</p><p>&emsp; <strong><em>note：</em></strong>每一个Encoder不会共享权重</p><h4 id="Input-Embedding"><a href="#Input-Embedding" class="headerlink" title="Input_Embedding"></a>Input_Embedding</h4><ul><li>Word_Embedding</li></ul><p>比如一句话：<em>“你好，你吃饭了吗？”</em></p><blockquote><p><strong>step1</strong> ：<em>”你好，你吃饭了吗“ -&gt; [“你好”，”,” , “你”，”吃饭”,  “了”，”吗”，”?”]</em></p><p><strong>step2</strong>:  <em>[“你好”，”,” , “你”，”吃饭”,  “了”，”吗”，”?”] -&gt;[2, 4, 5, 12, 35, 5, 34, 99]</em>     在语料中的index</p><p><strong>step3</strong>: <em>2 -&gt; E[2]  = [123.4, 0.32, ……, 32.1,32]</em></p></blockquote><p>&emsp; <strong><em>note：</em></strong>这些向量也是参数，使用反向传播进行优化/</p><blockquote><p><strong>step4</strong>：把每一个向量堆叠起来，就得到个维度为（<strong>input_length</strong>) <em> (<em>*emb_size</em></em>)的矩阵</p><p><strong>step5</strong>：每一句话的长度不一样，所以使用标记来填充长度，[<pad>, <pad>, “你”，”吃饭”， “了”，”吗”，”?”] </pad></pad></p><p>这里的<strong>input_length</strong>为7， <pad> -&gt; [999] = [213, 4.23, 413, ….]</pad></p></blockquote><ul><li>Positional_Encoding<br>作者是用预定的正弦函数来对位置信息进行编码<script type="math/tex; mode=display">p_{i, j}=\left\{\begin{array}{l}{\sin \left(\frac{i}{10000^{\frac{i}{d_{e m b_{-} d i m}}}}\right)\quad if\ j\  is\  even } \\ {\cos \left(\frac{i}{10000^{\frac{i}{d_{e m b}-d i m}}}\right)\quad if\ j\  is\  odd }\end{array}\right.</script>其中<strong>i</strong>作为序列号（第几个单词）<strong>j</strong>作为embedding的位置<script type="math/tex; mode=display">\sin \left(\frac{0}{10000^{\frac{0}{\operatorname{em} b_{d i m}}}}\right) \quad \cos \left(\frac{0}{10000^{\frac{0}{\operatorname{em} b_{d i m}}}}\right) \quad \sin \left(\frac{0}{10000^{\frac{2}{\operatorname{em} b_{d i m}}}}\right) \quad \cos \left(\frac{0}{10000^{\frac{2}{e m b_{d i m}}}}\right)\\\sin \left(\frac{1}{10000^{\frac{0}{\operatorname{em} b_{d i m}}}}\right) \quad \cos \left(\frac{1}{10000^{\frac{0}{\operatorname{em} b_{d i m}}}}\right) \quad \sin \left(\frac{1}{10000^{\frac{2}{\operatorname{em} b_{d i m}}}}\right) \quad \cos \left(\frac{1}{10000^{\frac{2}{e m b_{d i m}}}}\right)\\\\\.................</script></li></ul><p>最后的结果：<strong>X = Z + P</strong></p><p><strong>X</strong>作为第一个Encoder的输入 （<strong>input_length</strong>) <em> (<em>*emb_size</em></em>)</p><h4 id="Multi-Head-Attention"><a href="#Multi-Head-Attention" class="headerlink" title="Multi-Head Attention"></a>Multi-Head Attention</h4><p><img src="mult.png" alt="png"></p><p><strong>（input_length）x（h * d_v）</strong>。然后，将应用具有尺寸<strong>（h * d_v）x（emb_dim）</strong>的<em>权重矩阵W’的线性层，从而导致尺寸的最终结果 <em>*（input_length）x（emb_dim）</em></em></p><p>Multi-Head，就是只多做几次同样的事情，同时参数不共享，然后把结果拼接</p><p><img src="1567047917508.png" alt="png"></p><script type="math/tex; mode=display">\text { MultiHead }(Q, K, V)=\text { Concat }\left(\text { head }_{1}, \ldots, \text { head }_{\mathrm{h}}\right) W^{O}\\\text { head }_{\mathrm{i}}=\text { Attention }\left(Q W_{i}^{Q}, K W_{i}^{K}, V W_{i}^{V}\right)</script><p>其中 Q K V 就是三个输入的矩阵，每一个头部都是由给出的三个不同 K Q V投影表示</p><script type="math/tex; mode=display">\begin{array}{l}{W_{i}^{K} \text { with dimensons } d_{e m b_{-} d i m} \mathrm{x} d_{k}} \\ {W_{i}^{Q} \text { with dimensons } d_{e m b_{-} d i m} \mathrm{x} d_{k}} \\ {W_{i}^{V} \text { with dimensons } d_{e m b-d i m} \mathrm{x} d_{v}}\end{array}</script><p>输入矩阵<em>X</em>并分别将其与上述权重矩阵一起投影，得到我们的K Q V</p><script type="math/tex; mode=display">\begin{aligned} X W_{i}^{K} &=K_{i} \text { with dimensons input length } \mathrm{x} d_{k} \\ X W_{i}^{Q} &=Q_{i} \text { with dimensons input length } \mathrm{x} d_{k} \\ X W_{i}^{V} &=V_{i} \text { with dimensons input length } \mathrm{x} d_{v} \end{aligned}</script><p>&emsp; <strong><em>note：</em></strong>在论文中 <strong>d_k = d_v = emb_dim / h</strong>  </p><p>得到K Q V 之后我们就可以使用其来计算<em>Scaled Dot-Product Attention</em>：</p><script type="math/tex; mode=display">\text { Attention }(Q, K, V)=\operatorname{softmax}\left(\frac{Q K^{T}}{\sqrt{d_{k}}}\right) V</script><p><img src="1567048488955.png" alt="png"></p><ul><li><p>我们来看看 Attention 到底做了些什么</p><p>首先我们看 </p><script type="math/tex; mode=display">Q_{i} K_{i}^{T}</script></li></ul><p>此矩阵相乘表示了什么东西？如果我们把其中的 <strong>v_i</strong> 和 <strong>u_j</strong> 单独拿出来看他们的点乘可以看作：</p><script type="math/tex; mode=display">v_{i} u_{j}=\cos \left(v_{i}, u_{j}\right)\left\|v_{i}\right\|_{2}\left\|u_{j}\right\|_{2}</script><p>因此，这是对<em>u_i</em>和<em>v_j</em>的方向有多相似以及它们的长度有多大的度量（方向最接近，长度越大，点积越大）。</p><p>在该乘法之后，为了缩放目的，矩阵被元素划分为 <strong>d_k</strong> 的平方根。论文里对于 <strong>d_k</strong> 的作用这么来解释：<strong>d_k</strong> 很大的时候，点积得到的结果维度很大，使得结果处于 <strong>softmax</strong> 函数梯度很小的区域。这时候除以一个缩放因子，可以一定程度上减缓这种情况。</p><p>最后得到结果 如下：</p><script type="math/tex; mode=display">\left(\begin{array}{cccccc}{72.40 * 10^{-06}} & {1.23 * 10^{-21}} & {6.51 * 10^{-40}} & {2.62 * 10^{-22}} & {9.99 * 10^{-01}} & {4.30 * 10^{-08}}  \\  {1.00 * 10^{+00}} & {7.51 * 10^{-30}} & {1.54 * 10^{-17}} & {9.91 * 10^{-13}} & {8.15 * 10^{-69}} & {1.09 * 10^{-30}} \\ {3.12 * 10^{-70}} & {2.51 * 10^{-51}} & {2.72 * 10^{-21}} & {8.03 * 10^{-09}} & {1.29 * 10^{-07}} & {9.99 * 10^{-01}} \\{2.47 * 10^{-72}} & {5.54 * 10^{-05}} & {9.80 * 10^{-01}} & {1.98 * 10^{-02}} & {2.77 * 10^{-82}} & {2.58 * 10^{-08}} \\{2.67 * 10^{-05}} & {1.21 * 10^{-09}} & {9.75 * 10^{-07}} & {3.17 * 10^{-76}} & {9.99 * 10^{-01}} & {3.64 * 10^{-28}} \\{8.59 * 10^{-47}} & {1.05 * 10^{-35}} & {9.99 * 10^{-01}} & {2.38 * 10^{-15}} & {4.21 * 10^{-27}} & {4.07 * 10^{-06}}\end{array}\right)</script><p>结果是数字在0和1之间的行总和为1。并且为 <strong>input_size * input_size</strong> 的大小。最后，结果乘以 <strong>V</strong>（<strong>input_size * d_v  </strong>）可以这样理解，得到的方形的矩阵，可以作为 <strong>V</strong> 的权重参数最终得到 <strong>input_size * d_v</strong>  的 <strong>head</strong> </p><p>此时就做到了单词和其他所有单词产生了特定的关系。 <strong>Multi-Head Attention</strong>就是做 h 次这样的处理，就会捕捉到 h 次不同的关系。然后把全部的 关系 串连到一起。</p><h4 id="Feed-Forward-Network"><a href="#Feed-Forward-Network" class="headerlink" title="Feed-Forward Network"></a>Feed-Forward Network</h4><p><img src="1567060993399.png" alt="png"></p><script type="math/tex; mode=display">\operatorname{FFN}(x)=\max \left(0, x W_{1}+b_{1}\right) W_{2}+b_{2}</script><p>其中 <strong>W_1 和 W_2</strong> 分别是 <strong>（emb_dim）x（d_F）</strong> 和 <strong>（d_F）x（emb_dim）</strong> 矩阵</p><p>最后输出为 <strong>（input_length）x（emb_dim）</strong>的矩阵</p><h4 id="Dropout-Add-amp-Norm"><a href="#Dropout-Add-amp-Norm" class="headerlink" title="Dropout, Add &amp; Norm"></a>Dropout, Add &amp; Norm</h4><script type="math/tex; mode=display">\text {Layer Norm }(x+\text { Dropout }(\text {Sublayer}(x)))</script><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>这里相较与 <strong>Encoder</strong> 多了：</p><p><strong>target input</strong>:目标输入</p><h4 id="数据流-1"><a href="#数据流-1" class="headerlink" title="数据流"></a>数据流</h4><ul><li><p><strong>Encoder</strong> 数据出来， <strong>input_size * emb_dim</strong></p></li><li><p>masked之后 <strong>target_length * emb_dim</strong></p></li><li><p>再输入把 Encoder 的数据传给和masked数据一起传入N个 Decoder ，<strong>target_length * emb_dim</strong></p></li><li><p>最后通过fully connected layer 和 row-wise softmax 输出 <strong>target * vocab_size</strong></p></li></ul><p>&emsp; <strong><em>note：</em></strong>每一个Block不会共享权重</p><p>输入与 <strong>Encoder</strong> 完全相同，与encoder主要的不同在于，target sequence 将左移一位，前面加上标志</p><p><ss>，例如：</ss></p><blockquote><p>[“Hola”, “, “, “como”, “estás”, “?”]→[“<ss>”, “Hola”, “, “, “como”, “estás”, “?”]</ss></p></blockquote><h4 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h4><ul><li>Test Time</li></ul><ol><li><p>计算embedding representation</p></li><li><p>使用开始token，比如<ss>作为序列的第一个target。然后模型的输出作为下一个token</ss></p></li><li><p>把最后一个预测的标记添加到序列之中，并使用他生成下一个新的预测</p></li><li><p>一直重复步骤3. 知道遇到表示结束的token 比如<eos></eos></p></li></ol><ul><li>Training Time</li></ul><p>按照我们之前的示例，我们将输入：</p><blockquote><p>[‘<ss>‘，’Hola’，’，’，’como’，’estas’，’？’]</ss></p></blockquote><p>  预期的预测是：</p><blockquote><p>[‘Hola’，’，’，’como’，’estas’，’？’，’<eos>‘]</eos></p></blockquote><p>由于在训练的时候，全部的信息都是已经知道的。我们应该防止通过已经看到的单词来预测单词。例如，它可能会在’como’的右侧看到’estas ‘并用它来预测’estas’。</p><p>让我们举一个例子来说明这一点。鉴于：<br>[‘<ss>‘，’Hola’，’，’，’como’，’estas’，’？’]<br>我们将如上所述将其转换为矩阵并添加位置编码。这会产生一个矩阵：</ss></p><p><img src="11.png" alt="png"></p><p><img src="12.png" alt="png"></p><p>如果要预测estas，我们能够信息能够交互的区域就如上图所示。</p><h4 id="Masked-Multi-Head-Attention"><a href="#Masked-Multi-Head-Attention" class="headerlink" title="Masked Multi-Head Attention"></a>Masked Multi-Head Attention</h4><p>与<strong>Multi-Head Attention</strong>机制完全相同，但为我们的输入添加maske。而且需要maske的唯一的block是解码器中的第一块，修改将在计算之后。</p><script type="math/tex; mode=display">\frac{Q_{i} K_{i}^{T}}{\sqrt{d_{k}}}</script><p>得到：</p><p><img src="13.png" alt="png"></p><p>maske步骤只是将矩阵的严格上三角形部分中的所有条目设置为负无穷大。</p><p><img src="14.png" alt="png"></p><p>其余部分与编码器<strong>Multi-Head Attention</strong>描述的相同。</p><p>设置为负无穷之后，通过softmax函数。其后面需要忽略的token的注意力将变为0，忽略了后面的单词。当将此矩阵与<em>V_i</em>相乘时，将用于预测下一个单词的唯一元素是其右侧的元素，即模型在测试时间内可以访问的元素。<img src="15.png" alt="png"></p><p>输出将是维度矩阵 <strong>target_length *emb_dim </strong>因为计算它的序列具有 <strong>target_length</strong> 的序列长度</p><h4 id="Multi-Head-Attention-—-Encoder-output-and-target"><a href="#Multi-Head-Attention-—-Encoder-output-and-target" class="headerlink" title="Multi-Head Attention — Encoder output and target"></a>Multi-Head Attention — Encoder output and target</h4><p><img src="16.png" alt="png"></p><p>与之前 <strong>Multi-Head Attention</strong> 层中那样从<em>X</em>中导出<em>Q_i</em>，<em>K_i</em>和<em>V_i</em>不同，而是使用编码器的最终输出<em>E</em>（所有编码器块的最终结果）和解码器的前一层输出<em>D</em>（经过<strong>Dropout，</strong> <strong>Add＆Norm </strong> <strong>图层后屏蔽</strong> <strong>的Multi-Head Attention</strong>）。</p><p>让我们首先澄清这些输入的形状及其代表的含义：</p><ol><li><em>E</em>，编码输入序列，是维度<em>（input_length）x（emb_dim）</em>的矩阵，其通过经过6个编码器块编码输入令牌之间的关系。</li><li><em>D</em>，经过<strong>Add＆Norm</strong>后屏蔽的<strong>Multi-Head Attention</strong>的输出是维度矩阵 <strong>target_length* emb_dim</strong></li></ol><p>现在让我们深入了解如何处理这些矩阵。我们将使用与以前相同尺寸的加权矩阵：</p><script type="math/tex; mode=display">\begin{array}{l}{W_{i}^{K} \text { with dimensons } d_{e m b_{-} d i m} \mathrm{x} d_{k}} \\ {W_{i}^{Q} \text { with dimensons } d_{e m b_{-} d i m} \mathrm{x} d_{k}} \\ {W_{i}^{V} \text { with dimensons } d_{e m b-d i m} \mathrm{x} d_{v}}\end{array}</script><p>但是这次投影生成 <strong>Q_i</strong> 将使用<strong>D</strong>（目标信息）完成，而生成K和V的投影将使用<strong>E</strong>（输入信息）创建。</p><script type="math/tex; mode=display">\begin{aligned} D W_{i}^{Q} &=Q_{i} \text { with dimensons target length } \mathrm{x} d_{k} \\ E W_{i}^{K} &=K_{i} \text { with dimensons input } \text {length} \mathrm{x} d_{k} \\ E W_{i}^{V} &=V_{i} \text { with dimensons input-length } \mathrm{x} d_{v} \end{aligned}</script><p>同样由多个head，串联之后使用的矩阵W_0将具有与编码器块中使用的尺寸<strong>（d_v * h）x（emb_dim）</strong>一样的尺寸。其他的与编码器中的 <strong>Multi-Head Attention</strong> 完全相同。</p><h4 id="Linear-and-Softmax"><a href="#Linear-and-Softmax" class="headerlink" title="Linear and Softmax"></a>Linear and Softmax</h4><p>来自最后一个解码器块的最后一个 <strong>Add＆Norm</strong> 层的输出是维度 <strong>（target_length）x（emb_dim）</strong>的矩阵X</p><script type="math/tex; mode=display">X W_{1}</script><p>并在每个结果行中应用Softmax</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.<a href="[https://medium.com/dissecting-bert/dissecting-bert-appendix-the-decoder-3b86f66b0e5f     ](https://medium.com/dissecting-bert/dissecting-bert-appendix-the-decoder-3b86f66b0e5f">Dissecting BERT Appendix: The Decoder</a>)</p><p>2.<a href="https://arxiv.org/pdf/1706.03762.pdf" target="_blank" rel="noopener">Attention Is All You Need</a>; Vaswani et al., 2017.</p><p>3.<a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html#embeddings-and-softmax" target="_blank" rel="noopener">The Annotated Transformer</a>; Alexander Rush, Vincent Nguyen and Guillaume Klein.</p><p>4.<a href="https://medium.com/@mromerocalvo/dissecting-bert-part1-6dcf5360b07f" target="_blank" rel="noopener">Dissecting BERT Part 1: Understanding the Transformer</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Transformer&quot;&gt;&lt;a href=&quot;#Transformer&quot; class=&quot;headerlink&quot; title=&quot;Transformer&quot;&gt;&lt;/a&gt;Transformer&lt;/h2&gt;&lt;h3 id=&quot;Model-Architecture&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="ml" scheme="http://yoursite.com/categories/ml/"/>
    
    
  </entry>
  
  <entry>
    <title>Skip-Thought Vectors</title>
    <link href="http://yoursite.com/2019/08/25/Skip-Thought%20Vectors/"/>
    <id>http://yoursite.com/2019/08/25/Skip-Thought Vectors/</id>
    <published>2019-08-25T08:52:15.000Z</published>
    <updated>2020-07-12T06:52:33.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Skip-Thought-Vectors"><a href="#Skip-Thought-Vectors" class="headerlink" title="Skip-Thought Vectors"></a>Skip-Thought Vectors</h3><ul><li><p>目的：句子级别的无监督模型的表示 </p></li><li><p>为什么需要句子级别的表示：</p><p>两个句子的相似度，句子的所带有的情感。如果直接使用word2vec的单词进行组合，那么不同顺序的句子表示就会出现问题。比如 我爱你 和 你爱我。</p><p>需要一个更好的方法来表示句子中有单词的顺序的问题。</p><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p><img src="process.png" alt="png"></p></li></ul><p><strong>Skip-Thoughts 模型由三部分组成：</strong></p><ul><li><p>Encoder Network: 把位于第 i 个位置的句子  x(i)  用一个固定长度的向量 z(i) 表示. 作者使用的是GRU。</p></li><li><p>Previous Decoder NetWork： 把 embedding 的z(i)  去生成 x( i - 1) 同样使用 GRU</p></li><li><p>Next Decoder Network：和Previous Decoder NetWork 一样。</p></li></ul><p>如何训练：</p><ul><li>使得训练后的再embedding z（i）产生的上下句子 误差最小。</li></ul><p><strong>他要学习什么：</strong></p><ul><li>最后的产出应该是encoder ，decoder只是再训练时用，训练结束之后就丢弃了。</li><li>语义相似的句子得到的表示结果更接近。</li></ul><h4 id="进一步看看Decoder"><a href="#进一步看看Decoder" class="headerlink" title="进一步看看Decoder"></a>进一步看看Decoder</h4><p><strong>teacher forcing</strong></p><p>一般RNN运行的两种mode：(1). Free-running mode；(2). Teacher-Forcing mode[22]。前者就是正常的RNN运行方式：上一个state的输出就做为下一个state的输入，这样做时有风险的，因为在RNN训练的早期，靠前的state中如果出现了极差的结果，那么后面的全部state都会受牵连，以至于最终结果非常不好也很难溯源到发生错误的源头，而后者Teacher-Forcing mode的做法就是，每次不使用上一个state的输出作为下一个state的输入，而是直接使用ground truth的对应上一项作为下一个state的输入。</p><p>Encoder 是比较简单的，而Decoder相对比较棘手。</p><ol><li>Teacher forcing:-Decoder逐字地生成句子，同时从语料库中提供真实目标句子的单词，延迟一个时间步长（见下图）</li><li>给定相邻句子的上下文z（i）和当前位置之前出现的单词序列，预测是在该位置可能出现的单词的概率分布<br><img src="decoder.png" alt="png"></li></ol><p>训练中不仅由z（i）上下文引导，还由句子中的实际单词引导。</p><p><strong>为什么要使用 100 % teacher forcing。</strong></p><p>这由两个可能的原因：</p><p><strong>Naive Explanation</strong>：因为我们后面最终需要的不是Decoder而是Encoder所以我们不需要减少teacher forcing。</p><p><strong>Better Explanation</strong> ：teacher forcing 不是为了产生单词。仅仅是为了提供真实的单词来促进更好的单词的预测而存在。也就是说减少teacher forcing 会降低准确度。</p><ul><li>遇到的问题：测试数据中间有没有登录的词汇，解决办法：采用先word2vec 来map 相关的词。 </li></ul><p>  =====================================================================</p><p>  <strong> 思考 </strong><br>如果解码器 利用 teacher-forcing 那么用cnn的滑动窗口会不会更好</p><p>  <strong> 解码器实际学到了什么？</strong></p><p>  <strong>TL; DR</strong>：解码器学习从给定邻近句子的句子中填充缺失的单词。</p><p>  两个解码器主要学习两件事。首先是语法。例如，知道“接近”后面没有“到”。学习语法有助于解码器避免在语义上相似的句子中出现语法错误。第二，在位置<strong>p</strong>处的单词上的分布给出i）相邻句子的上下文<strong>z（i）</strong>和ii）在位置<strong>p</strong>（0-索引）<em>之前</em>出现的单词<strong>x（i）[0：p]</strong>。</p><p>  <strong>编码器学到了什么？</strong></p><p>  编码器学习在句子中提取和打包信息，帮助解码器更好地预测前/下句子的单词。</p><p>  这些信息确实捕获了句子的一些语义，如在语义相似性，情感分类等几个下游NLP任务中的令人钦佩的准确性</p><p>  参考资料：</p><p>  Paper：[Skip-Thought Vectors]</p><p>  blog:<a href="https://medium.com/@sanyamagarwal/my-thoughts-on-skip-thoughts-a3e773605efa" target="_blank" rel="noopener">My thoughts on Skip-Thoughts</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Skip-Thought-Vectors&quot;&gt;&lt;a href=&quot;#Skip-Thought-Vectors&quot; class=&quot;headerlink&quot; title=&quot;Skip-Thought Vectors&quot;&gt;&lt;/a&gt;Skip-Thought Vectors&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
  </entry>
  
  <entry>
    <title>hands-on svm课后作业</title>
    <link href="http://yoursite.com/2019/08/13/SVM/"/>
    <id>http://yoursite.com/2019/08/13/SVM/</id>
    <published>2019-08-13T01:57:15.000Z</published>
    <updated>2019-08-18T07:47:59.705Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hands-on-svm课后作业"><a href="#hands-on-svm课后作业" class="headerlink" title="hands-on svm课后作业"></a>hands-on svm课后作业</h3><h4 id="train-a-LinearSVC-on-a-linearly-separable-dataset-Then-train-an-SVC-and-a-SGDClassifier-on-the-same-dataset-See-if-you-can-get-them-to-produce-roughly-the-same-mode"><a href="#train-a-LinearSVC-on-a-linearly-separable-dataset-Then-train-an-SVC-and-a-SGDClassifier-on-the-same-dataset-See-if-you-can-get-them-to-produce-roughly-the-same-mode" class="headerlink" title="train a LinearSVC on a linearly separable dataset. Then train an SVC and a SGDClassifier on the same dataset. See if you can get them to produce roughly the same mode"></a>train a LinearSVC on a linearly separable dataset. Then train an SVC and a SGDClassifier on the same dataset. See if you can get them to produce roughly the same mode</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = iris[<span class="string">"data"</span>][:, (<span class="number">2</span>, <span class="number">3</span>)] <span class="comment">#X.shape (150, 2)</span></span><br><span class="line">y = iris[<span class="string">"target"</span>] <span class="comment">#y.shape (150,)</span></span><br><span class="line">setosa_or_versicolor = (y == <span class="number">0</span>) | (y == <span class="number">1</span>)</span><br><span class="line">X = X[setosa_or_versicolor] <span class="comment">#100, 2)</span></span><br><span class="line">y = y[setosa_or_versicolor]</span><br></pre></td></tr></table></figure><ul><li>using SVC（kernel = “linear”) is much slower than LinearSVC</li><li>SGDClassifier(loss = “hinge”) this aplies regular SGD to train alinear SVM classifier<br>_tip: The Linear SVC class regularizes the bias term, so you should center the trainset fiest by subtracting its mean. In sklearn，This is automatic if you scale the data using the StandarScaler</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC, LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">C = <span class="number">5</span></span><br><span class="line">alpha = <span class="number">1</span> / (C * len(X))</span><br><span class="line"></span><br><span class="line">lin_clf = LinearSVC(loss=<span class="string">"hinge"</span>, C=C, random_state=<span class="number">42</span>)</span><br><span class="line">svm_clf = SVC(kernel=<span class="string">"linear"</span>, C=C)</span><br><span class="line">sgd_clf = SGDClassifier(loss=<span class="string">"hinge"</span>, learning_rate=<span class="string">"constant"</span>, eta0=<span class="number">0.001</span>, alpha=alpha,</span><br><span class="line">                        max_iter=<span class="number">100000</span>, tol=-np.infty, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_scaled = scaler.fit_transform(X)</span><br><span class="line"></span><br><span class="line">lin_clf.fit(X_scaled,y)</span><br><span class="line">svm_clf.fit(X_scaled,y)</span><br><span class="line">sgd_clf.fit(X_scaled,y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"LinearSVC:                   "</span>, lin_clf.intercept_, lin_clf.coef_)</span><br><span class="line">print(<span class="string">"SVC:                         "</span>, svm_clf.intercept_, svm_clf.coef_)</span><br><span class="line">print(<span class="string">"SGDClassifier(alpha=&#123;:.5f&#125;):"</span>.format(sgd_clf.alpha), sgd_clf.intercept_, sgd_clf.coef_)</span><br></pre></td></tr></table></figure><pre><code>LinearSVC:                    [0.28474027] [[1.0536456  1.09903032]]SVC:                          [0.31896852] [[1.1203284  1.02625193]]SGDClassifier(alpha=0.00200): [0.319] [[1.12072936 1.02666842]]</code></pre><ul><li>得到参数了 画出图来看看（线性模型中 intercept θ0 coef  θ1，  θ2）<br>又两个参数 ， 同时除以 θ2 得到一个一维 ： y = wx + b 的形式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># Compute the slope and bias of each decision boundary</span></span><br><span class="line">w1 = -lin_clf.coef_[<span class="number">0</span>, <span class="number">0</span>]/lin_clf.coef_[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">b1 = -lin_clf.intercept_[<span class="number">0</span>]/lin_clf.coef_[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">w2 = -svm_clf.coef_[<span class="number">0</span>, <span class="number">0</span>]/svm_clf.coef_[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">b2 = -svm_clf.intercept_[<span class="number">0</span>]/svm_clf.coef_[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">w3 = -sgd_clf.coef_[<span class="number">0</span>, <span class="number">0</span>]/sgd_clf.coef_[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">b3 = -sgd_clf.intercept_[<span class="number">0</span>]/sgd_clf.coef_[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Transform the decision boundary lines back to the original scale</span></span><br><span class="line">line1 = scaler.inverse_transform([[<span class="number">-10</span>, <span class="number">-10</span> * w1 + b1], [<span class="number">10</span>, <span class="number">10</span> * w1 + b1]])</span><br><span class="line">line2 = scaler.inverse_transform([[<span class="number">-10</span>, <span class="number">-10</span> * w2 + b2], [<span class="number">10</span>, <span class="number">10</span> * w2 + b2]])</span><br><span class="line">line3 = scaler.inverse_transform([[<span class="number">-10</span>, <span class="number">-10</span> * w3 + b3], [<span class="number">10</span>, <span class="number">10</span> * w3 + b3]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot all three decision boundaries</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot(line1[:, <span class="number">0</span>], line1[:, <span class="number">1</span>], <span class="string">"g:"</span>, label=<span class="string">"LinearSVC"</span>)</span><br><span class="line">plt.plot(line2[:, <span class="number">0</span>], line2[:, <span class="number">1</span>], <span class="string">"b--"</span>, linewidth=<span class="number">2</span>, label=<span class="string">"SVC"</span>)</span><br><span class="line">plt.plot(line3[:, <span class="number">0</span>], line3[:, <span class="number">1</span>], <span class="string">"r-"</span>, label=<span class="string">"SGDClassifier"</span>)</span><br><span class="line">plt.plot(X[:, <span class="number">0</span>][y==<span class="number">1</span>], X[:, <span class="number">1</span>][y==<span class="number">1</span>], <span class="string">"bs"</span>) <span class="comment"># label="Iris-Versicolor"</span></span><br><span class="line">plt.plot(X[:, <span class="number">0</span>][y==<span class="number">0</span>], X[:, <span class="number">1</span>][y==<span class="number">0</span>], <span class="string">"yo"</span>) <span class="comment"># label="Iris-Setosa"</span></span><br><span class="line">plt.xlabel(<span class="string">"Petal length"</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Petal width"</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.legend(loc=<span class="string">"upper center"</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">5.5</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_7_0.png" alt="png"></p><h4 id="Train-an-SVM-classifier-on-the-MNIST-dataset-Since-SVM-classifiers-are-binaryclassifiers-you-will-need-to-use-one-versus-all-to-classify-all-10-digits-You-may-want-to-tune-the-hyperparameters-using-small-validation-sets-to-speed-up-the-pro‐cess-What-accuracy-can-you-reach"><a href="#Train-an-SVM-classifier-on-the-MNIST-dataset-Since-SVM-classifiers-are-binaryclassifiers-you-will-need-to-use-one-versus-all-to-classify-all-10-digits-You-may-want-to-tune-the-hyperparameters-using-small-validation-sets-to-speed-up-the-pro‐cess-What-accuracy-can-you-reach" class="headerlink" title="Train  an  SVM  classifier  on  the  MNIST  dataset.  Since  SVM  classifiers  are  binaryclassifiers,  you  will  need  to  use  one-versus-all  to  classify  all  10  digits.  You  may  want to tune the hyperparameters using small validation sets to speed up the pro‐cess. What accuracy can you reach"></a>Train  an  SVM  classifier  on  the  MNIST  dataset.  Since  SVM  classifiers  are  binaryclassifiers,  you  will  need  to  use  one-versus-all  to  classify  all  10  digits.  You  may  want to tune the hyperparameters using small validation sets to speed up the pro‐cess. What accuracy can you reach</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>) <span class="comment">## warning</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_mldata</span><br><span class="line">mnist = fetch_mldata(<span class="string">'MNIST original'</span>,data_home=<span class="string">'./datasets/'</span>)</span><br><span class="line">mnist</span><br></pre></td></tr></table></figure><pre><code>{&#39;DESCR&#39;: &#39;mldata.org dataset: mnist-original&#39;, &#39;COL_NAMES&#39;: [&#39;label&#39;, &#39;data&#39;], &#39;target&#39;: array([0., 0., 0., ..., 9., 9., 9.]), &#39;data&#39;: array([[0, 0, 0, ..., 0, 0, 0],        [0, 0, 0, ..., 0, 0, 0],        [0, 0, 0, ..., 0, 0, 0],        ...,        [0, 0, 0, ..., 0, 0, 0],        [0, 0, 0, ..., 0, 0, 0],        [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X, y = mnist[<span class="string">"data"</span>], mnist[<span class="string">"target"</span>]</span><br><span class="line">X_train, X_test, y_train, y_test = X[:<span class="number">60000</span>], X[<span class="number">60000</span>:], y[:<span class="number">60000</span>], y[<span class="number">60000</span>:] <span class="comment">#最简单的方式</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">shuffle_index = np.random.permutation(<span class="number">60000</span>) <span class="comment">#随机取序列， 也就是洗牌</span></span><br><span class="line">X_train, y_train = X_train[shuffle_index], y_train[shuffle_index]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lin_clf = LinearSVC(random_state=<span class="number">42</span>)</span><br><span class="line">lin_clf.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><pre><code>LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,     intercept_scaling=1, loss=&#39;squared_hinge&#39;, max_iter=1000,     multi_class=&#39;ovr&#39;, penalty=&#39;l2&#39;, random_state=42, tol=0.0001,     verbose=0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">y_pred = lin_clf.predict(X_train)</span><br><span class="line">accuracy_score(y_train, y_pred)</span><br></pre></td></tr></table></figure><pre><code>0.8747</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scaler = StandardScaler()</span><br><span class="line">X_train_scaled = scaler.fit_transform(X_train.astype(np.float32))</span><br><span class="line">X_test_scaled = scaler.transform(X_test.astype(np.float32))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lin_clf = LinearSVC(random_state=<span class="number">42</span>)</span><br><span class="line">lin_clf.fit(X_train_scaled, y_train)</span><br></pre></td></tr></table></figure><pre><code>LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,     intercept_scaling=1, loss=&#39;squared_hinge&#39;, max_iter=1000,     multi_class=&#39;ovr&#39;, penalty=&#39;l2&#39;, random_state=42, tol=0.0001,     verbose=0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_pred = lin_clf.predict(X_train_scaled)</span><br><span class="line">accuracy_score(y_train, y_pred)</span><br></pre></td></tr></table></figure><pre><code>0.9199</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svm_clf = SVC(decision_function_shape=<span class="string">"ovr"</span>, gamma=<span class="string">"auto"</span>)</span><br><span class="line">svm_clf.fit(X_train_scaled[:<span class="number">6000</span>], y_train[:<span class="number">6000</span>])</span><br></pre></td></tr></table></figure><pre><code>SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,  decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto&#39;, kernel=&#39;rbf&#39;,  max_iter=-1, probability=False, random_state=None, shrinking=True,  tol=0.001, verbose=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_pred = svm_clf.predict(X_train_scaled[:<span class="number">6000</span>])</span><br><span class="line">accuracy_score( y_train[:<span class="number">6000</span>], y_pred)</span><br></pre></td></tr></table></figure><pre><code>0.9775</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> RandomizedSearchCV</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> reciprocal, uniform</span><br><span class="line">param_distributions = &#123;<span class="string">"gamma"</span>: reciprocal(<span class="number">0.001</span>, <span class="number">0.1</span>), <span class="string">"C"</span>: uniform(<span class="number">1</span>,<span class="number">10</span>)&#125;</span><br><span class="line">rnd_search_cv = RandomizedSearchCV(svm_clf, param_distributions, n_iter=<span class="number">5</span>, verbose=<span class="number">2</span>, cv=<span class="number">3</span>)</span><br><span class="line">rnd_search_cv.fit(X_train_scaled[:<span class="number">500</span>], y_train[:<span class="number">500</span>])</span><br></pre></td></tr></table></figure><pre><code>Fitting 3 folds for each of 5 candidates, totalling 15 fits[CV] C=6.249402615871811, gamma=0.07077378550552337 ..................[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.[CV] ... C=6.249402615871811, gamma=0.07077378550552337, total=   0.1s[CV] C=6.249402615871811, gamma=0.07077378550552337 ..................[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.2s remaining:    0.0s[CV] ... C=6.249402615871811, gamma=0.07077378550552337, total=   0.1s[CV] C=6.249402615871811, gamma=0.07077378550552337 ..................[CV] ... C=6.249402615871811, gamma=0.07077378550552337, total=   0.1s[CV] C=1.8908728532899979, gamma=0.05548178308647815 .................[CV] .. C=1.8908728532899979, gamma=0.05548178308647815, total=   0.1s[CV] C=1.8908728532899979, gamma=0.05548178308647815 .................[CV] .. C=1.8908728532899979, gamma=0.05548178308647815, total=   0.1s[CV] C=1.8908728532899979, gamma=0.05548178308647815 .................[CV] .. C=1.8908728532899979, gamma=0.05548178308647815, total=   0.1s[CV] C=6.575575197236928, gamma=0.010917851017824925 .................[CV] .. C=6.575575197236928, gamma=0.010917851017824925, total=   0.1s[CV] C=6.575575197236928, gamma=0.010917851017824925 .................[CV] .. C=6.575575197236928, gamma=0.010917851017824925, total=   0.1s[CV] C=6.575575197236928, gamma=0.010917851017824925 .................[CV] .. C=6.575575197236928, gamma=0.010917851017824925, total=   0.1s[CV] C=8.103984118328173, gamma=0.0010976969181254448 ................[CV] . C=8.103984118328173, gamma=0.0010976969181254448, total=   0.1s[CV] C=8.103984118328173, gamma=0.0010976969181254448 ................[CV] . C=8.103984118328173, gamma=0.0010976969181254448, total=   0.1s[CV] C=8.103984118328173, gamma=0.0010976969181254448 ................[CV] . C=8.103984118328173, gamma=0.0010976969181254448, total=   0.1s[CV] C=3.8772829451317716, gamma=0.002522772748672047 ................[CV] . C=3.8772829451317716, gamma=0.002522772748672047, total=   0.1s[CV] C=3.8772829451317716, gamma=0.002522772748672047 ................[CV] . C=3.8772829451317716, gamma=0.002522772748672047, total=   0.1s[CV] C=3.8772829451317716, gamma=0.002522772748672047 ................[CV] . C=3.8772829451317716, gamma=0.002522772748672047, total=   0.1s[Parallel(n_jobs=1)]: Done  15 out of  15 | elapsed:    4.2s finishedRandomizedSearchCV(cv=3, error_score=&#39;raise-deprecating&#39;,          estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,  decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto&#39;, kernel=&#39;rbf&#39;,  max_iter=-1, probability=False, random_state=None, shrinking=True,  tol=0.001, verbose=False),          fit_params=None, iid=&#39;warn&#39;, n_iter=5, n_jobs=None,          param_distributions={&#39;gamma&#39;: &lt;scipy.stats._distn_infrastructure.rv_frozen object at 0x000002A3E9698CC0&gt;, &#39;C&#39;: &lt;scipy.stats._distn_infrastructure.rv_frozen object at 0x000002A3EAA16390&gt;},          pre_dispatch=&#39;2*n_jobs&#39;, random_state=None, refit=True,          return_train_score=&#39;warn&#39;, scoring=None, verbose=2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rnd_search_cv.best_params_</span><br></pre></td></tr></table></figure><pre><code>{&#39;C&#39;: 8.103984118328173, &#39;gamma&#39;: 0.0010976969181254448}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rnd_search_cv.best_score_</span><br></pre></td></tr></table></figure><pre><code>0.802</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rnd_search_cv.best_estimator_.fit(X_train_scaled[:<span class="number">6000</span>], y_train[:<span class="number">6000</span>])</span><br></pre></td></tr></table></figure><pre><code>SVC(C=8.103984118328173, cache_size=200, class_weight=None, coef0=0.0,  decision_function_shape=&#39;ovr&#39;, degree=3, gamma=0.0010976969181254448,  kernel=&#39;rbf&#39;, max_iter=-1, probability=False, random_state=None,  shrinking=True, tol=0.001, verbose=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_pred = rnd_search_cv.best_estimator_.predict(X_train_scaled[:<span class="number">6000</span>])</span><br><span class="line">accuracy_score(y_train[:<span class="number">6000</span>], y_pred)</span><br></pre></td></tr></table></figure><pre><code>0.9991666666666666</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_pred = rnd_search_cv.best_estimator_.predict(X_test_scaled)</span><br><span class="line">accuracy_score(y_test, y_pred)</span><br></pre></td></tr></table></figure><pre><code>0.9404</code></pre><h4 id="Train-an-SVM-regressor-on-the-California-housing-dataset"><a href="#Train-an-SVM-regressor-on-the-California-housing-dataset" class="headerlink" title="Train an SVM regressor on the California housing dataset"></a>Train an SVM regressor on the California housing dataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line">housing = fetch_california_housing()</span><br><span class="line">X = housing[<span class="string">"data"</span>]</span><br><span class="line">y = housing[<span class="string">"target"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test,y_train, y_test = train_test_split(X, y, test_size = <span class="number">0.2</span>, random_state = <span class="number">42</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing  <span class="keyword">import</span> StandardScaler</span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">X_test_scaled = scaler.transform(X_test)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVR</span><br><span class="line">lin_svr = LinearSVR()</span><br><span class="line">lin_svr.fit(X_train_scaled, y_train)</span><br></pre></td></tr></table></figure><pre><code>LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_intercept=True,     intercept_scaling=1.0, loss=&#39;epsilon_insensitive&#39;, max_iter=1000,     random_state=None, tol=0.0001, verbose=0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from sklearn.metrics import accuracy_score </span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line">y_pred = lin_svr.predict(X_train_scaled)</span><br><span class="line">mse = mean_squared_error(y_train, y_pred)</span><br><span class="line">mse</span><br></pre></td></tr></table></figure><pre><code>0.9541764911842403</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line">param_distributions = &#123;<span class="string">"gamma"</span>: reciprocal(<span class="number">0.001</span>, <span class="number">0.1</span>), <span class="string">"C"</span>: uniform(<span class="number">1</span>, <span class="number">10</span>)&#125;</span><br><span class="line">rnd_search_cv = RandomizedSearchCV(SVR(), param_distributions, n_iter=<span class="number">10</span>, verbose=<span class="number">2</span>, cv=<span class="number">3</span>, random_state=<span class="number">42</span>)</span><br><span class="line">rnd_search_cv.fit(X_train_scaled, y_train)</span><br></pre></td></tr></table></figure><pre><code>Fitting 3 folds for each of 10 candidates, totalling 30 fits[CV] C=4.745401188473625, gamma=0.07969454818643928 ..................[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.[CV] ... C=4.745401188473625, gamma=0.07969454818643928, total=   5.9s[CV] C=4.745401188473625, gamma=0.07969454818643928 ..................[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    7.7s remaining:    0.0s[CV] ... C=4.745401188473625, gamma=0.07969454818643928, total=   5.6s[CV] C=4.745401188473625, gamma=0.07969454818643928 ..................[CV] ... C=4.745401188473625, gamma=0.07969454818643928, total=   5.8s[CV] C=8.31993941811405, gamma=0.015751320499779724 ..................[CV] ... C=8.31993941811405, gamma=0.015751320499779724, total=   5.5s[CV] C=8.31993941811405, gamma=0.015751320499779724 ..................[CV] ... C=8.31993941811405, gamma=0.015751320499779724, total=   5.4s[CV] C=8.31993941811405, gamma=0.015751320499779724 ..................[CV] ... C=8.31993941811405, gamma=0.015751320499779724, total=   6.1s[CV] C=2.560186404424365, gamma=0.002051110418843397 .................[CV] .. C=2.560186404424365, gamma=0.002051110418843397, total=   5.4s[CV] C=2.560186404424365, gamma=0.002051110418843397 .................[CV] .. C=2.560186404424365, gamma=0.002051110418843397, total=   5.1s[CV] C=2.560186404424365, gamma=0.002051110418843397 .................[CV] .. C=2.560186404424365, gamma=0.002051110418843397, total=   4.7s[CV] C=1.5808361216819946, gamma=0.05399484409787431 .................[CV] .. C=1.5808361216819946, gamma=0.05399484409787431, total=   4.7s[CV] C=1.5808361216819946, gamma=0.05399484409787431 .................[CV] .. C=1.5808361216819946, gamma=0.05399484409787431, total=   4.8s[CV] C=1.5808361216819946, gamma=0.05399484409787431 .................[CV] .. C=1.5808361216819946, gamma=0.05399484409787431, total=   4.7s[CV] C=7.011150117432088, gamma=0.026070247583707663 .................[CV] .. C=7.011150117432088, gamma=0.026070247583707663, total=   5.8s[CV] C=7.011150117432088, gamma=0.026070247583707663 .................[CV] .. C=7.011150117432088, gamma=0.026070247583707663, total=   5.6s[CV] C=7.011150117432088, gamma=0.026070247583707663 .................[CV] .. C=7.011150117432088, gamma=0.026070247583707663, total=   5.8s[CV] C=1.2058449429580245, gamma=0.0870602087830485 ..................[CV] ... C=1.2058449429580245, gamma=0.0870602087830485, total=   5.0s[CV] C=1.2058449429580245, gamma=0.0870602087830485 ..................[CV] ... C=1.2058449429580245, gamma=0.0870602087830485, total=   5.3s[CV] C=1.2058449429580245, gamma=0.0870602087830485 ..................[CV] ... C=1.2058449429580245, gamma=0.0870602087830485, total=   4.9s[CV] C=9.324426408004218, gamma=0.0026587543983272693 ................[CV] . C=9.324426408004218, gamma=0.0026587543983272693, total=   5.2s[CV] C=9.324426408004218, gamma=0.0026587543983272693 ................[CV] . C=9.324426408004218, gamma=0.0026587543983272693, total=   4.9s[CV] C=9.324426408004218, gamma=0.0026587543983272693 ................[CV] . C=9.324426408004218, gamma=0.0026587543983272693, total=   4.7s[CV] C=2.818249672071006, gamma=0.0023270677083837795 ................[CV] . C=2.818249672071006, gamma=0.0023270677083837795, total=   4.8s[CV] C=2.818249672071006, gamma=0.0023270677083837795 ................[CV] . C=2.818249672071006, gamma=0.0023270677083837795, total=   4.7s[CV] C=2.818249672071006, gamma=0.0023270677083837795 ................[CV] . C=2.818249672071006, gamma=0.0023270677083837795, total=   5.0s[CV] C=4.042422429595377, gamma=0.011207606211860567 .................[CV] .. C=4.042422429595377, gamma=0.011207606211860567, total=   5.1s[CV] C=4.042422429595377, gamma=0.011207606211860567 .................[CV] .. C=4.042422429595377, gamma=0.011207606211860567, total=   5.2s[CV] C=4.042422429595377, gamma=0.011207606211860567 .................[CV] .. C=4.042422429595377, gamma=0.011207606211860567, total=   5.5s[CV] C=5.319450186421157, gamma=0.003823475224675185 .................[CV] .. C=5.319450186421157, gamma=0.003823475224675185, total=   5.0s[CV] C=5.319450186421157, gamma=0.003823475224675185 .................[CV] .. C=5.319450186421157, gamma=0.003823475224675185, total=   4.7s[CV] C=5.319450186421157, gamma=0.003823475224675185 .................[CV] .. C=5.319450186421157, gamma=0.003823475224675185, total=   4.8s[Parallel(n_jobs=1)]: Done  30 out of  30 | elapsed:  3.7min finishedRandomizedSearchCV(cv=3, error_score=&#39;raise-deprecating&#39;,          estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,  gamma=&#39;auto_deprecated&#39;, kernel=&#39;rbf&#39;, max_iter=-1, shrinking=True,  tol=0.001, verbose=False),          fit_params=None, iid=&#39;warn&#39;, n_iter=10, n_jobs=None,          param_distributions={&#39;gamma&#39;: &lt;scipy.stats._distn_infrastructure.rv_frozen object at 0x000002A3EAB4C630&gt;, &#39;C&#39;: &lt;scipy.stats._distn_infrastructure.rv_frozen object at 0x000002A3EAB26E80&gt;},          pre_dispatch=&#39;2*n_jobs&#39;, random_state=42, refit=True,          return_train_score=&#39;warn&#39;, scoring=None, verbose=2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rnd_search_cv.best_estimator_</span><br></pre></td></tr></table></figure><pre><code>SVR(C=4.745401188473625, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,  gamma=0.07969454818643928, kernel=&#39;rbf&#39;, max_iter=-1, shrinking=True,  tol=0.001, verbose=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y_pred = rnd_search_cv.best_estimator_.predict(X_train_scaled)</span><br><span class="line">mse = mean_squared_error(y_train, y_pred)</span><br><span class="line">mse</span><br></pre></td></tr></table></figure><pre><code>0.3280453999995986</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hands-on-svm课后作业&quot;&gt;&lt;a href=&quot;#hands-on-svm课后作业&quot; class=&quot;headerlink&quot; title=&quot;hands-on svm课后作业&quot;&gt;&lt;/a&gt;hands-on svm课后作业&lt;/h3&gt;&lt;h4 id=&quot;train-a-L
      
    
    </summary>
    
    
      <category term="ml" scheme="http://yoursite.com/categories/ml/"/>
    
    
  </entry>
  
  <entry>
    <title>MNIST 手写识别任务</title>
    <link href="http://yoursite.com/2019/08/09/MNIST/"/>
    <id>http://yoursite.com/2019/08/09/MNIST/</id>
    <published>2019-08-09T06:57:15.000Z</published>
    <updated>2019-11-13T01:44:44.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hand-on-3"><a href="#Hand-on-3" class="headerlink" title="Hand - on 3"></a>Hand - on 3</h1><h2 id="分类任务"><a href="#分类任务" class="headerlink" title="分类任务"></a>分类任务</h2><h3 id="预处理数据"><a href="#预处理数据" class="headerlink" title="预处理数据"></a>预处理数据</h3><h4 id="获取数据集"><a href="#获取数据集" class="headerlink" title="获取数据集"></a>获取数据集</h4><p>使用 sklearn提供的MNIST数据集，进行分类练习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>) <span class="comment">## 个人不想看到warning</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_mldata</span><br><span class="line">mnist = fetch_mldata(<span class="string">'MNIST original'</span>,data_home=<span class="string">'./datasets/'</span>)</span><br><span class="line">mnist</span><br></pre></td></tr></table></figure><pre><code>{&#39;DESCR&#39;: &#39;mldata.org dataset: mnist-original&#39;, &#39;COL_NAMES&#39;: [&#39;label&#39;, &#39;data&#39;], &#39;target&#39;: array([0., 0., 0., ..., 9., 9., 9.]), &#39;data&#39;: array([[0, 0, 0, ..., 0, 0, 0],        [0, 0, 0, ..., 0, 0, 0],        [0, 0, 0, ..., 0, 0, 0],        ...,        [0, 0, 0, ..., 0, 0, 0],        [0, 0, 0, ..., 0, 0, 0],        [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)}</code></pre><p>可以清晰的看到数据的结构，我们看看数据的详细情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X, y = mnist[<span class="string">"data"</span>], mnist[<span class="string">"target"</span>]</span><br><span class="line">X.shape <span class="comment">#(70000, 784)</span></span><br><span class="line">y.shape <span class="comment">#(70000,)</span></span><br></pre></td></tr></table></figure><pre><code>(70000,)</code></pre><p>将数据画出来画图代码如下（各个参数在代码中有解释详细可以见api）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">some_digit = X[<span class="number">36000</span>] <span class="comment">#随便查看一个数据</span></span><br><span class="line">some_digit_image = some_digit.reshape(<span class="number">28</span>,<span class="number">28</span>) <span class="comment"># </span></span><br><span class="line">plt.imshow(some_digit_image, cmap = matplotlib.cm.binary, interpolation = <span class="string">'nearest'</span>) </span><br><span class="line"><span class="comment"># X : array-like or PIL image</span></span><br><span class="line"><span class="comment"># interpolation 构成图的效果不同 默认也是nearest</span></span><br><span class="line">plt.axis(<span class="string">"off"</span>) <span class="comment"># 画图不要坐标轴</span></span><br><span class="line">plt.show() </span><br><span class="line">y[<span class="number">36000</span>] <span class="comment"># 5.0</span></span><br></pre></td></tr></table></figure><p><img src="output_8_0.png" alt="png"></p><pre><code>5.0</code></pre><h4 id="处理数据集，-将其分成测试集与训练集"><a href="#处理数据集，-将其分成测试集与训练集" class="headerlink" title="处理数据集， 将其分成测试集与训练集"></a>处理数据集， 将其分成测试集与训练集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = X[:<span class="number">60000</span>], X[<span class="number">60000</span>:], y[:<span class="number">60000</span>], y[<span class="number">60000</span>:] <span class="comment">#最简单的方式</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">shuffle_index = np.random.permutation(<span class="number">60000</span>) <span class="comment">#随机取序列， 也就是洗牌</span></span><br><span class="line">X_train, y_train = X_train[shuffle_index], y_train[shuffle_index]</span><br></pre></td></tr></table></figure><p>多分类算法可以建立在二分类算法之上，后文可以看到。首先我们试试二分类算法以 5作为例子，所有数中就是（ == 5 或者 != 5 两种情况。所以我们把训练集测试集的标签修改为 0， 1两种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y_train_5 = (y_train == <span class="number">5</span>)  <span class="comment"># True for all 5s, False for all other digits.</span></span><br><span class="line">y_test_5 = (y_test == <span class="number">5</span>)</span><br><span class="line">y_train_5 <span class="comment">#array([False, False, False, ..., False, False, False])</span></span><br></pre></td></tr></table></figure><pre><code>array([False, False, False, ..., False, False, False])</code></pre><h4 id="先简化训练一个二分类，使用SGDClassifier分类器"><a href="#先简化训练一个二分类，使用SGDClassifier分类器" class="headerlink" title="先简化训练一个二分类，使用SGDClassifier分类器"></a>先简化训练一个二分类，使用SGDClassifier分类器</h4><p>某个名人说过，管他三七二十一 线性模型直接先拿出来看看。sklearn中已经帮我们实现好了各种模型，现在我们不要关系模型的底层如何工作。先把他用起来。熟悉流程，具体的分类分类器可以见sklearn的api（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier </span><br><span class="line">sgd_clf = SGDClassifier(random_state = <span class="number">42</span>) <span class="comment">#这里保证每次的数据都是统一的</span></span><br><span class="line">sgd_clf.fit(X_train, y_train_5)</span><br><span class="line">sgd_clf.predict([some_digit])</span><br></pre></td></tr></table></figure><pre><code>array([ True])</code></pre><h3 id="评估一个分类器的好坏"><a href="#评估一个分类器的好坏" class="headerlink" title="评估一个分类器的好坏"></a>评估一个分类器的好坏</h3><p>我们先用传统的交叉验证，可以看到精确度已经很不错了。但是着这往往是不够的。在这个二分类问题上，否的占了绝大多数那么精确的自然就很高。<br>所以我们需要其他的的评估方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line">cross_val_score(sgd_clf, X_train, y_train_5, cv = <span class="number">3</span>, scoring = <span class="string">'accuracy'</span>)</span><br><span class="line"><span class="comment">#cv 多少折</span></span><br><span class="line"><span class="comment"># 采用精确度的衡量 array([0.9587 , 0.95975, 0.95095])</span></span><br></pre></td></tr></table></figure><pre><code>array([0.965  , 0.95905, 0.9616 ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.base <span class="keyword">import</span> BaseEstimator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Never5Classifier</span><span class="params">(BaseEstimator)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y = None)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> np.zeros((len(X), <span class="number">1</span>), dtype = bool)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> StratifiedKFold</span><br><span class="line"><span class="keyword">from</span> sklearn.base <span class="keyword">import</span> clone</span><br><span class="line">skfolds = StratifiedKFold(n_splits = <span class="number">3</span>, random_state = <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> train_index, test_index <span class="keyword">in</span> skfolds.split(X_train, y_train_5):</span><br><span class="line">    clone_clf = clone(sgd_clf)</span><br><span class="line">    X_train_folds = X_train[train_index]</span><br><span class="line">    y_train_folds = y_train_5[train_index]</span><br><span class="line">    X_test_fold = X_train[test_index]</span><br><span class="line">    y_test_fold = y_train_5[test_index]</span><br><span class="line">    </span><br><span class="line">    clone_clf.fit(X_train_folds,y_train_folds)</span><br><span class="line">    y_pred = clone_clf.predict(X_test_fold)</span><br><span class="line">    n_correct = sum(y_pred == y_test_fold)</span><br><span class="line">    </span><br><span class="line">    print(n_correct / len(y_pred))</span><br></pre></td></tr></table></figure><pre><code>0.9650.959050.9616</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">never_5_clf = Never5Classifier()</span><br><span class="line">cross_val_score(never_5_clf, X_train, y_train_5, cv = <span class="number">3</span>, scoring = <span class="string">'accuracy'</span>)</span><br><span class="line"><span class="comment">#array([0.91155, 0.9091 , 0.9083 ])</span></span><br></pre></td></tr></table></figure><pre><code>array([0.909  , 0.90955, 0.9104 ])</code></pre><h4 id="使用其他评判方法-—-采用混淆矩阵来查看具体的预测情况"><a href="#使用其他评判方法-—-采用混淆矩阵来查看具体的预测情况" class="headerlink" title="使用其他评判方法 — 采用混淆矩阵来查看具体的预测情况"></a>使用其他评判方法 — 采用混淆矩阵来查看具体的预测情况</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_predict  <span class="comment"># not corss_val_scores</span></span><br><span class="line">y_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv = <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix </span><br><span class="line">confusion_matrix(y_train_5, y_train_pred)</span><br></pre></td></tr></table></figure><pre><code>array([[53735,   844],       [ 1372,  4049]], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confusion_matrix(y_train_5, y_train_5)</span><br></pre></td></tr></table></figure><pre><code>array([[54579,     0],       [    0,  5421]], dtype=int64)</code></pre><p>我们给出其他的评估方式</p><script type="math/tex; mode=display">正项预测正确的比上所有正确的：：\text { precision }=\frac{T P}{T P+F P}</script><script type="math/tex; mode=display">正项预测正确的的比上预测正确的：：\text { recall }=\frac{T P}{T P+F N}</script><p>sklearn同样帮我们实现了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_score, recall_score</span><br><span class="line"></span><br><span class="line">precision_score(y_train_5, y_train_pred) <span class="comment">#0.7913295996681187</span></span><br><span class="line"></span><br><span class="line">recall_score(y_train_5, y_train_pred)<span class="comment">#0.7037446965504519</span></span><br></pre></td></tr></table></figure><pre><code>0.6935989669802619</code></pre><p>新的问题又出现了 precision 和 recall 之间有如何权衡呢我们可以用f1值</p><script type="math/tex; mode=display">F_{1}=\frac{2}{\frac{1}{\text { precision }}+\frac{1}{\text { recall }}}=2 \times \frac{\text { precision } \times \text { recall }}{\text { precision }+\text { recall }}=\frac{T P}{T P+\frac{F N+F P}{2}}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line">f1_score(y_train_5, y_train_pred) <span class="comment">#0.7449716852177309</span></span><br></pre></td></tr></table></figure><pre><code>0.7606716568885292</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_scores = sgd_clf.decision_function([some_digit])</span><br><span class="line">y_scores <span class="comment">#array([45727.05659041])</span></span><br></pre></td></tr></table></figure><pre><code>array([181985.89677917])</code></pre><p>在不同的情况下我们需求的precision 和 recall 大小不一，我们可以修改阈值来获取更准确的判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">threshold = <span class="number">20000</span> <span class="comment">#300000</span></span><br><span class="line">y_some_digit_pred = (y_scores &gt; threshold)</span><br><span class="line">y_some_digit_pred <span class="comment">#array([ True]) array([False])</span></span><br></pre></td></tr></table></figure><pre><code>array([ True])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_scores = cross_val_predict(sgd_clf, X_train, y_train_5, cv = <span class="number">3</span>, method = <span class="string">"decision_function"</span>)</span><br></pre></td></tr></table></figure><h4 id="画出-precision-与-recall-的曲线来进行决策"><a href="#画出-precision-与-recall-的曲线来进行决策" class="headerlink" title="画出 precision 与 recall 的曲线来进行决策"></a>画出 precision 与 recall 的曲线来进行决策</h4><p>由图中我们可以看到 precision 和 recall 是成负相关的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_recall_curve</span><br><span class="line"></span><br><span class="line">precisions, recalls, thresholds = precision_recall_curve(y_train_5, y_scores)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_precision_recall_vs_threshold</span><span class="params">(precisions, recalls, thresholds)</span>:</span></span><br><span class="line">    plt.plot(thresholds, precisions[: <span class="number">-1</span>], <span class="string">"b--"</span>, label = <span class="string">"Precision"</span>, linewidth=<span class="number">2</span>) <span class="comment"># x, y,  "blue- -"</span></span><br><span class="line">    plt.plot(thresholds, recalls[: <span class="number">-1</span>], <span class="string">'g-'</span>, label = <span class="string">"Recall"</span>, linewidth=<span class="number">2</span>) </span><br><span class="line">    plt.xlabel(<span class="string">"Threshold"</span>)</span><br><span class="line">    plt.legend(loc = <span class="string">"upper left"</span>)</span><br><span class="line">    plt.ylim([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    plt.xlim([<span class="number">-700000</span>, <span class="number">700000</span>])</span><br><span class="line">plot_precision_recall_vs_threshold(precisions, recalls, thresholds)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_34_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(recalls, precisions)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_35_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_train_pred_90 = (y_scores &gt; <span class="number">70000</span>)</span><br><span class="line">precision_score(y_train_5, y_train_pred_90)<span class="comment">#0.9194610778443114</span></span><br></pre></td></tr></table></figure><pre><code>0.9118254202300207</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recall_score(y_train_5, y_train_pred_90) <span class="comment">#0.5665006456373363</span></span><br></pre></td></tr></table></figure><pre><code>0.5703744696550452</code></pre><h4 id="ROC-receiver-operating-characteristic-曲线图"><a href="#ROC-receiver-operating-characteristic-曲线图" class="headerlink" title="ROC  receiver  operating  characteristic  曲线图"></a>ROC  receiver  operating  characteristic  曲线图</h4><p>PR曲线会面临一个问题，当需要获得更高recall时，model需要输出更多的样本，precision可能会伴随出现下降/不变/升高，得到的曲线会出现浮动差异（出现锯齿），无法像ROC一样保证单调性。所以，对于正负样本分布大致均匀的问题，ROC曲线作为性能指标更好。<br> PR图和ROC图使用， 如果poitivecalss 少 或者 相较false negatives 更在意 false positives的时候 使用RP 反之就可以使用ROC图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve</span><br><span class="line">fpr, tpr, thresholds = roc_curve(y_train_5, y_scores)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_roc_curve</span><span class="params">(fpr, tpr, label = None)</span>:</span></span><br><span class="line">    plt.plot(fpr, tpr, linewidth = <span class="number">2</span>, label = label)</span><br><span class="line">    plt.plot([<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], <span class="string">'k--'</span>)</span><br><span class="line">    plt.axis([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    plt.xlabel(<span class="string">'False Positive Rate'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'True Positive Rate'</span>)</span><br><span class="line">plot_roc_curve(fpr, tpr)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_39_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_auc_score</span><br><span class="line">roc_auc_score(y_train_5, y_scores) <span class="comment">#0.9633748472261346 计算出面积</span></span><br></pre></td></tr></table></figure><pre><code>0.9594366171439257</code></pre><p>换个分类算法看看ROC的面积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line">forest_clf = RandomForestClassifier(random_state = <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">y_probas_forest = cross_val_predict(forest_clf, X_train, y_train_5, cv = <span class="number">3</span>,method = <span class="string">"predict_proba"</span>)</span><br><span class="line">y_scores_forest = y_probas_forest[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">fpr_forest, tpr_forest, thresholds_forest = roc_curve(y_train_5,y_scores_forest)</span><br><span class="line"></span><br><span class="line">plt.plot(fpr, tpr, <span class="string">"b:"</span>, label = <span class="string">"SGD"</span>)</span><br><span class="line">plot_roc_curve(fpr_forest, tpr_forest, <span class="string">"Random Forest"</span>)</span><br><span class="line">plt.legend(loc = <span class="string">"bottom right"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_42_0.png" alt="png"></p><h3 id="多分类"><a href="#多分类" class="headerlink" title="多分类"></a>多分类</h3><p>如果是用二分类器 分类多分类问题 sklearn 自动转成 OvA </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sgd_clf.fit(X_train, y_train)</span><br><span class="line">sgd_clf.predict([some_digit]) <span class="comment">#array([5.]) some_digit = X[36000]</span></span><br></pre></td></tr></table></figure><pre><code>array([5.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">some_digit_scores = sgd_clf.decision_function([some_digit])</span><br><span class="line">some_digit_scores</span><br></pre></td></tr></table></figure><pre><code>array([[-155608.02760533, -555690.96286451, -356978.92322184,        -175413.31640276, -447476.21501408,  181985.89677917,        -635600.35487992, -405225.45597096, -721820.14291054,        -747332.14490551]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.argmax(some_digit_scores) <span class="comment"># 5</span></span><br><span class="line">sgd_clf.classes_ <span class="comment">#array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])</span></span><br></pre></td></tr></table></figure><pre><code>array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])</code></pre><p>如果使用OVO形式</p><script type="math/tex; mode=display">classifiers的数量N \times(N-1) / 2</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.multiclass <span class="keyword">import</span> OneVsOneClassifier</span><br><span class="line">ovo_clf = OneVsOneClassifier(SGDClassifier(random_state = <span class="number">42</span>))</span><br><span class="line">ovo_clf.fit(X_train, y_train)</span><br><span class="line">ovo_clf.predict([some_digit])<span class="comment">#array([5.])</span></span><br><span class="line">len(ovo_clf.estimators_) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure><pre><code>45</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">forest_clf.fit(X_train, y_train)</span><br><span class="line">forest_clf.predict([some_digit]) </span><br><span class="line">forest_clf.predict_proba([some_digit]) <span class="comment">#array([[0. , 0. , 0.1, 0.2, 0. , 0.6, 0. , 0.1, 0. , 0. ]])</span></span><br></pre></td></tr></table></figure><pre><code>array([[0.1, 0. , 0.1, 0. , 0. , 0.8, 0. , 0. , 0. , 0. ]])</code></pre><h4 id="交叉验证，-标准化"><a href="#交叉验证，-标准化" class="headerlink" title="交叉验证， 标准化"></a>交叉验证， 标准化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cross_val_score(sgd_clf, X_train, y_train, cv=<span class="number">3</span>, scoring=<span class="string">"accuracy"</span>) <span class="comment">#array([0.86842631, 0.87664383, 0.86888033])</span></span><br></pre></td></tr></table></figure><pre><code>array([0.86612677, 0.87064353, 0.85777867])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_train_scaled = scaler.fit_transform(X_train.astype(np.float64))</span><br><span class="line">cross_val_score(sgd_clf, X_train_scaled, y_train, cv = <span class="number">3</span>, scoring = <span class="string">"accuracy"</span>) <span class="comment"># array([0.91226755, 0.90839542, 0.90818623])</span></span><br><span class="line"><span class="comment"># 有所提升</span></span><br></pre></td></tr></table></figure><pre><code>array([0.90831834, 0.91114556, 0.9086863 ])</code></pre><h4 id="误差分析-进一步提高模型质量"><a href="#误差分析-进一步提高模型质量" class="headerlink" title="误差分析 进一步提高模型质量"></a>误差分析 进一步提高模型质量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y_train_pred = cross_val_predict(sgd_clf, X_train_scaled, y_train, cv = <span class="number">3</span>)</span><br><span class="line">conf_mx = confusion_matrix(y_train, y_train_pred)</span><br><span class="line">conf_mx</span><br></pre></td></tr></table></figure><pre><code>array([[5720,    3,   24,    8,   12,   56,   46,    8,   41,    5],       [   2, 6473,   48,   29,    6,   42,    8,   12,  112,   10],       [  54,   38, 5331,   97,   88,   25,  102,   52,  158,   13],       [  48,   38,  135, 5370,    3,  217,   39,   58,  131,   92],       [  26,   28,   36,    7, 5340,    8,   52,   29,   86,  230],       [  72,   38,   36,  196,   76, 4596,  105,   29,  176,   97],       [  38,   26,   39,    1,   40,   96, 5625,    6,   46,    1],       [  20,   27,   68,   30,   54,   10,    7, 5811,   17,  221],       [  49,  158,   80,  161,   15,  162,   57,   24, 5002,  143],       [  44,   36,   25,   96,  137,   29,    3,  207,   77, 5295]],      dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.matshow(conf_mx, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_56_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">row_sums = conf_mx.sum(axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">norm_conf_mx = conf_mx / row_sums</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(row_sums)</span></span><br><span class="line"><span class="comment"># print(norm_conf_mx)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.fill_diagonal(norm_conf_mx, <span class="number">0</span>)</span><br><span class="line">plt.matshow(norm_conf_mx, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_59_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">y_train_large = (y_train &gt;= <span class="number">7</span>)</span><br><span class="line">y_train_odd = (y_train % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">y_multilabel = np.c_[y_train_large, y_train_odd]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">knn_clf = KNeighborsClassifier()</span><br><span class="line">knn_clf.fit(X_train, y_multilabel)</span><br></pre></td></tr></table></figure><pre><code>KNeighborsClassifier(algorithm=&#39;auto&#39;, leaf_size=30, metric=&#39;minkowski&#39;,           metric_params=None, n_jobs=None, n_neighbors=5, p=2,           weights=&#39;uniform&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn_clf.predict([some_digit])</span><br></pre></td></tr></table></figure><pre><code>array([[False,  True]])</code></pre><p>宏平均和微平均的对比</p><p>如果每个class的样本数量差不多,那么宏平均和微平均没有太大差异 <br><br>如果每个class的样本数量差异很大,而且你想:<br><br>更注重样本量多的class:使用微平均<br><br>更注重样本量少的class:使用宏平均<br><br>如果微平均大大低于宏平均,检查样本量多的class</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y_train_knn_pred = cross_val_predict(knn_clf, X_train, y_train, cv = <span class="number">3</span>)</span><br><span class="line">f1_score(y_train, y_train_knn_pred, average=<span class="string">"macro"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">noise = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (len(X_train), <span class="number">784</span>))</span><br><span class="line">X_train_mod = X_train + noise</span><br><span class="line">noise = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (len(X_test), <span class="number">784</span>))</span><br><span class="line">X_test_mod = X_test + noise</span><br><span class="line">y_train_mod = X_train</span><br><span class="line">y_test_mod = X_test</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">some_index = <span class="number">5500</span></span><br><span class="line">plt.subplot(<span class="number">121</span>); plot_digit(X_test_mod[some_index])</span><br><span class="line">plt.subplot(<span class="number">122</span>); plot_digit(y_test_mod[some_index])</span><br><span class="line">save_fig(<span class="string">"noisy_digit_example_plot"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">knn_clf.fit(X_train_mod, y_train_mod)</span><br><span class="line">clean_digit = knn_clf.predict([X_test_mode[some_index]])</span><br><span class="line">plot_digit(clean_digit)</span><br><span class="line">save_fig(<span class="string">"cleaned_digit_example_plot"</span>)</span><br></pre></td></tr></table></figure><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="将KNeighborsClassifer-的-accuracy-提高的到-97-上"><a href="#将KNeighborsClassifer-的-accuracy-提高的到-97-上" class="headerlink" title="将KNeighborsClassifer 的  accuracy 提高的到  97%  上"></a>将KNeighborsClassifer 的  accuracy 提高的到  97%  上</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">param_grid = [&#123;<span class="string">'weights'</span>: [<span class="string">"distance"</span>], <span class="string">'n_neighbors'</span>: [<span class="number">4</span>]&#125;]</span><br><span class="line"></span><br><span class="line">knn_clf = KNeighborsClassifier()</span><br><span class="line">grid_search = GridSearchCV(knn_clf, param_grid, cv = <span class="number">2</span>, verbose = <span class="number">3</span>, n_jobs = <span class="number">1</span>) <span class="comment">#verbose 提示信息 # n_jobs:用来设定CPU运行情况</span></span><br><span class="line"></span><br><span class="line">grid_search.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><pre><code>Fitting 2 folds for each of 1 candidates, totalling 2 fits[CV] n_neighbors=4, weights=distance .................................[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_search.best_params_</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">y_pred = grid_search.predict(X_test)</span><br><span class="line">accuracy_score(y_test, y_pred)</span><br></pre></td></tr></table></figure><h3 id="训练集中加入图片上下左右移动后的图片，再看效果如何"><a href="#训练集中加入图片上下左右移动后的图片，再看效果如何" class="headerlink" title="训练集中加入图片上下左右移动后的图片，再看效果如何"></a>训练集中加入图片上下左右移动后的图片，再看效果如何</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.ndimage.interpolation <span class="keyword">import</span> shift</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_image</span><span class="params">(image, dx, dy)</span>:</span></span><br><span class="line">    image = image.reshape((<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">    shifted_image = shift(image,[dy, dx], cval = <span class="number">0</span>, mode = <span class="string">"constant"</span>)</span><br><span class="line">    <span class="keyword">return</span> shifted_image.reshape([<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">image = X_train[<span class="number">1000</span>]</span><br><span class="line">shifted_image_down =shift_image(image, <span class="number">0</span> , <span class="number">5</span>)</span><br><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">3</span>))</span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">plt.title(<span class="string">"Original"</span>, fontsize = <span class="number">14</span>)</span><br><span class="line">plt.imshow(image.reshape(<span class="number">28</span>, <span class="number">28</span>), interpolation = <span class="string">"nearest"</span>, cmap = <span class="string">"Greys"</span>)</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">plt.title(<span class="string">"Shifted down"</span>, fontsize = <span class="number">14</span>)</span><br><span class="line">plt.imshow(shifted_image_down.reshape(<span class="number">28</span>, <span class="number">28</span>), cmap = <span class="string">"Greys"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_77_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">X_train_augmented = [image <span class="keyword">for</span> image <span class="keyword">in</span> X_train]</span><br><span class="line">y_train_augmented = [label <span class="keyword">for</span> label <span class="keyword">in</span> y_train]</span><br><span class="line"><span class="comment">#上下左右移动一个点</span></span><br><span class="line"><span class="keyword">for</span> dx, dy <span class="keyword">in</span> ((<span class="number">1</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">-1</span>)):</span><br><span class="line">    <span class="keyword">for</span> image, label <span class="keyword">in</span> zip(X_train, y_train):</span><br><span class="line">        X_train_augmented.append(shift_image(image, dx, dy))</span><br><span class="line">        y_train_augmented.append(label)</span><br><span class="line"></span><br><span class="line">X_train_augmented = np.array(X_train_augmented)</span><br><span class="line">y_train_augmented = np.array(y_train_augmented)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shuffle_idx = np.random.permutation(len(X_train_augmented))</span><br><span class="line">X_train_augmented = X_train_augmented[shuffle_idx]</span><br><span class="line">y_train_augmented = y_train_augmented[shuffle_idx]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">knn_clf = KNeighborsClassifier(n_neighbors = <span class="number">4</span>,weights = <span class="string">'distance'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knn_clf.fit(X_train_augmented, y_train_augmented)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_pred = knn_clf.predict(X_test)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">accuracy_score(y_test, y_pred)</span><br></pre></td></tr></table></figure><h3 id="kaggle-泰坦尼克"><a href="#kaggle-泰坦尼克" class="headerlink" title="kaggle 泰坦尼克"></a>kaggle 泰坦尼克</h3><h4 id="数据的读取，整理"><a href="#数据的读取，整理" class="headerlink" title="数据的读取，整理"></a>数据的读取，整理</h4><ul><li>同样首先需要获取数据源（），然后查看数据的分布情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">TITANIC_PATH = os.path.join(<span class="string">"datasets"</span>,<span class="string">"titanic"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_titanic_data</span><span class="params">(filename, titanic_path = TITANIC_PATH)</span>:</span></span><br><span class="line">    csv_path = os.path.join(titanic_path, filename)</span><br><span class="line">    <span class="keyword">return</span> pd.read_csv(csv_path)</span><br><span class="line"></span><br><span class="line">train_data = load_titanic_data(<span class="string">"train.csv"</span>)</span><br><span class="line">test_data = load_titanic_data(<span class="string">"test.csv"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data = load_titanic_data(<span class="string">"train.csv"</span>)</span><br><span class="line">test_data = load_titanic_data(<span class="string">"test.csv"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns):PassengerId    891 non-null int64Survived       891 non-null int64Pclass         891 non-null int64Name           891 non-null objectSex            891 non-null objectAge            714 non-null float64SibSp          891 non-null int64Parch          891 non-null int64Ticket         891 non-null objectFare           891 non-null float64Cabin          204 non-null objectEmbarked       889 non-null objectdtypes: float64(2), int64(5), object(5)memory usage: 83.6+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>714.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <th>mean</th>      <td>446.000000</td>      <td>0.383838</td>      <td>2.308642</td>      <td>29.699118</td>      <td>0.523008</td>      <td>0.381594</td>      <td>32.204208</td>    </tr>    <tr>      <th>std</th>      <td>257.353842</td>      <td>0.486592</td>      <td>0.836071</td>      <td>14.526497</td>      <td>1.102743</td>      <td>0.806057</td>      <td>49.693429</td>    </tr>    <tr>      <th>min</th>      <td>1.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.420000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>223.500000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>20.125000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>7.910400</td>    </tr>    <tr>      <th>50%</th>      <td>446.000000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>28.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>14.454200</td>    </tr>    <tr>      <th>75%</th>      <td>668.500000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>38.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>31.000000</td>    </tr>    <tr>      <th>max</th>      <td>891.000000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>80.000000</td>      <td>8.000000</td>      <td>6.000000</td>      <td>512.329200</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">train_data.hist(bins = <span class="number">100</span>, figsize = (<span class="number">20</span>, <span class="number">15</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_93_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">corr_matrix = train_data.corr()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">corr_matrix[<span class="string">"Survived"</span>].sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>Survived       1.000000Fare           0.257307Parch          0.081629PassengerId   -0.005007SibSp         -0.035322Age           -0.077221Pclass        -0.338481Name: Survived, dtype: float64</code></pre><p> 我们看到数据中有非数字等等，所以我们分开处理。使用pipeline 一次性完成数据的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.base <span class="keyword">import</span> BaseEstimator, TransformerMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataFrameSelector</span><span class="params">(BaseEstimator, TransformerMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, attribute_names)</span>:</span></span><br><span class="line">        self.attribute_names = attribute_names</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y = None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(self, X, y = None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> X[self.attribute_names]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Inspired from stackoverflow.com/questions/25239958</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MostFrequentImputer</span><span class="params">(BaseEstimator, TransformerMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y=None)</span>:</span></span><br><span class="line">        self.most_frequent_ = pd.Series([X[c].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> c <span class="keyword">in</span> X],</span><br><span class="line">                                        index=X.columns)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(self, X, y=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> X.fillna(self.most_frequent_)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler </span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder, OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> FeatureUnion</span><br><span class="line"></span><br><span class="line"><span class="comment"># train_num = train_data.drop(["PassengerId","Name","Sex","Ticket","Cabin", "Embarked"],  axis = 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(num_atttribs, cat_tribs)</span>:</span></span><br><span class="line">    num_pipeline = Pipeline([</span><br><span class="line">         (<span class="string">'selector'</span>, DataFrameSelector(num_attribs)),</span><br><span class="line">         (<span class="string">'imputer'</span>, MostFrequentImputer()),</span><br><span class="line"><span class="comment">#     ('std_scaler', StandardScaler()),</span></span><br><span class="line">    ])</span><br><span class="line">    cat_pipeline = Pipeline([</span><br><span class="line">         (<span class="string">'seletor'</span>, DataFrameSelector(cat_tribs)),</span><br><span class="line">         (<span class="string">"imputer"</span>, MostFrequentImputer()),</span><br><span class="line">         (<span class="string">"cat_encoder"</span>, OneHotEncoder(sparse=<span class="literal">False</span>)),</span><br><span class="line">    ])</span><br><span class="line">    full_pipeline = FeatureUnion(transformer_list = [</span><br><span class="line">         (<span class="string">"num_pipeline"</span>, num_pipeline),</span><br><span class="line">         (<span class="string">"cat_pipeline"</span>, cat_pipeline),</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> full_pipeline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_attribs = [<span class="string">"Age"</span>, <span class="string">"SibSp"</span>, <span class="string">"Parch"</span>, <span class="string">"Fare"</span>]</span><br><span class="line">cat_attribs = [<span class="string">"Pclass"</span>,<span class="string">"Sex"</span>,<span class="string">"Embarked"</span>]</span><br><span class="line">full_pipeline = handle(num_attribs, cat_attribs)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_prepared = full_pipeline.fit_transform(train_data)</span><br><span class="line"></span><br><span class="line">X_test = full_pipeline.fit_transform(test_data) <span class="comment"># 测试集 也是需要处理的</span></span><br><span class="line">train_prepared</span><br></pre></td></tr></table></figure><pre><code>array([[22.,  1.,  0., ...,  0.,  0.,  1.],       [38.,  1.,  0., ...,  1.,  0.,  0.],       [26.,  0.,  0., ...,  0.,  0.,  1.],       ...,       [24.,  1.,  2., ...,  0.,  0.,  1.],       [26.,  0.,  0., ...,  1.,  0.,  0.],       [32.,  0.,  0., ...,  0.,  1.,  0.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_train = train_data[<span class="string">"Survived"</span>]</span><br></pre></td></tr></table></figure><h4 id="小鹿乱撞"><a href="#小鹿乱撞" class="headerlink" title="小鹿乱撞"></a>小鹿乱撞</h4><h5 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line">lin_clf = SGDClassifier()</span><br><span class="line">lin_clf.fit(train_prepared, y_train)</span><br><span class="line">linear_scores = cross_val_score(lin_clf, train_prepared, y_train, cv=<span class="number">10</span>)</span><br><span class="line">print(<span class="string">"linear_model:"</span>, linear_scores.mean()) <span class="comment">#linear_model: 0.6868817387356714</span></span><br></pre></td></tr></table></figure><pre><code>linear_model: 0.6962870275791625</code></pre><h5 id="svm"><a href="#svm" class="headerlink" title="svm"></a>svm</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line">svm_clf = SVC(gamma = <span class="string">"auto"</span>)</span><br><span class="line">svm_clf.fit(train_prepared, y_train)</span><br><span class="line">svm_scores = cross_val_score(svm_clf, train_prepared, y_train, cv=<span class="number">10</span>)</span><br><span class="line">print(<span class="string">"svm:"</span>, svm_scores.mean()) <span class="comment">#svm: 0.7365250822835092</span></span><br></pre></td></tr></table></figure><pre><code>svm: 0.7386715469299737</code></pre><h5 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a><font color="red">随机森林</font></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">forest_clf = RandomForestClassifier(n_estimators = <span class="number">100</span>, random_state=<span class="number">42</span>)</span><br><span class="line">forest_scores = cross_val_score(forest_clf, train_prepared, y_train, cv=<span class="number">10</span>)</span><br><span class="line">forest_scores.mean()</span><br><span class="line">print(<span class="string">"ensemble:"</span>, forest_scores.mean()) <span class="comment">#ensemble: 0.8149526160481217</span></span><br></pre></td></tr></table></figure><pre><code>ensemble: 0.809334354783793</code></pre><h5 id="最近邻试试"><a href="#最近邻试试" class="headerlink" title="最近邻试试"></a>最近邻试试</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">knn_clf = KNeighborsClassifier(n_neighbors = <span class="number">4</span>,weights = <span class="string">'distance'</span>)</span><br><span class="line">knn_scores = cross_val_score(knn_clf, train_prepared, y_train, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"neighbors:"</span>, knn_scores.mean()) <span class="comment">#neighbors: 0.7240517534899558</span></span><br></pre></td></tr></table></figure><pre><code>neighbors: 0.7229029054590852</code></pre><h4 id="继续优化-1-调参-2-年龄分层-3…"><a href="#继续优化-1-调参-2-年龄分层-3…" class="headerlink" title="继续优化 1.调参 2.年龄分层 3…."></a>继续优化 1.调参 2.年龄分层 3….</h4><h5 id="调参"><a href="#调参" class="headerlink" title="调参"></a>调参</h5><p>（0.8149526160481217 —— 0.8317563273181252)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="comment">#参数调好了我就只留下了 最优的参数</span></span><br><span class="line">param_grid = &#123; </span><br><span class="line">    <span class="string">'n_estimators'</span>: [<span class="number">100</span>],</span><br><span class="line">    <span class="string">'max_features'</span>: [<span class="string">'auto'</span>],</span><br><span class="line">    <span class="string">'min_samples_leaf'</span> :[<span class="number">2</span>],</span><br><span class="line">    <span class="string">'min_samples_split'</span>:[<span class="number">2</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">grid_search = GridSearchCV(forest_clf, param_grid, cv = <span class="number">5</span>, scoring = <span class="string">'neg_mean_squared_error'</span>)</span><br><span class="line">grid_search.fit(train_prepared, y_train)</span><br><span class="line">grid_search.best_params_ <span class="comment">#&#123;'max_features': 'auto', 'n_estimators': 50&#125;</span></span><br></pre></td></tr></table></figure><pre><code>{&#39;max_features&#39;: &#39;auto&#39;, &#39;min_samples_leaf&#39;: 2, &#39;min_samples_split&#39;: 2, &#39;n_estimators&#39;: 100}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">forest_clf = RandomForestClassifier(n_estimators = <span class="number">100</span>,max_features = <span class="string">'auto'</span>, min_samples_leaf = <span class="number">2</span>, max_depth = <span class="number">20</span>,random_state=<span class="number">42</span>)</span><br><span class="line">forest_scores = cross_val_score(forest_clf, train_prepared, y_train, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"ensemble:"</span>, forest_scores.mean()) <span class="comment">#ensemble: 0.8317563273181252</span></span><br><span class="line"></span><br><span class="line">forest_clf.fit(train_prepared, y_train)</span><br><span class="line">predictions = forest_clf.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test = pd.DataFrame(X_test)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># my_submission = pd.DataFrame(&#123;'PassengerId': test_data['PassengerId'],'Survived': predictions&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># my_submission.to_csv('./submission.csv', index=False)</span></span><br></pre></td></tr></table></figure><pre><code>ensemble: 0.8294716831233686</code></pre><h5 id="年龄分层"><a href="#年龄分层" class="headerlink" title="年龄分层"></a>年龄分层</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">"AgeBucket"</span>] = train_data[<span class="string">"Age"</span>] // <span class="number">15</span> * <span class="number">15</span></span><br><span class="line">train_data[[<span class="string">"AgeBucket"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'AgeBucket'</span>]).mean()</span><br><span class="line">train = train_data.drop(<span class="string">'Age'</span>, axis = <span class="number">1</span>)</span><br><span class="line">train.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns):PassengerId    891 non-null int64Survived       891 non-null int64Pclass         891 non-null int64Name           891 non-null objectSex            891 non-null objectSibSp          891 non-null int64Parch          891 non-null int64Ticket         891 non-null objectFare           891 non-null float64Cabin          204 non-null objectEmbarked       889 non-null objectAgeBucket      714 non-null float64dtypes: float64(2), int64(5), object(5)memory usage: 83.6+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_attribs = [<span class="string">"AgeBucket"</span>, <span class="string">"SibSp"</span>, <span class="string">"Parch"</span>, <span class="string">"Fare"</span>]</span><br><span class="line">cat_attribs = [<span class="string">"Pclass"</span>,<span class="string">"Sex"</span>,<span class="string">"Embarked"</span>]</span><br><span class="line">full_pipeline = handle(num_attribs, cat_attribs)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_prepared = full_pipeline.fit_transform(train)</span><br><span class="line">train_prepared</span><br></pre></td></tr></table></figure><pre><code>array([[15.,  1.,  0., ...,  0.,  0.,  1.],       [30.,  1.,  0., ...,  1.,  0.,  0.],       [15.,  0.,  0., ...,  0.,  0.,  1.],       ...,       [15.,  1.,  2., ...,  0.,  0.,  1.],       [15.,  0.,  0., ...,  1.,  0.,  0.],       [30.,  0.,  0., ...,  0.,  1.,  0.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">forest_clf = RandomForestClassifier(n_estimators = <span class="number">100</span>,max_features = <span class="string">'auto'</span>, min_samples_leaf = <span class="number">2</span>, max_depth = <span class="number">20</span>,random_state=<span class="number">42</span>)</span><br><span class="line">forest_scores = cross_val_score(forest_clf, train_prepared, y_train, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"ensemble:"</span>, forest_scores.mean()) <span class="comment">#  ensemble: 0.8294211780728634 反而还降低了</span></span><br></pre></td></tr></table></figure><pre><code>ensemble: 0.8272242083758938</code></pre><h5 id="属性融合"><a href="#属性融合" class="headerlink" title="属性融合"></a>属性融合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">"RelativesOnboard"</span>] = train[<span class="string">"SibSp"</span>] + train[<span class="string">"Parch"</span>]</span><br><span class="line">train[[<span class="string">"RelativesOnboard"</span>, <span class="string">"Survived"</span>]].groupby([<span class="string">'RelativesOnboard'</span>]).mean()</span><br><span class="line"></span><br><span class="line">train_cb = train.drop([<span class="string">"SibSp"</span>,<span class="string">"Parch"</span>], axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_attribs = [<span class="string">"AgeBucket"</span>, <span class="string">"Fare"</span>] <span class="comment">#, "SibSp", "Parch",</span></span><br><span class="line">cat_attribs = [<span class="string">"Pclass"</span>,<span class="string">"Sex"</span>,<span class="string">"Embarked"</span>]</span><br><span class="line">full_pipeline = handle(num_attribs, cat_attribs)</span><br><span class="line"></span><br><span class="line">train_prepared = full_pipeline.fit_transform(train_cb)</span><br><span class="line">train_prepared</span><br></pre></td></tr></table></figure><pre><code>array([[15.    ,  7.25  ,  0.    , ...,  0.    ,  0.    ,  1.    ],       [30.    , 71.2833,  1.    , ...,  1.    ,  0.    ,  0.    ],       [15.    ,  7.925 ,  0.    , ...,  0.    ,  0.    ,  1.    ],       ...,       [15.    , 23.45  ,  0.    , ...,  0.    ,  0.    ,  1.    ],       [15.    , 30.    ,  1.    , ...,  1.    ,  0.    ,  0.    ],       [30.    ,  7.75  ,  0.    , ...,  0.    ,  1.    ,  0.    ]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">forest_clf = RandomForestClassifier(n_estimators = <span class="number">100</span>,max_features = <span class="string">'auto'</span>, min_samples_leaf = <span class="number">2</span>, max_depth = <span class="number">20</span>,random_state=<span class="number">42</span>)</span><br><span class="line">forest_scores = cross_val_score(forest_clf, train_prepared, y_train, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"ensemble:"</span>, forest_scores.mean()) <span class="comment">#</span></span><br></pre></td></tr></table></figure><pre><code>ensemble: 0.8294211780728634</code></pre><ul><li>这机个方式不仅没有提升，反而还下降了。目前最高的得分就是以最优参数的随机森林分类算法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hand-on-3&quot;&gt;&lt;a href=&quot;#Hand-on-3&quot; class=&quot;headerlink&quot; title=&quot;Hand - on 3&quot;&gt;&lt;/a&gt;Hand - on 3&lt;/h1&gt;&lt;h2 id=&quot;分类任务&quot;&gt;&lt;a href=&quot;#分类任务&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="ml" scheme="http://yoursite.com/categories/ml/"/>
    
    
  </entry>
  
  <entry>
    <title>DP相关算法题</title>
    <link href="http://yoursite.com/2019/08/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E9%9A%BE%E5%BA%A6easey%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/09/动态规划（难度easey）/</id>
    <published>2019-08-09T06:57:15.000Z</published>
    <updated>2019-09-12T01:08:28.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DP相关算法题"><a href="#DP相关算法题" class="headerlink" title="DP相关算法题"></a>DP相关算法题</h3><h4 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="198. House Robber"></a><a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="noopener">198. House Robber</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>)<span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">2</span>)<span class="keyword">return</span> Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span> [nums.length + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> res = dp[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">            res = Math.max(res, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="213-House-Robber-II"><a href="#213-House-Robber-II" class="headerlink" title="213. House Robber II"></a><a href="https://leetcode.com/problems/house-robber-ii/" target="_blank" rel="noopener">213. House Robber II</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo</span></span><br><span class="line"><span class="keyword">package</span> leleyi.study.algorithms.dp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseRObber2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> temp0, temp1, cur0 = <span class="number">0</span>, cur1 = <span class="number">0</span>, pre0 = <span class="number">0</span>, pre1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//begin at 0</span></span><br><span class="line">            temp0 = pre0;</span><br><span class="line">            pre0 = cur0;</span><br><span class="line">            cur0 = Math.max(temp0 + nums[i], cur0);</span><br><span class="line"><span class="comment">//begin at 1</span></span><br><span class="line">            temp1 = pre1;</span><br><span class="line">            pre1 = cur1;</span><br><span class="line">            cur1 = Math.max(temp1 + nums[i + <span class="number">1</span>], cur1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(cur0, cur1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="746-Min-Cost-Climbing-Stairs"><a href="#746-Min-Cost-Climbing-Stairs" class="headerlink" title="746. Min Cost Climbing Stairs"></a><a href="https://leetcode.com/problems/min-cost-climbing-stairs/" target="_blank" rel="noopener">746. Min Cost Climbing Stairs</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i] = cost[i] + min(dp[i - 1], d[i - 2])</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[cost.length + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = cost[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = cost[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; cost.length ; i++)&#123;</span><br><span class="line">            dp[i] = cost[i] + Math.min(dp[i - <span class="number">1</span>], dp[i-<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[cost.length - <span class="number">1</span>], dp[cost.length - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="62-Unique-Paths"><a href="#62-Unique-Paths" class="headerlink" title="62. Unique Paths"></a><a href="https://leetcode.com/problems/unique-paths/" target="_blank" rel="noopener">62. Unique Paths</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i][j] = dp[i - 1][j] + dp[i][j - 1];</span></span><br><span class="line"><span class="comment">// dp[j] = dp[j - 1] + dp[j];</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//         int dp[][] = new int[m + 1][n + 1];</span></span><br><span class="line"><span class="comment">//         for(int i = 0; i &lt; m; i++)&#123;</span></span><br><span class="line"><span class="comment">//             dp[i][0] = 1;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         for(int j = 0; j &lt; n; j++)&#123;</span></span><br><span class="line"><span class="comment">//             dp[0][j] = 1;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         for(int i = 1; i &lt;= m; i++)&#123;</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">//             for(int j = 1; j &lt;= n; j++)&#123;</span></span><br><span class="line"><span class="comment">//                     dp[i][j] = dp[i - 1][j] + dp[i][j - 1];</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return dp[m - 1][n - 1];</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                dp[j] = dp[j - <span class="number">1</span>] + dp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="63-Unique-Paths-II"><a href="#63-Unique-Paths-II" class="headerlink" title="63. Unique Paths II"></a><a href="https://leetcode.com/problems/unique-paths-ii/" target="_blank" rel="noopener">63. Unique Paths II</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> m = obstacleGrid.length;</span><br><span class="line">       <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">       <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">       <span class="keyword">if</span>(obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][i] == <span class="number">1</span>)&#123;</span><br><span class="line">               dp[i] = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               dp[i] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">               dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(obstacleGrid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                   dp[j] = <span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span>&#123;</span><br><span class="line">                   dp[j] = dp[j - <span class="number">1</span>] + dp[j];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="64-Minimum-Path-Sum"><a href="#64-Minimum-Path-Sum" class="headerlink" title="64. Minimum Path Sum"></a><a href="https://leetcode.com/problems/minimum-path-sum/" target="_blank" rel="noopener">64. Minimum Path Sum</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// d[i][j] = min(d[i - 1][j], d[i][j - 1]) + grid[i][j]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span> [grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid[<span class="number">0</span>].length; i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + grid[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[grid.length - <span class="number">1</span>][grid[<span class="number">0</span>].length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">            dp[j] = dp[j - <span class="number">1</span>] + grid[<span class="number">0</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>] += grid[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                dp[j] = Math.min(dp[j - <span class="number">1</span>], dp[j]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a><a href="https://leetcode.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener">96. Unique Binary Search Trees</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卡特兰数　h(n)=h(n-1)*(4*n-2)/(n+1)  1, 1, 5, 14...... = C(2n, n) / n + 1;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> dp[] = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>; dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] * (<span class="number">4</span> * i - <span class="number">2</span>) / (i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="95-Unique-Binary-Search-Trees-II"><a href="#95-Unique-Binary-Search-Trees-II" class="headerlink" title="95. Unique Binary Search Trees II"></a><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/" target="_blank" rel="noopener">95. Unique Binary Search Trees II</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TODO</span><br></pre></td></tr></table></figure><h4 id="120-Triangle"><a href="#120-Triangle" class="headerlink" title="120. Triangle"></a><a href="https://leetcode.com/problems/triangle/" target="_blank" rel="noopener">120. Triangle</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从最后一排往上dp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = triangle.size();</span><br><span class="line">        <span class="keyword">int</span> n = triangle.get(m - <span class="number">1</span>).size();</span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = triangle.get(m - <span class="number">1</span>).get(i);</span><br><span class="line">            System.out.println(dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line"></span><br><span class="line">                dp[j] = Math.min(dp[j+ <span class="number">1</span>], dp[j]) + triangle.get(i).get(j);</span><br><span class="line">                <span class="comment">// System.out.println(i+":"+ j +"" + "-&gt;" + dp[j]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="139-Word-Break"><a href="#139-Word-Break" class="headerlink" title="139. Word Break"></a><a href="https://leetcode.com/problems/word-break/" target="_blank" rel="noopener">139. Word Break</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span> [s.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>  i = <span class="number">1</span>; i &lt;= s.length(); i ++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>  j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(dp[j] &amp;&amp; wordDict.contains(s.substring(j,i)))&#123;</span><br><span class="line">                    dp[i] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="140-Word-Break-II"><a href="#140-Word-Break-II" class="headerlink" title="140. Word Break II"></a><a href>140. Word Break II</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todo</span><br></pre></td></tr></table></figure><h4 id="152-Maximum-Product-Subarray"><a href="#152-Maximum-Product-Subarray" class="headerlink" title="152. Maximum Product Subarray"></a><a href>152. Maximum Product Subarray</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// todo again</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">int</span>[] g = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    f[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    g[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> res = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = f[i - <span class="number">1</span>];</span><br><span class="line">            f[i - <span class="number">1</span>] = g[i - <span class="number">1</span>];</span><br><span class="line">            g[i - <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        f[i] = Math.max(f[i - <span class="number">1</span>] * nums[i], nums[i]);</span><br><span class="line">        g[i] = Math.min(g[i - <span class="number">1</span>] * nums[i], nums[i]);</span><br><span class="line">        res = Math.max(res, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="221-Maximal-Square"><a href="#221-Maximal-Square" class="headerlink" title="221. Maximal Square"></a><a href="https://leetcode.com/problems/maximal-square/" target="_blank" rel="noopener">221. Maximal Square</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = a.length, n = a[<span class="number">0</span>].length, result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]),dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                    result = Math.max(dp[i][j], result); <span class="comment">// update result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> result*result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;DP相关算法题&quot;&gt;&lt;a href=&quot;#DP相关算法题&quot; class=&quot;headerlink&quot; title=&quot;DP相关算法题&quot;&gt;&lt;/a&gt;DP相关算法题&lt;/h3&gt;&lt;h4 id=&quot;198-House-Robber&quot;&gt;&lt;a href=&quot;#198-House-Robber&quot;
      
    
    </summary>
    
    
      <category term="算法题" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>树的相关算法</title>
    <link href="http://yoursite.com/2019/08/09/%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%20%EF%BC%88%E9%9A%BE%E5%BA%A6easy%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/09/树的相关 （难度easy）/</id>
    <published>2019-08-09T06:57:15.000Z</published>
    <updated>2019-08-23T13:41:44.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树的相关-（难度easy）"><a href="#树的相关-（难度easy）" class="headerlink" title="树的相关 （难度easy）"></a>树的相关 （难度easy）</h3><h4 id="100-sameTree"><a href="#100-sameTree" class="headerlink" title="100. sameTree."></a><a href="https:// .com/problems/same-tree/" target="_blank" rel="noopener">100. sameTree</a>.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">- Definition for a binary tree node.</span></span><br><span class="line"><span class="comment">- public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">- int val;</span></span><br><span class="line"><span class="comment">- TreeNode left;</span></span><br><span class="line"><span class="comment">- TreeNode right;</span></span><br><span class="line"><span class="comment">- TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">- &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span>(p == <span class="keyword">null</span> || q == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span>(p.val != q.val)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">boolean</span> t1 = isSameTree(p.left, q.left);</span><br><span class="line">      <span class="keyword">boolean</span> t2 = isSameTree(p.right, q.right);</span><br><span class="line">      <span class="keyword">if</span>(t1 == <span class="keyword">false</span> || t2 == <span class="keyword">false</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a><a href="https:// .com/problems/symmetric-tree/" target="_blank" rel="noopener">101. Symmetric Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root.left,root.right);</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode root1, TreeNode root2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root1==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root2==<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root2==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root1==<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span>        root1.val==root2.val&amp;&amp;helper(root1.left,root2.right)&amp;&amp;helper(root1.right,root2.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a><a href="https:// .com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">104. Maximum Depth of Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a><a href="https:// .com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">107. Binary Tree Level Order Traversal II</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> LinkedList();   </span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> count = que.size();</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">while</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node = que.peek();</span><br><span class="line">                que.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) que.add(node.right);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125; </span><br><span class="line">        Collections.reverse(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a><a href="https:// .com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener">108. Convert Sorted Array to Binary Search Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lo&gt;hi) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(lo+hi)/<span class="number">2</span>;</span><br><span class="line">TreeNode node=<span class="keyword">new</span> TreeNode(arr[mid]);</span><br><span class="line"></span><br><span class="line">node.left=helper(arr, lo, mid-<span class="number">1</span>);</span><br><span class="line">node.right=helper(arr, mid+<span class="number">1</span>, hi);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="110-Balanced-Binary-Tree"><a href="#110-Balanced-Binary-Tree" class="headerlink" title="110. Balanced Binary Tree"></a><a href="https:// .com/problems/balanced-binary-tree/" target="_blank" rel="noopener">110. Balanced Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">int</span> lhigh = helper(root.left);</span><br><span class="line">        <span class="keyword">int</span> rhigh = helper(root.right);</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> Math.abs(lhigh - rhigh) &lt;= <span class="number">1</span> &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode node)</span></span>&#123;    </span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(helper(node.left), helper(node.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a><a href="https:// .com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener">111. Minimum Depth of Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = minDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = minDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> (left == <span class="number">0</span> || right == <span class="number">0</span>) ? left + right + <span class="number">1</span>: Math.min(left,right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="112-Path-Sum"><a href="#112-Path-Sum" class="headerlink" title="112. Path Sum"></a><a href="https:// .com/problems/path-sum/" target="_blank" rel="noopener">112. Path Sum</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; sum - root.val == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">return</span> hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="226-Invert-Binary-Tree"><a href="#226-Invert-Binary-Tree" class="headerlink" title="226. Invert Binary Tree"></a><a href="https:// .com/problems/invert-binary-tree/" target="_blank" rel="noopener">226. Invert Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode left = invertTree(root.left);</span><br><span class="line">        TreeNode right = invertTree(root.right);</span><br><span class="line">        TreeNode temp = left;</span><br><span class="line">        root.left = right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a><a href="https:// .com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">235. Lowest Common Ancestor of a Binary Search Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span>(left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left != <span class="keyword">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(right != <span class="keyword">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="257-Binary-Tree-Paths"><a href="#257-Binary-Tree-Paths" class="headerlink" title="257. Binary Tree Paths"></a><a href="https:// .com/problems/binary-tree-paths/" target="_blank" rel="noopener">257. Binary Tree Paths</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) helper(root, <span class="string">""</span> , res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root,String path, List&lt;String&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) res.add(path + root.val);</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>) helper(root.left, path + root. val + <span class="string">"-&gt;"</span> , res);</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>) helper(root.right, path + root. val  +<span class="string">"-&gt;"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="404-Sum-of-Left-Leaves"><a href="#404-Sum-of-Left-Leaves" class="headerlink" title="404. Sum of Left Leaves"></a><a href="https:// .com/problems/sum-of-left-leaves/" target="_blank" rel="noopener">404. Sum of Left Leaves</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// class Solution &#123;</span></span><br><span class="line"><span class="comment">//     public int sumOfLeftLeaves(TreeNode root) &#123;</span></span><br><span class="line"><span class="comment">//         int[] sum = new int[1];//定义</span></span><br><span class="line"><span class="comment">//         sum[0] = 0;</span></span><br><span class="line"><span class="comment">//         if(root == null) return 0;</span></span><br><span class="line"><span class="comment">//         if(root.left == null &amp;&amp; root.right == null) return 0;</span></span><br><span class="line"><span class="comment">//         if(root != null)&#123; </span></span><br><span class="line"><span class="comment">//              helper(3, root, sum);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return sum[0];</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     private void helper(int from, TreeNode node, int[] sum)&#123;</span></span><br><span class="line"><span class="comment">//         if(node.left == null &amp;&amp; node.right == null &amp;&amp; from == 1) &#123;</span></span><br><span class="line"><span class="comment">//             sum[0] = sum[0] + node.val;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         if(node.left != null)  helper(1, node.left, sum);</span></span><br><span class="line"><span class="comment">//         if(node.right != null)   helper(0, node.right, sum);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span> &amp;&amp; root.left.left == <span class="keyword">null</span> &amp;&amp; root.left.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sum += root.left.val;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += sumOfLeftLeaves(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        sum += sumOfLeftLeaves(root.right);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="437-Path-Sum-III"><a href="#437-Path-Sum-III" class="headerlink" title="437. Path Sum III"></a><a href="https:// .com/problems/path-sum-iii/" target="_blank" rel="noopener">437. Path Sum III</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(! que.isEmpty())&#123;</span><br><span class="line">            TreeNode node = que.poll();</span><br><span class="line">            <span class="keyword">int</span> tnum = helper(node, sum);</span><br><span class="line">            res += tnum;</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) que.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) que.offer(node.right);</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode node, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(sum - node.val == <span class="number">0</span>) <span class="keyword">return</span> helper(node.left, sum - node.val) + helper(node.right, sum - node.val) + <span class="number">1</span>; </span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">return</span> helper(node.left, sum - node.val) + helper(node.right, sum - node.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> pathSumFrom(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">pathSumFrom</span><span class="params">(TreeNode node, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (node.val == sum ? <span class="number">1</span> : <span class="number">0</span>) </span><br><span class="line">            + pathSumFrom(node.left, sum - node.val) + pathSumFrom(node.right, sum - node.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="501-Find-Mode-in-Binary-Search-Tree"><a href="#501-Find-Mode-in-Binary-Search-Tree" class="headerlink" title="501. Find Mode in Binary Search Tree"></a><a href="https:// .com/problems/find-mode-in-binary-search-tree/" target="_blank" rel="noopener">501. Find Mode in Binary Search Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#复杂度有点高 todo</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="keyword">int</span> max;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>]; </span><br><span class="line">        helper(root);</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> key: map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(key) == max) list.add(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = list.stream().mapToInt(Integer::valueOf).toArray();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) helper(node.left);</span><br><span class="line">        map.put(node.val, map.getOrDefault(node.val, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        max = Math.max(max, map.get(node.val));</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) helper(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a><a href="https://leetcode.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">98. Validate Binary Search Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#todo</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(root, Integer.MIN_VALUE, Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode root, <span class="keyword">int</span> minVal, <span class="keyword">int</span> maxVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt;= maxVal || root.val &lt;= minVal) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root.left, minVal, root.val) &amp; helper(root.right, root.val, maxVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="530-Minimum-Absolute-Difference-in-BST-todo"><a href="#530-Minimum-Absolute-Difference-in-BST-todo" class="headerlink" title="530. Minimum Absolute Difference in BST todo"></a><a href="https://leetcode.com/problems/minimum-absolute-difference-in-bst/" target="_blank" rel="noopener">530. Minimum Absolute Difference in BST todo</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    Integer prev = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> min;</span><br><span class="line">        </span><br><span class="line">        getMinimumDifference(root.left);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            min = Math.min(min, root.val - prev);</span><br><span class="line">        &#125;</span><br><span class="line">        prev = root.val;</span><br><span class="line">        </span><br><span class="line">        getMinimumDifference(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="538-Convert-BST-to-Greater-Tree"><a href="#538-Convert-BST-to-Greater-Tree" class="headerlink" title="538. Convert BST to Greater Tree"></a><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/" target="_blank" rel="noopener">538. Convert BST to Greater Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">convertBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        convertBST(root.right);</span><br><span class="line">        root.val = root.val + prev;</span><br><span class="line">        prev = root.val;</span><br><span class="line">        convertBST(root.left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="543-Diameter-of-Binary-Tree"><a href="#543-Diameter-of-Binary-Tree" class="headerlink" title="543. Diameter of Binary Tree"></a><a href="https://leetcode.com/problems/diameter-of-binary-tree/" target="_blank" rel="noopener">543. Diameter of Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxDim = Integer.MIN_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        helper(root);</span><br><span class="line">        <span class="keyword">return</span> maxDim;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = helper(node.left);</span><br><span class="line">        <span class="keyword">int</span> right = helper(node.right);</span><br><span class="line">        maxDim = Math.max(maxDim, left + right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="572-Subtree-of-Another-Tree"><a href="#572-Subtree-of-Another-Tree" class="headerlink" title="572. Subtree of Another Tree"></a><a href="https://leetcode.com/problems/subtree-of-another-tree/" target="_blank" rel="noopener">572. Subtree of Another Tree</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (helper(s, t)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isSubtree(s.left, t) || isSubtree(s.right, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode s, TreeNode t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> s.val == t.val &amp; helper(s.left, t.left) &amp; helper(s.right, t.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="617-Merge-Two-Binary-Trees"><a href="#617-Merge-Two-Binary-Trees" class="headerlink" title="617. Merge Two Binary Trees"></a><a href="https://leetcode.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">617. Merge Two Binary Trees</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**todo</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    TreeNode tree;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="keyword">null</span>)<span class="keyword">return</span> t2;</span><br><span class="line">        <span class="keyword">if</span>(t2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            t1.val += t2.val;</span><br><span class="line">            t1.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">            t1.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;树的相关-（难度easy）&quot;&gt;&lt;a href=&quot;#树的相关-（难度easy）&quot; class=&quot;headerlink&quot; title=&quot;树的相关 （难度easy）&quot;&gt;&lt;/a&gt;树的相关 （难度easy）&lt;/h3&gt;&lt;h4 id=&quot;100-sameTree&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="算法题" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
  </entry>
  
</feed>
